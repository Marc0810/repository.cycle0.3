<?xml version="1.0" encoding="UTF-8"?>
<includes><!-- Cycle 0.4 -->
<!-- ######### Global ######### -->
<variable name="GlobalDateFormat">
	<value>$INFO[System.Date(ddd)]. $INFO[System.Date(dd),,.]$INFO[System.Date(mm),,.]$INFO[System.Date(yyyy)]</value>
</variable>
<variable name="GlobalSkinversion">
	<value>Cycle 0.4</value>
</variable>
<include name="GlobalSkinDescription">
	<label>Basierend auf dem WIP Skin Cycle von Vanneska. Der Skin ist ausschließlich für [B]Kodi Kryton[/B] und sollte auch nur mit dieser Version zum Einsatz kommen.[CR][CR]• Cycle soll ein schneller "Basic-Skin" sein, der sich mit einfachem Layout und gut lesbarem Text auf die Grundfunktionen von Kodi beschränkt.[CR]• Die Gewichtung des Skins liegt auf Text und Farbe, einheitliche, schnelle Navigation und Ladezeiten durch die Verwendung von Icons als Text.[CR]• Cycle ist für die Verwendung von Datenbankmedien Film und Serie ausgelegt.[CR]• Nicht unterstützt wird Live-TV, DSP, Game Addons und das herunterladen von Untertiteln.</label>
</include>

<variable name="Global_Label">
	<value condition="ListItem.IsParentFolder">..</value>
	<value condition="Container.Content(episodes) + String.Contains(Container.FolderPath,.xsp) + !String.IsEmpty(ListItem.Episode)">$INFO[ListItem.TvShowTitle,, - ]$VAR[SeasonPrefix-short]$VAR[EpisodePrefix-short,, ]$INFO[ListItem.Title]</value>
	<value condition="Container.Content(episodes) + String.StartsWith(Container.Folderpath,videodb://recentlyaddedepisodes) + !String.IsEmpty(ListItem.Episode)">$INFO[ListItem.TvShowTitle,, - ]$VAR[SeasonPrefix-short]$VAR[EpisodePrefix-short,, ]$INFO[ListItem.Title]</value>
	<value condition="Container.Content(episodes) + !String.Contains(Container.FolderPath,.xsp) + !String.IsEmpty(ListItem.Episode)">$VAR[EpisodePrefix-short,, ]$INFO[ListItem.Title]</value>
	<value condition="Container.Content(songs)">$INFO[ListItem.Title]</value>
	<value>$INFO[ListItem.label]</value>
</variable>
<variable name="Global_Label2">
	<value condition="ListItem.IsParentFolder">..</value>
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Sortierung Titel -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Sortierung Titel -->

	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[20453]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Sortierung Episoden -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[20453]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Sortierung Episoden -->

	<value condition="Container.Content(seasons) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Sortierung Titel -->
	<value condition="Container.Content(seasons) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Sortierung Titel -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20074])">$VAR[FlagLabel-MPAA,FSK-,]</value><!-- Sortierung Altersfreigabe -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Sortierung Benutzer-Rating -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Sortierung Benutzer-Rating -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[568]) + !String.IsEmpty(ListItem.lastPlayed)">$INFO[ListItem.label2]</value><!-- Sortierung Zuletzt Abgespielt am -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[568]) + String.IsEmpty(ListItem.lastPlayed)">neue Serie</value><!-- Sortierung Zuletzt Abgespielt am -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20368])">$INFO[ListItem.Premiered]</value><!-- Sortierung Produktion-Code -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[567])">$INFO[ListItem.label2,(,)]</value><!-- Sortierung Abspielzaehler -->

	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[365]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Sortierung Name -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Sortierung Episode -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[563]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Sortierung Bewertung -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Sortierung Benutzer-Rating -->

	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[365]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Sortierung Name -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Sortierung Episode -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[563]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,,(0)]</value><!-- Sortierung Bewertung -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,,(0)]</value><!-- Sortierung Benutzer-Rating -->
	<value condition="Container.Content(directors) | Container.Content(actors)">$INFO[ListItem.Appearances]</value><!-- enthaltene filme/serien -->
	<value>$INFO[ListItem.label2]</value>
</variable>
<variable name="Global_Sublabel">
	<value condition="ListItem.IsParentFolder"></value>
	<value condition="Container.Content(songs) + String.StartsWith(Container.Folderpath,musicdb://songs) + !String.IsEmpty(ListItem.Album)">$INFO[ListItem.Artist,, - ]$INFO[ListItem.Album]</value><!-- unten Artist alle songs db -->
	<value condition="Container.Content(songs) + String.StartsWith(Container.Folderpath,musicdb://songs) + String.IsEmpty(ListItem.Album)">$INFO[ListItem.Artist]</value><!-- unten Artist alle songs db -->
	<value condition="Container.Content(songs) + String.IsEqual(Container.SortMethod,$LOCALIZE[552])">$INFO[ListItem.Album,, - ]$INFO[ListItem.Duration,, min.]</value><!-- Sortierung Datum -->
	<value condition="Container.Content(songs) + String.IsEqual(Container.SortMethod,$LOCALIZE[576])">$INFO[ListItem.Album,, - ]$INFO[ListItem.Duration,, min.]</value><!-- Sortierung Abgespielt -->
	<value condition="Container.Content(songs) + !String.IsEqual(Container.SortMethod,$LOCALIZE[552]) + !String.IsEqual(Container.SortMethod,$LOCALIZE[576]) + !String.IsEqual(Container.SortMethod,$LOCALIZE[551])">$INFO[ListItem.Genre]</value><!-- unten genre bei allen anderen -->
	<value condition="Container.Content(artists)">$INFO[ListItem.Property(Artist_Genre)]</value><!-- unten Artist alle songs db -->

	<value condition="Container.Content(albums) + ![String.IsEqual(Container.SortMethod,$LOCALIZE[556]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[578])]">$INFO[ListItem.Artist]</value><!-- unten Artist bei Sortierung nicht Titel, Album, Interpret, Interpret / Jahr -->
	<value condition="Container.Content(albums) + [String.IsEqual(Container.SortMethod,$LOCALIZE[556]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[578])]">$INFO[ListItem.Genre]</value><!-- unten Genre bei Sortierung Titel, Album, Interpret, Interpret / Jahr -->
	<value condition="Window.IsVisible(programs)">$INFO[ListItem.AddonType]</value>
</variable>

<!-- musik sort https://github.com/notspiff/kodi-cmake/blob/master/xbmc/music/GUIViewStateMusic.cpp 
Album title
SortByTitle	556	Duration

NODE_TYPE_TOP100
SortByGenre	none	Empty

NODE_TYPE_GENRE
SortByGenre	515	Empty

NODE_TYPE_YEAR:
SortByLabel	562	Year

NODE_TYPE_ARTIST:
SortByArtist	557	Empty

NODE_TYPE_ALBUM_COMPILATIONS
NODE_TYPE_ALBUM
NODE_TYPE_YEAR_ALBUM
SortByAlbum	558	Artist 
SortByArtist	557	Artist
SortByArtistThenYear	578	Artist/Year 
SortByYear	562	Year
SortByDateAdded	570	dateAdded
SortByPlaycount	567	Play count
SortByRating	563	Rating
SortByUserRating	38018	UserRating

NODE_TYPE_ALBUM_RECENTLY_ADDED
SortByNone	552	dateAdded

NODE_TYPE_ALBUM_RECENTLY_ADDED_SONGS:
SortByNone	552	dateAdded

NODE_TYPE_ALBUM_RECENTLY_PLAYED
SortByLastPlayed	568	last played

NODE_TYPE_ALBUM_RECENTLY_PLAYED_SONGS
SortByLastPlayed	568	last played

NODE_TYPE_ALBUM_TOP100:
SortByNone	551	Play count

SINGLES
SortByArtist	557	Duration
SortByArtistThenYear	578	Year
SortByTitle	556	Duration
SortByLabel	551	???
SortByTime	180	Duration
SortByRating	563	Rating
SortByUserRating	38018	UserRating
SortByDateAdded	570	DateAdded 

SONG
SortByTrackNumber	554	Duration
SortByTitle	556	Duration
SortByAlbum	558	Duration
SortByArtist	557	Duration
SortByArtistThenYear	578	Artist/Year
SortByLabel	551	???
SortByTime	180	Duration
SortByRating	563	Rating
SortByUserRating	38018	UserRating
SortByYear	562	Year
SortByDateAdded	570	DateAdded 
SortByPlaycount	567	PlayCount

NODE_TYPE_SONG_TOP100:
SortByNone	576	Play count
-->

<!-- Hidden controls -->
<include name="HiddenControl">
	<left>-10</left>
	<top>-10</top>
	<width>1</width>
	<height>1</height>
	<font></font>
	<texture></texture>
	<texturefocus></texturefocus>
	<texturenofocus></texturenofocus>
	<alttexturenofocus></alttexturenofocus>
	<alttexturefocus></alttexturefocus>
	<textureradiofocus></textureradiofocus>
	<textureradionofocus></textureradionofocus>
</include>

<!-- Global Compaircontainer -->
<include name="Compaircontainer">
	<top>1</top>
	<left>1</left>
	<height>1</height>
	<width>1</width>
	<viewtype>list</viewtype>
	<scrolltime tween="sine" easing="out">320</scrolltime>
	<itemlayout width="1" height="1">
	</itemlayout>
	<focusedlayout width="1" height="1">
	</focusedlayout>
</include>

<!-- nicht unterstuetzte Funktionen -->
<include name="UnfeaturedWindow">
	<include condition="Skin.HasSetting(EnableVintageOverlay)">Vintagebackground</include>
	<include condition="!Skin.HasSetting(EnableVintageOverlay)">Cyclebackground</include>
	<control type="group">
		<left>760</left>
		<top>340</top>
		<control type="label">
			<width>400</width>
			<height>200</height>
			<align>center</align>
			<font>weatherloading</font>
			<textcolor>red</textcolor>
			<label>Ë</label>
		</control>
		<control type="label">
			<top>380</top>
			<width>400</width>
			<height>80</height>
			<align>center</align>
			<label>Funktion ist nicht enthalten</label>
			<wrapmultiline>true</wrapmultiline>
		</control>
	</control>
</include>

<!-- premiere gekürzt nur Jahr -->
<variable name="PremieredShortLabel">
	<value condition="String.EndsWith(ListItem.Premiered,1927)">1927</value>
	<value condition="String.EndsWith(ListItem.Premiered,1928)">1928</value>
	<value condition="String.EndsWith(ListItem.Premiered,1929)">1929</value>
	<value condition="String.EndsWith(ListItem.Premiered,1930)">1930</value>
	<value condition="String.EndsWith(ListItem.Premiered,1931)">1931</value>
	<value condition="String.EndsWith(ListItem.Premiered,1932)">1932</value>
	<value condition="String.EndsWith(ListItem.Premiered,1933)">1933</value>
	<value condition="String.EndsWith(ListItem.Premiered,1934)">1934</value>
	<value condition="String.EndsWith(ListItem.Premiered,1935)">1935</value>
	<value condition="String.EndsWith(ListItem.Premiered,1936)">1936</value>
	<value condition="String.EndsWith(ListItem.Premiered,1937)">1937</value>
	<value condition="String.EndsWith(ListItem.Premiered,1938)">1938</value>
	<value condition="String.EndsWith(ListItem.Premiered,1939)">1939</value>
	<value condition="String.EndsWith(ListItem.Premiered,1940)">1940</value>
	<value condition="String.EndsWith(ListItem.Premiered,1941)">1941</value>
	<value condition="String.EndsWith(ListItem.Premiered,1942)">1942</value>
	<value condition="String.EndsWith(ListItem.Premiered,1943)">1943</value>
	<value condition="String.EndsWith(ListItem.Premiered,1944)">1944</value>
	<value condition="String.EndsWith(ListItem.Premiered,1945)">1945</value>
	<value condition="String.EndsWith(ListItem.Premiered,1946)">1946</value>
	<value condition="String.EndsWith(ListItem.Premiered,1947)">1947</value>
	<value condition="String.EndsWith(ListItem.Premiered,1948)">1948</value>
	<value condition="String.EndsWith(ListItem.Premiered,1949)">1949</value>
	<value condition="String.EndsWith(ListItem.Premiered,1950)">1950</value>
	<value condition="String.EndsWith(ListItem.Premiered,1951)">1951</value>
	<value condition="String.EndsWith(ListItem.Premiered,1952)">1952</value>
	<value condition="String.EndsWith(ListItem.Premiered,1953)">1953</value>
	<value condition="String.EndsWith(ListItem.Premiered,1954)">1954</value>
	<value condition="String.EndsWith(ListItem.Premiered,1955)">1955</value>
	<value condition="String.EndsWith(ListItem.Premiered,1956)">1956</value>
	<value condition="String.EndsWith(ListItem.Premiered,1957)">1957</value>
	<value condition="String.EndsWith(ListItem.Premiered,1958)">1958</value>
	<value condition="String.EndsWith(ListItem.Premiered,1959)">1959</value>
	<value condition="String.EndsWith(ListItem.Premiered,1960)">1960</value>
	<value condition="String.EndsWith(ListItem.Premiered,1961)">1961</value>
	<value condition="String.EndsWith(ListItem.Premiered,1962)">1962</value>
	<value condition="String.EndsWith(ListItem.Premiered,1963)">1963</value>
	<value condition="String.EndsWith(ListItem.Premiered,1964)">1964</value>
	<value condition="String.EndsWith(ListItem.Premiered,1965)">1965</value>
	<value condition="String.EndsWith(ListItem.Premiered,1966)">1966</value>
	<value condition="String.EndsWith(ListItem.Premiered,1967)">1967</value>
	<value condition="String.EndsWith(ListItem.Premiered,1968)">1968</value>
	<value condition="String.EndsWith(ListItem.Premiered,1969)">1969</value>
	<value condition="String.EndsWith(ListItem.Premiered,1970)">1970</value>
	<value condition="String.EndsWith(ListItem.Premiered,1971)">1971</value>
	<value condition="String.EndsWith(ListItem.Premiered,1972)">1972</value>
	<value condition="String.EndsWith(ListItem.Premiered,1973)">1973</value>
	<value condition="String.EndsWith(ListItem.Premiered,1974)">1974</value>
	<value condition="String.EndsWith(ListItem.Premiered,1975)">1975</value>
	<value condition="String.EndsWith(ListItem.Premiered,1976)">1976</value>
	<value condition="String.EndsWith(ListItem.Premiered,1977)">1977</value>
	<value condition="String.EndsWith(ListItem.Premiered,1978)">1978</value>
	<value condition="String.EndsWith(ListItem.Premiered,1979)">1979</value>
	<value condition="String.EndsWith(ListItem.Premiered,1980)">1980</value>
	<value condition="String.EndsWith(ListItem.Premiered,1981)">1981</value>
	<value condition="String.EndsWith(ListItem.Premiered,1982)">1982</value>
	<value condition="String.EndsWith(ListItem.Premiered,1983)">1983</value>
	<value condition="String.EndsWith(ListItem.Premiered,1984)">1984</value>
	<value condition="String.EndsWith(ListItem.Premiered,1985)">1985</value>
	<value condition="String.EndsWith(ListItem.Premiered,1986)">1986</value>
	<value condition="String.EndsWith(ListItem.Premiered,1987)">1987</value>
	<value condition="String.EndsWith(ListItem.Premiered,1988)">1988</value>
	<value condition="String.EndsWith(ListItem.Premiered,1989)">1989</value>
	<value condition="String.EndsWith(ListItem.Premiered,1990)">1990</value>
	<value condition="String.EndsWith(ListItem.Premiered,1991)">1991</value>
	<value condition="String.EndsWith(ListItem.Premiered,1992)">1992</value>
	<value condition="String.EndsWith(ListItem.Premiered,1993)">1993</value>
	<value condition="String.EndsWith(ListItem.Premiered,1994)">1994</value>
	<value condition="String.EndsWith(ListItem.Premiered,1995)">1995</value>
	<value condition="String.EndsWith(ListItem.Premiered,1996)">1996</value>
	<value condition="String.EndsWith(ListItem.Premiered,1997)">1997</value>
	<value condition="String.EndsWith(ListItem.Premiered,1998)">1998</value>
	<value condition="String.EndsWith(ListItem.Premiered,1999)">1999</value>
	<value condition="String.EndsWith(ListItem.Premiered,2000)">2000</value>
	<value condition="String.EndsWith(ListItem.Premiered,2001)">2001</value>
	<value condition="String.EndsWith(ListItem.Premiered,2002)">2002</value>
	<value condition="String.EndsWith(ListItem.Premiered,2003)">2003</value>
	<value condition="String.EndsWith(ListItem.Premiered,2004)">2004</value>
	<value condition="String.EndsWith(ListItem.Premiered,2005)">2005</value>
	<value condition="String.EndsWith(ListItem.Premiered,2006)">2006</value>
	<value condition="String.EndsWith(ListItem.Premiered,2007)">2007</value>
	<value condition="String.EndsWith(ListItem.Premiered,2008)">2008</value>
	<value condition="String.EndsWith(ListItem.Premiered,2009)">2009</value>
	<value condition="String.EndsWith(ListItem.Premiered,2010)">2010</value>
	<value condition="String.EndsWith(ListItem.Premiered,2011)">2011</value>
	<value condition="String.EndsWith(ListItem.Premiered,2012)">2012</value>
	<value condition="String.EndsWith(ListItem.Premiered,2013)">2013</value>
	<value condition="String.EndsWith(ListItem.Premiered,2014)">2014</value>
	<value condition="String.EndsWith(ListItem.Premiered,2015)">2015</value>
	<value condition="String.EndsWith(ListItem.Premiered,2016)">2016</value>
	<value condition="String.EndsWith(ListItem.Premiered,2017)">2017</value>
	<value condition="String.EndsWith(ListItem.Premiered,2018)">2018</value>
	<value condition="String.EndsWith(ListItem.Premiered,2019)">2019</value>
	<value condition="String.EndsWith(ListItem.Premiered,2020)">2020</value>
	<value>$INFO[ListItem.Premiered]</value>
</variable>

<!-- info lastplayed  -->
<variable name="Info-LastPlayed">
	<value condition="!String.IsEmpty(ListItem.LastPlayed) + String.IsEqual(ListItem.LastPlayed,Control.Getlabel(5011))">heute</value>
	<value>$INFO[ListItem.LastPlayed]</value>
</variable>

<!-- SMS -->
<include name="SMSButton">
	<width>6</width>
	<height>98</height>
	<font></font>
	<textcolor></textcolor>
	<textoffsetx></textoffsetx>
	<scroll>false</scroll>
</include>
<include name="SMSScrollbar">
	<control type="group">
		<left>1800</left>
		<top>120</top>
		<width>6</width>
		<height>880</height>
		<control type="grouplist" id="62">
			<width>6</width>
			<height>880</height>
			<onright condition="Control.IsVisible(50)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(51)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(52)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(53)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(56)">SetFocus(156)</onright>
			<onright condition="Control.IsVisible(71)">SetFocus(71)</onright>
			<onup>62</onup>
			<ondown>62</ondown>
			<onback>50</onback>
			<control type="button" id="621">
				<description>Jumpbutton 2</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS2)</onclick>
			</control>
			<control type="button" id="622">
				<description>Jumpbutton 3</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS3)</onclick>
			</control>
			<control type="button" id="623">
				<description>Jumpbutton 4</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS4)</onclick>
			</control>
			<control type="button" id="624">
				<description>Jumpbutton 5</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS5)</onclick>
			</control>
			<control type="button" id="625">
				<description>Jumpbutton 6</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS6)</onclick>
			</control>
			<control type="button" id="626">
				<description>Jumpbutton 7</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS7)</onclick>
			</control>
			<control type="button" id="627">
				<description>Jumpbutton 8</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS8)</onclick>
			</control>
			<control type="button" id="628">
				<description>Jumpbutton 9</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS9)</onclick>
			</control>
		</control>
	</control>
</include>
<!-- SMS und Scoll Letter -->
<variable name="ScrollSMSLetterLabel">
	<value condition="Control.HasFocus(621)">A[CR]B[CR]C</value>
	<value condition="Control.HasFocus(622)">D[CR]E[CR]F</value>
	<value condition="Control.HasFocus(623)">G[CR]H[CR]I</value>
	<value condition="Control.HasFocus(624)">J[CR]K[CR]L</value>
	<value condition="Control.HasFocus(625)">M[CR]N[CR]O</value>
	<value condition="Control.HasFocus(626)">P[CR]Q[CR]R[CR]S</value>
	<value condition="Control.HasFocus(627)">T[CR]U[CR]V</value>
	<value condition="Control.HasFocus(628)">W[CR]X[CR]Y[CR]Z</value>
</variable>
<include name="ScrollLetter">
	<control type="image">
		<width>68</width>
		<height>169</height>
		<texture colordiffuse="$VAR[PrimaryCol]">cycle/smsbar.png</texture>
		<visible>!Control.HasFocus(60)</visible>
	</control>
	<control type="label">
		<left>12</left>
		<top>-9</top>
		<width>56</width>
		<height>169</height>
		<align>center</align>
		<wrapmultiline>true</wrapmultiline>
		<font>SMSLetter</font>
		<textcolor>TextColorFO</textcolor>
		<label>$VAR[ScrollSMSLetterLabel]</label>
		<visible>!Container.Scrolling</visible>
	</control>
	<control type="label">
		<left>12</left>
		<top>-5</top>
		<width>56</width>
		<height>169</height>
		<align>center</align>
		<font>SMSLetter</font>
		<textcolor>TextColorFO</textcolor>
		<label>$INFO[ListItem.SortLetter]</label>
		<visible>Container.Scrolling + !Control.HasFocus(60)</visible>
	</control>
	<control type="label"><!-- pfeile -->
		<description>Pfeil nach unten</description>
		<left>18</left>
		<top>169</top>
		<width>40</width>
		<height>40</height>
		<font>IconNormal</font>
		<textcolor>$VAR[PrimaryCol]</textcolor>
		<label>.</label>
		<visible>ControlGroup(62).HasFocus + !Control.HasFocus(628)</visible>
	</control>
	<control type="label">
		<description>Pfeil nach oben beim letzten</description>
		<left>18</left>
		<top>169</top>
		<width>40</width>
		<height>40</height>
		<font>IconNormal</font>
		<textcolor>$VAR[PrimaryCol]</textcolor>
		<label>*</label>
		<visible>ControlGroup(62).HasFocus + Control.HasFocus(628)</visible>
	</control>
</include>

<!-- ######### Prefix/Suffix/Textvariablen/Zaehlvariablen ######### -->
<!-- enumerations -->
<variable name="CustomEnumeration">
	<value condition="String.IsEqual(skin.string(CustomEnumeration),1)">A</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),2)">B</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),3)">C</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),4)">D</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),5)">E</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),6)">F</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),7)">G</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),8)">H</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),9)">I</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),10)">J</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),11)">K</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),12)">L</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),13)">M</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),14)">N</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),15)">O</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),16)">P</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),17)">Q</value>
	<value>A</value>
</variable>

<!-- Prefix Variables -->
<variable name="EpisodeSpecialSuffix">
	<value condition="String.StartsWith(ListItem.Episode,S1)">01</value>
	<value condition="String.StartsWith(ListItem.Episode,S2)">02</value>
	<value condition="String.StartsWith(ListItem.Episode,S3)">03</value>
	<value condition="String.StartsWith(ListItem.Episode,S4)">04</value>
	<value condition="String.StartsWith(ListItem.Episode,S5)">05</value>
	<value condition="String.StartsWith(ListItem.Episode,S6)">06</value>
	<value condition="String.StartsWith(ListItem.Episode,S7)">07</value>
	<value condition="String.StartsWith(ListItem.Episode,S8)">08</value>
	<value condition="String.StartsWith(ListItem.Episode,S9)">09</value>
	<value condition="String.StartsWith(ListItem.Episode,S10)">10</value>
	<value condition="String.StartsWith(ListItem.Episode,S11)">11</value>
	<value condition="String.StartsWith(ListItem.Episode,S12)">12</value>
	<value condition="String.StartsWith(ListItem.Episode,S13)">13</value>
	<value condition="String.StartsWith(ListItem.Episode,S14)">14</value>
	<value condition="String.StartsWith(ListItem.Episode,S15)">15</value>
	<value condition="String.StartsWith(ListItem.Episode,S16)">16</value>
	<value condition="String.StartsWith(ListItem.Episode,S17)">17</value>
	<value condition="String.StartsWith(ListItem.Episode,S18)">18</value>
	<value condition="String.StartsWith(ListItem.Episode,S19)">19</value>
	<value condition="String.StartsWith(ListItem.Episode,S20)">20</value>
	<value>$INFO[ListItem.Episode]</value>
</variable>
<variable name="EpisodePrefix">
	<value condition="!Integer.IsGreater(ListItem.Episode,9)">0$INFO[ListItem.Episode]</value>
	<value>$INFO[ListItem.Episode]</value>
</variable>
<variable name="EpisodePrefix-short">
	<value condition="String.StartsWith(ListItem.Episode,S)">$VAR[EpisodeSpecialSuffix]</value>
	<value>$VAR[EpisodePrefix]</value>
</variable>
<variable name="EpisodePrefix-long">
	<value condition="String.StartsWith(ListItem.Episode,S)">Episode $VAR[EpisodeSpecialSuffix]</value>
	<value>Episode $VAR[EpisodePrefix]</value>
</variable>

<variable name="SeasonPrefix">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!Integer.IsGreater(ListItem.Season,9)">0$INFO[Listitem.Season]</value>
	<value>$INFO[Listitem.Season]</value>
</variable>
<variable name="SeasonPrefix-short">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!String.IsEmpty(ListItem.Season)">$VAR[SeasonPrefix]x</value>
</variable>
<variable name="SeasonPrefix-long">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!String.IsEmpty(ListItem.Season)">Staffel $VAR[SeasonPrefix]</value>
</variable>

<variable name="TrackPrefix">
	<value condition="String.IsEqual(ListItem.TrackNumber,0)"> </value>
	<value condition="!String.IsEmpty(ListItem.TrackNumber) + !Integer.IsGreater(ListItem.TrackNumber,9)">0$INFO[ListItem.TrackNumber]</value>
	<value condition="!String.IsEmpty(ListItem.TrackNumber)">$INFO[ListItem.TrackNumber]</value>
</variable>

<!-- OSD + Player -->
<variable name="VideoPlayerEpisodeSpecialSuffix"><!-- sicherheitshalber auch im player auch wenn es nicht vorkommt -->
	<value condition="String.StartsWith(VideoPlayer.Episode,S1)">01</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S2)">02</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S3)">03</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S4)">04</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S5)">05</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S6)">06</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S7)">07</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S8)">08</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S9)">09</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S10)">10</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S11)">11</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S12)">12</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S13)">13</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S14)">14</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S15)">15</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S16)">16</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S17)">17</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S18)">18</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S19)">19</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S20)">20</value>
	<value>$INFO[VideoPlayer.Episode]</value>
</variable>
<!-- alle gleich, wegen der besseren uebersicht - und trennung falls sich long oder short aendert, auch wenn manche eigentlich nicht notwendig sind als zweite var.. -->
<variable name="VideoPlayerEpisodePrefix">
	<value condition="!Integer.IsGreater(VideoPlayer.Episode,9)">0$INFO[VideoPlayer.Episode]</value>
	<value>$INFO[VideoPlayer.Episode]</value>
</variable>
<variable name="VideoPlayerEpisodePrefix-short">
	<value condition="String.StartsWith(VideoPlayer.Episode,S)">$VAR[VideoPlayerEpisodeSpecialSuffix]</value>
	<value condition="!String.IsEmpty(VideoPlayer.Episode)">$VAR[VideoPlayerEpisodePrefix]</value>
</variable>
<variable name="VideoPlayerEpisodePrefix-long">
	<value condition="String.StartsWith(VideoPlayer.Episode,S)">Episode $VAR[VideoPlayerEpisodeSpecialSuffix]</value>
	<value condition="!String.IsEmpty(VideoPlayer.Episode)">Episode $VAR[VideoPlayerEpisodePrefix]</value>
</variable>

<variable name="VideoPlayerSeasonPrefix">
	<value condition="!Integer.IsGreater(VideoPlayer.Season,9)">0$INFO[VideoPlayer.Season]</value>
	<value>$INFO[VideoPlayer.Season]</value>
</variable>
<variable name="VideoPlayerSeasonPrefix-short">
	<value condition="!String.IsEmpty(VideoPlayer.Season)">$VAR[VideoPlayerSeasonPrefix]x</value>
</variable>
<variable name="VideoPlayerSeasonPrefix-long">
	<value condition="!String.IsEmpty(VideoPlayer.Season)">Staffel $VAR[VideoPlayerSeasonPrefix]</value>
</variable>

<variable name="MusicPlayerTrackPrefix">
	<value condition="String.IsEqual(MusicPlayer.TrackNumber,0)"> </value>
	<value condition="!String.IsEmpty(MusicPlayer.TrackNumber) + !Integer.IsGreater(MusicPlayer.TrackNumber,9) + !String.StartsWith(MusicPlayer.TrackNumber,0)">0$INFO[MusicPlayer.TrackNumber]</value>
	<value condition="!String.IsEmpty(MusicPlayer.TrackNumber)">$INFO[MusicPlayer.TrackNumber]</value>
</variable>

<!-- ######### VideoDate VARS ######### -->
<variable name="VideoDatePrefix">
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PercentPlayed,10)">Zuletzt gesehen</value>
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PlayCount,0) + !ListItem.IsResumable">Zuletzt gesehen</value>
	<value condition="Container.Content(movies) + !String.IsEmpty(ListItem.Year)">Jahr</value>
	<value condition="!String.IsEmpty(ListItem.Premiered)">Premiere</value>
</variable>
<variable name="VideoDate">
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PercentPlayed,10)">$INFO[ListItem.PercentPlayed]% $INFO[ListItem.LastPlayed,am ,]</value>
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PlayCount,0)">$INFO[ListItem.LastPlayed]</value>
	<value condition="Container.Content(movies) + !String.IsEmpty(ListItem.Year)">$INFO[ListItem.Year]</value>
	<value condition="!String.IsEmpty(ListItem.Premiered)">$INFO[ListItem.Premiered]</value>
</variable>
<variable name="VideoDatePrefix-Categroyinfo">
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PercentPlayed,10)">Zuletzt gesehen: </value>
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PlayCount,0) + !Container(400).ListItem.IsResumable">Zuletzt gesehen: </value>
	<value condition="!String.IsEmpty(Container(400).ListItem.Premiered)">Premiere: </value>
</variable>
<variable name="VideoDate-Categroyinfo">
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PercentPlayed,10)">$INFO[Container(400).ListItem.PercentPlayed]% $INFO[Container(400).ListItem.LastPlayed,am ,]</value>
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PlayCount,0)">$INFO[Container(400).ListItem.LastPlayed]</value>
	<value condition="!String.IsEmpty(Container(400).ListItem.Premiered)">$INFO[Container(400).ListItem.Premiered]</value>
</variable>

<!-- ######### seasonview labels fuer icons in den Kringeln ######### -->
<variable name="SeasonPrefixLabel0">
	<value condition="!Integer.IsGreater(Container(54).ListItem.Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel1">
	<value condition="!Integer.IsGreater(Container(54).ListItem(1).Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel2">
	<value condition="!Integer.IsGreater(Container(54).ListItem(2).Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel3">
	<value condition="!Integer.IsGreater(Container(54).ListItem(3).Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel-1">
	<value condition="!Integer.IsGreater(Container(54).ListItem(-1).Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel-2">
	<value condition="!Integer.IsGreater(Container(54).ListItem(-2).Season,9)">0</value>
</variable>
<variable name="SeasonPrefixLabel-3">
	<value condition="!Integer.IsGreater(Container(54).ListItem(-3).Season,9)">0</value>
</variable>

<!-- staffel view anzahl -1 (alle Staffeln) -->
<variable name="Season54NumItems">
	<value condition="String.IsEqual(Container.NumItems,36)">35</value>
	<value condition="String.IsEqual(Container.NumItems,35)">34</value>
	<value condition="String.IsEqual(Container.NumItems,34)">33</value>
	<value condition="String.IsEqual(Container.NumItems,33)">32</value>
	<value condition="String.IsEqual(Container.NumItems,32)">31</value>
	<value condition="String.IsEqual(Container.NumItems,31)">30</value>
	<value condition="String.IsEqual(Container.NumItems,30)">29</value>
	<value condition="String.IsEqual(Container.NumItems,29)">28</value>
	<value condition="String.IsEqual(Container.NumItems,28)">27</value>
	<value condition="String.IsEqual(Container.NumItems,27)">26</value>
	<value condition="String.IsEqual(Container.NumItems,26)">25</value>
	<value condition="String.IsEqual(Container.NumItems,25)">24</value>
	<value condition="String.IsEqual(Container.NumItems,24)">23</value>
	<value condition="String.IsEqual(Container.NumItems,23)">22</value>
	<value condition="String.IsEqual(Container.NumItems,22)">21</value>
	<value condition="String.IsEqual(Container.NumItems,21)">20</value>
	<value condition="String.IsEqual(Container.NumItems,20)">19</value>
	<value condition="String.IsEqual(Container.NumItems,19)">18</value>
	<value condition="String.IsEqual(Container.NumItems,18)">17</value>
	<value condition="String.IsEqual(Container.NumItems,17)">16</value>
	<value condition="String.IsEqual(Container.NumItems,16)">15</value>
	<value condition="String.IsEqual(Container.NumItems,15)">14</value>
	<value condition="String.IsEqual(Container.NumItems,14)">13</value>
	<value condition="String.IsEqual(Container.NumItems,13)">12</value>
	<value condition="String.IsEqual(Container.NumItems,12)">11</value>
	<value condition="String.IsEqual(Container.NumItems,11)">10</value>
	<value condition="String.IsEqual(Container.NumItems,10)">9</value>
	<value condition="String.IsEqual(Container.NumItems,9)">8</value>
	<value condition="String.IsEqual(Container.NumItems,8)">7</value>
	<value condition="String.IsEqual(Container.NumItems,7)">6</value>
	<value condition="String.IsEqual(Container.NumItems,6)">5</value>
	<value condition="String.IsEqual(Container.NumItems,5)">4</value>
	<value condition="String.IsEqual(Container.NumItems,4)">3</value>
	<value condition="String.IsEqual(Container.NumItems,3)">2</value>
	<value condition="String.IsEqual(Container.NumItems,2)">1</value>
	<value>$INFO[Container.NumItems]</value>
</variable>

<!-- ######### Nowplaying und OSD ######### -->
<!-- OSD Anzeige last.Played ohne Uhrzeit Schnick Schnack -->
<variable name="Videoplayer-LastPlayed1">
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.01.)">01.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.01.)">02.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.01.)">03.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.01.)">04.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.01.)">05.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.01.)">06.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.01.)">07.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.01.)">08.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.01.)">09.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.01.)">10.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.01.)">11.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.01.)">12.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.01.)">13.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.01.)">14.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.01.)">15.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.01.)">16.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.01.)">17.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.01.)">18.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.01.)">19.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.01.)">20.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.01.)">21.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.01.)">22.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.01.)">23.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.01.)">24.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.01.)">25.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.01.)">26.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.01.)">27.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.01.)">28.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.01.)">29.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.01.)">30.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.01.)">31.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.02.)">01.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.02.)">02.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.02.)">03.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.02.)">04.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.02.)">05.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.02.)">06.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.02.)">07.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.02.)">08.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.02.)">09.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.02.)">10.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.02.)">11.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.02.)">12.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.02.)">13.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.02.)">14.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.02.)">15.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.02.)">16.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.02.)">17.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.02.)">18.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.02.)">19.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.02.)">20.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.02.)">21.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.02.)">22.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.02.)">23.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.02.)">24.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.02.)">25.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.02.)">26.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.02.)">27.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.02.)">28.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.03.)">01.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.03.)">02.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.03.)">03.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.03.)">04.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.03.)">05.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.03.)">06.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.03.)">07.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.03.)">08.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.03.)">09.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.03.)">10.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.03.)">11.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.03.)">12.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.03.)">13.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.03.)">14.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.03.)">15.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.03.)">16.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.03.)">17.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.03.)">18.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.03.)">19.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.03.)">20.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.03.)">21.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.03.)">22.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.03.)">23.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.03.)">24.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.03.)">25.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.03.)">26.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.03.)">27.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.03.)">28.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.03.)">29.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.03.)">30.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.03.)">31.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.04.)">01.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.04.)">02.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.04.)">03.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.04.)">04.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.04.)">05.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.04.)">06.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.04.)">07.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.04.)">08.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.04.)">09.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.04.)">10.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.04.)">11.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.04.)">12.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.04.)">13.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.04.)">14.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.04.)">15.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.04.)">16.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.04.)">17.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.04.)">18.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.04.)">19.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.04.)">20.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.04.)">21.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.04.)">22.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.04.)">23.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.04.)">24.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.04.)">25.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.04.)">26.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.04.)">27.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.04.)">28.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.04.)">29.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.04.)">30.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.05.)">01.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.05.)">02.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.05.)">03.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.05.)">04.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.05.)">05.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.05.)">06.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.05.)">07.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.05.)">08.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.05.)">09.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.05.)">10.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.05.)">11.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.05.)">12.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.05.)">13.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.05.)">14.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.05.)">15.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.05.)">16.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.05.)">17.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.05.)">18.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.05.)">19.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.05.)">20.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.05.)">21.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.05.)">22.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.05.)">23.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.05.)">24.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.05.)">25.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.05.)">26.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.05.)">27.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.05.)">28.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.05.)">29.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.05.)">30.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.05.)">31.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.06.)">01.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.06.)">02.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.06.)">03.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.06.)">04.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.06.)">05.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.06.)">06.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.06.)">07.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.06.)">08.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.06.)">09.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.06.)">10.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.06.)">11.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.06.)">12.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.06.)">13.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.06.)">14.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.06.)">15.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.06.)">16.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.06.)">17.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.06.)">18.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.06.)">19.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.06.)">20.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.06.)">21.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.06.)">22.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.06.)">23.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.06.)">24.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.06.)">25.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.06.)">26.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.06.)">27.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.06.)">28.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.06.)">29.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.06.)">30.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.07.)">01.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.07.)">02.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.07.)">03.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.07.)">04.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.07.)">05.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.07.)">06.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.07.)">07.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.07.)">08.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.07.)">09.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.07.)">10.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.07.)">11.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.07.)">12.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.07.)">13.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.07.)">14.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.07.)">15.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.07.)">16.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.07.)">17.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.07.)">18.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.07.)">19.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.07.)">20.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.07.)">21.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.07.)">22.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.07.)">23.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.07.)">24.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.07.)">25.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.07.)">26.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.07.)">27.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.07.)">28.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.07.)">29.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.07.)">30.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.07.)">31.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.08.)">01.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.08.)">02.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.08.)">03.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.08.)">04.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.08.)">05.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.08.)">06.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.08.)">07.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.08.)">08.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.08.)">09.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.08.)">10.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.08.)">11.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.08.)">12.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.08.)">13.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.08.)">14.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.08.)">15.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.08.)">16.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.08.)">17.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.08.)">18.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.08.)">19.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.08.)">20.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.08.)">21.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.08.)">22.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.08.)">23.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.08.)">24.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.08.)">25.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.08.)">26.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.08.)">27.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.08.)">28.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.08.)">29.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.08.)">30.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.08.)">31.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.09.)">01.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.09.)">02.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.09.)">03.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.09.)">04.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.09.)">05.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.09.)">06.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.09.)">07.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.09.)">08.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.09.)">09.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.09.)">10.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.09.)">11.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.09.)">12.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.09.)">13.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.09.)">14.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.09.)">15.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.09.)">16.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.09.)">17.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.09.)">18.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.09.)">19.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.09.)">20.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.09.)">21.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.09.)">22.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.09.)">23.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.09.)">24.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.09.)">25.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.09.)">26.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.09.)">27.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.09.)">28.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.09.)">29.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.09.)">30.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.10.)">01.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.10.)">02.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.10.)">03.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.10.)">04.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.10.)">05.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.10.)">06.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.10.)">07.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.10.)">08.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.10.)">09.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.10.)">10.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.10.)">11.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.10.)">12.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.10.)">13.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.10.)">14.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.10.)">15.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.10.)">16.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.10.)">17.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.10.)">18.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.10.)">19.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.10.)">20.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.10.)">21.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.10.)">22.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.10.)">23.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.10.)">24.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.10.)">25.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.10.)">26.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.10.)">27.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.10.)">28.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.10.)">29.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.10.)">30.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.10.)">31.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.11.)">01.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.11.)">02.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.11.)">03.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.11.)">04.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.11.)">05.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.11.)">06.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.11.)">07.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.11.)">08.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.11.)">09.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.11.)">10.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.11.)">11.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.11.)">12.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.11.)">13.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.11.)">14.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.11.)">15.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.11.)">16.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.11.)">17.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.11.)">18.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.11.)">19.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.11.)">20.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.11.)">21.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.11.)">22.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.11.)">23.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.11.)">24.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.11.)">25.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.11.)">26.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.11.)">27.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.11.)">28.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.11.)">29.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.11.)">30.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.12.)">01.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.12.)">02.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.12.)">03.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.12.)">04.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.12.)">05.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.12.)">06.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.12.)">07.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.12.)">08.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.12.)">09.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.12.)">10.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.12.)">11.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.12.)">12.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.12.)">13.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.12.)">14.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.12.)">15.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.12.)">16.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.12.)">17.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.12.)">18.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.12.)">19.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.12.)">20.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.12.)">21.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.12.)">22.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.12.)">23.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.12.)">24.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.12.)">25.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.12.)">26.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.12.)">27.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.12.)">28.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.12.)">29.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.12.)">30.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.12.)">31.12.</value>
</variable>
<variable name="Videoplayer-LastPlayed2">
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2010)">2010</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2011)">2011</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2012)">2012</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2013)">2013</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2014)">2014</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2015)">2015</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2016)">2016</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2017)">2017</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2018)">2018</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2019)">2019</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2020)">2020</value>
	<value>$INFO[VideoPlayer.LastPlayed]</value>
</variable>
<variable name="Videoplayer-Duration">
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,09:)">9:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,08:)">8:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,07:)">7:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,06:)">6:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,05:)">5:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,04:)">4:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,03:)">3:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,02:)">2:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,01:)">1:$INFO[Player.Duration(mm)]</value>
	<value>$INFO[Player.Duration(mm)]</value>
</variable>

<variable name="OSDStatus-Label">
	<value condition="!String.IsEmpty(Player.SeekStepSize) + String.StartsWith(Player.SeekStepSize,-)">$INFO[Player.SeekStepSize] zurück</value>
	<value condition="!String.IsEmpty(Player.SeekStepSize)">$INFO[Player.SeekStepSize] vorwärts</value>
	<value condition="Player.Caching">Zwischenspeichern...</value>
	<value condition="Player.Paused">Pausiert</value>
	<value condition="Player.Playing">Abspielen</value>
	<value condition="Player.Forwarding2x">FFx2</value>
	<value condition="Player.Forwarding4x">FFx4</value>
	<value condition="Player.Forwarding8x">FFx8</value>
	<value condition="Player.Forwarding16x">FFx16</value>
	<value condition="Player.Forwarding32x">FFx32</value>
	<value condition="Player.Rewinding2x">RWx2</value>
	<value condition="Player.Rewinding4x">RWx4</value>
	<value condition="Player.Rewinding8x">RWx8</value>
	<value condition="Player.Rewinding16x">RWx16</value>
	<value condition="Player.Rewinding32x">RWx32</value>
</variable>
<variable name="OSDStatus-Icon">
	<value condition="Player.Paused">ß</value>
	<value condition="Player.forwarding">Þ</value>
	<value condition="Player.rewinding">Ý</value>
	<value>à</value>
</variable>
<include name="OSDTopinfo-Left">
	<control type="grouplist">
		<width>1000</width>
		<height>100</height>
		<itemgap>10</itemgap>
		<orientation>horizontal</orientation>
		<control type="label">
			<include>OSDInfoIconDimension</include>
			<label>$VAR[OSDStatus-Icon]</label>
		</control>
		<!-- Nowplaying Info Zeile -->
		<control type="wraplist" id="5001">
			<left>5</left>
			<width>1000</width>
			<height>60</height>
			<autoscroll time="3000" delay="8000" repeat="5000">Player.Playing</autoscroll>
			<include>InfoScrolltime</include>
			<viewtype>list</viewtype>
			<visible>!VideoPlayer.Content(files) + !Window.IsVisible(seekbar)</visible>
			<itemlayout width="1000" height="60">
				<control type="label">
					<width>1000</width>
					<include>OSDLabelInfoDimension</include>
					<label>$INFO[ListItem.Label]</label>
					<animation type="Conditional" condition="true">
						<effect type="fade" start="100" end="0" delay="1600" time="400" />
					</animation>
				</control>
			</itemlayout>
			<focusedlayout width="1000" height="60">
				<control type="label">
					<width>1000</width>
					<include>OSDLabelInfoDimension</include>
					<label>$INFO[ListItem.Label]</label>
				</control>
			</focusedlayout>
			<content>
				<item id="1">
					<label>TV-Serie - $INFO[VideoPlayer.TVShowTitle]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$VAR[VideoPlayerSeasonPrefix-long]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$VAR[VideoPlayerEpisodePrefix-long]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$INFO[VideoPlayer.Title]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) | VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$INFO[VideoPlayer.Genre]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) | VideoPlayer.Content(episodes)</visible>
					<visible>!String.IsEmpty(VideoPlayer.Genre)</visible>
				</item>
				<item id="1">
					<label>$INFO[VideoPlayer.Year, aus dem Jahr ,]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) + !String.IsEmpty(VideoPlayer.Year)</visible>
				</item>
				<item id="5">
					<label>Zuletzt abgespielt am: $VAR[Videoplayer-LastPlayed1]$VAR[Videoplayer-LastPlayed2]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.LastPlayed)</visible>
				</item>
				<item id="5">
					<label>$INFO[VideoPlayer.PlayCount,, mal gesehen]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.PlayCount)</visible>
				</item>
				<item id="5">
					<label>Regie: $INFO[VideoPlayer.Director]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Director)</visible>
				</item>
				<item id="5">
					<label>Drehbuch: $INFO[VideoPlayer.Writer]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Writer)</visible>
				</item>
				<item id="6">
					<label>Land: $INFO[VideoPlayer.Country]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Country)</visible>
				</item>
				<item id="7">
					<label>Bewertung: $INFO[VideoPlayer.Rating]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Rating) + String.IsEmpty(VideoPlayer.RatingAndVotes)</visible>
				</item>
				<item id="8">
					<label>Bewertung: $INFO[VideoPlayer.RatingAndVotes]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.RatingAndVotes)</visible>
				</item>
			</content>
		</control>
		<!-- Playerstatus bei Vorlauf, Ruecklauf, Pause... oder Seekbar -->
		<control type="label">
			<description>Status Label</description>
			<width>400</width>
			<include>OSDLabelInfoDimension</include>
			<label>$VAR[OSDStatus-Label]</label>
			<visible>Window.IsVisible(seekbar) | VideoPlayer.Content(files)</visible>
		</control>
	</control>
</include>
<include name="OSDTopinfo-Right">
	<control type="grouplist">
		<description>Status oben info right - Zeit und Endzeit</description>
		<width>1200</width>
		<height>100</height>
		<itemgap>10</itemgap>
		<visible>!Window.IsVisible(videobookmarks) + !Window.IsVisible(DialogSettings.xml) + !Window.IsVisible(notification) + !Window.IsActive(extendedprogressdialog) + !Window.IsActive(DialogConfirm.xml) + !Window.IsActive(busydialog) + !Window.IsVisible(Custom_1197_ColorTimeRefresh.xml)</visible>
		<animation type="Conditional" condition="Window.IsVisible(volumebar)">
			<effect type="slide" start="0,0" end="-100,0" time="300" />
		</animation>
		<orientation>horizontal</orientation>
		<control type="label">
			<description>Zeit icon</description>
			<include>OSDInfoIconDimension</include>
			<label>á</label>
		</control>
		<control type="label">
			<description>Zeit label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[System.Time(hh),,:]$INFO[System.Time(mm)]</label>
		</control>
		<control type="label">
			<description>Divider Abstand 40 pixel</description>
			<width>40</width>
			<include>OSDLabelInfoDimension</include>
			<label></label>
		</control>
		<control type="label">
			<description>Endzeit icon</description>
			<include>OSDInfoIconDimension</include>
			<label>ã</label>
		</control>
		<control type="label">
			<description>Endzeit label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[VideoPlayer.FinishTime(hh),,:]$INFO[VideoPlayer.FinishTime(mm)]</label>
		</control>
	</control>
</include>
<include name="OSDBottominfo">
	<control type="group">
		<description>Status unten info left - player Zeit</description>
		<left>155</left>
		<top>830</top>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="Window.IsVisible(fullscreeninfo) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<animation effect="slide" start="0,65" end="0,65" time="0" condition="Window.IsVisible(fullscreeninfo) + [VideoPlayer.Content(files) | Player.IsInternetStream]">Conditional</animation>
		<control type="grouplist">
			<width>600</width>
			<height>60</height>
			<itemgap>40</itemgap>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Aktuelle playerzeit</description>
				<width>auto</width>
				<include>OSDLabelInfoDimension</include>
				<label>$INFO[Player.Time(hh),,:]$INFO[Player.Time(mm),,:]$INFO[Player.Time(ss)]</label>
			</control>
			<control type="label">
				<description>Aktuelle restzeit</description>
				<width>auto</width>
				<include>OSDLabelInfoDimension</include>
				<label>$INFO[Player.TimeRemaining(hh),,:]$INFO[Player.TimeRemaining(mm),,:]$INFO[Player.TimeRemaining(ss)]</label>
			</control>
		</control>
	</control>
	<control type="grouplist">
		<description>Status unten info rechts - Playlist Position wenn mehr als 1</description>
		<left>1548</left>
		<top>830</top>
		<width>400</width>
		<height>60</height>
		<itemgap>10</itemgap>
		<visible>Integer.IsGreater(Playlist.Length,1)</visible>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="Window.IsVisible(fullscreeninfo) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<animation effect="slide" start="0,65" end="0,65" time="0" condition="Window.IsVisible(fullscreeninfo) + [VideoPlayer.Content(files) | Player.IsInternetStream]">Conditional</animation>
		<orientation>horizontal</orientation>
		<control type="label">
			<description>Playlist icon</description>
			<include>OSDInfoIconDimension</include>
			<label>&lt;</label>
		</control>
		<control type="label">
			<description>Playlist Label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[Playlist.Position]$INFO[Playlist.Length,/]</label>
		</control>
	</control>
	<control type="grouplist">
		<description>Status unten info rechts - Chapter nur wenn Playlist = 1</description>
		<left>1548</left>
		<top>830</top>
		<width>400</width>
		<height>60</height>
		<itemgap>10</itemgap>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="Window.IsVisible(fullscreeninfo) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<animation effect="slide" start="0,65" end="0,65" time="0" condition="Window.IsVisible(fullscreeninfo) + [VideoPlayer.Content(files) | Player.IsInternetStream]">Conditional</animation>
		<orientation>horizontal</orientation>
		<visible>!Integer.IsGreater(Playlist.Length,1)</visible>
		<control type="label">
			<description>Kapitel icon</description>
			<include>OSDInfoIconDimension</include>
			<label>Ī</label>
		</control>
		<control type="label">
			<description>Kapitel label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[Player.Chapter]$INFO[Player.ChapterCount,/]</label>
		</control>
	</control>
</include>
<!-- OSD buttons - anders als MYPlaylist buttons fuer umrandete buttons im iconset Estuary -->
<variable name="OSDControl-Play">
	<value condition="Player.Paused">Ū</value>
	<value>ū</value>
</variable>
<variable name="OSDControl-Repeat">
	<value condition="Playlist.IsRepeat">Ş</value>
	<value condition="Playlist.IsRepeatOne">ş</value>
	<value>ŝ</value>
</variable>
<variable name="OSDControl-Random">
	<value condition="Playlist.IsRandom">Ŝ</value>
	<value>ś</value>
</variable>

<!-- OSD Dialogseekbaranzeige bei beschaeftigt -->
<variable name="OSDSeekbar-Value">
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),100)">Ȧ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),90)">ȧ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),80)">Ȩ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),70)">ȩ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),60)">Ȫ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),50)">ȫ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),40)">Ȭ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),30)">ȭ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),20)">Ȯ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),10)">ȯ</value>
	<value condition="Integer.IsGreaterOrEqual(Control.Getlabel(230),0)">Ȱ</value>
</variable>
<variable name="OSDSeekbar-Value-Inlay">
	<value condition="!String.IsEmpty(Player.SeekStepSize) + String.StartsWith(Player.SeekStepSize,-)">Ȳ</value>
	<value condition="!String.IsEmpty(Player.SeekStepSize)">ȱ</value>
	<value condition="Player.Caching">Ȱ</value>
	<value condition="player.forwarding">ȱ</value>
	<value condition="player.rewinding">Ȳ</value>
	<value condition="Player.Playing">ȳ</value>
	<value condition="Player.Paused">Ȱ</value>
</variable>

<!-- MYPlaylist buttons - anders als OSD buttons fuer umrandete buttons im iconset Estuary -->
<variable name="PlaylistControl-Repeat">
	<value condition="Playlist.IsRepeat">¤</value>
	<value condition="Playlist.IsRepeatOne">¥</value>
	<value>£</value>
</variable>
<variable name="PlaylistControl-Random">
	<value condition="Playlist.IsRandom">¢</value>
	<value>¡</value>
</variable>

<!-- ######### clock Nowplaying home und screensaver ######### -->
<include name="Cycle-HomeMenue-Nowplaying">
	<control type="videowindow">
		<description>Fake preview fuer zeitlabels</description>
		<left>-5</left>
		<top>-5</top>
		<width>5</width>
		<height>5</height>
		<visible>Player.HasVideo</visible>
	</control>
	<control type="group"><!-- Alternativanzeige fuer Skinlogo -->
		<top>800</top>
		<visible>Player.HasMedia + [Window.IsActive(Home) + !Window.IsVisible(Custom_1101_Widgets.xml)] | Window.IsActive(Custom_1150_Screensaver.xml)</visible>
		<animation type="Conditional" condition="!Control.HasFocus(9900) | Window.IsVisible(playercontrols)"><!-- home focus playercontrol -->
			<effect type="slide" start="0,0" end="0,80" delay="180" time="300" tween="quadratic" easing="out"/>
		</animation>
		<control type="grouplist"><!-- Video -->
			<left>360</left>
			<width>1200</width>
			<height>100</height>
			<align>center</align>
			<visible>Player.HasVideo</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<width>40</width>
				<height>45</height>
				<font>IconNormal</font>
				<label>$VAR[OSDStatus-Icon]</label>
			</control>
			<control type="label">
				<description>Serien Titel episoden</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<label>$INFO[VideoPlayer.TVShowTitle]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Enum</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<font>EnumRegularNormal</font>
				<label> $VAR[CustomEnumeration] </label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Titel episoden</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<label>$INFO[VideoPlayer.Title]</label>
			</control>
		</control>
		<control type="grouplist">
			<left>360</left>
			<top>50</top>
			<width>1200</width>
			<height>35</height>
			<align>center</align>
			<visible>Player.HasVideo</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Subtitel Episoden</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$VAR[VideoPlayerEpisodePrefix-long]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Enum</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>EnumRegularSmall</font>
				<label> $VAR[CustomEnumeration] </label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Subtitel Episoden Zeit</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$INFO[Player.Time]$INFO[Player.Duration,/,]</label>
			</control>
		</control>
		<control type="grouplist"><!-- audio -->
			<left>360</left>
			<width>1200</width>
			<height>100</height>
			<align>center</align>
			<visible>Player.HasAudio</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<width>40</width>
				<height>45</height>
				<font>IconNormal</font>
				<label>$VAR[OSDStatus-Icon]</label>
			</control>
			<control type="label">
				<description>Titel</description>
				<width>auto</width>
				<height>45</height>
				<include>GlobalScroll</include>
				<label>$VAR[MusicPlayerTrackPrefix,, ]$INFO[MusicPlayer.Title]</label>
			</control>
		</control>
		<control type="label">
			<description>Subtitel</description>
			<left>360</left>
			<top>50</top>
			<width>1200</width>
			<height>35</height>
			<align>center</align>
			<font>RegularSmall</font>
			<label>$INFO[MusicPlayer.Artist]</label>
			<visible>Player.HasAudio</visible>
		</control>
		<control type="grouplist">
			<left>360</left>
			<top>95</top>
			<width>1200</width>
			<height>100</height>
			<align>left</align>
			<visible>Player.HasAudio</visible>
			<animation effect="slide" start="0,0" end="0,-45" time="0" condition="String.IsEmpty(MusicPlayer.Artist)">Conditional</animation><!-- slide epty artist -->
			<control type="label">
				<description>Subtitel Zeit</description>
				<width>1200</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$INFO[Player.Time]$INFO[Player.Duration, / ,]</label>
				<visible>[Integer.IsGreater(Player.TimeRemaining,20) + !String.IsEmpty(MusicPlayer.offset(1).Title)] | String.IsEmpty(MusicPlayer.offset(1).Title)</visible>
			</control>
			<control type="label">
				<description>Subtitel naechstes 20 Sek. vorm Ende wenn vorhanden</description>
				<width>1200</width>
				<height>45</height>
				<align>center</align>
				<label>Folgt: $INFO[MusicPlayer.offset(1).Title]</label>
				<visible>!Integer.IsGreater(Player.TimeRemaining,20) + !String.IsEmpty(MusicPlayer.offset(1).Title)</visible>
			</control>
		</control>
	</control>
</include>

<!-- ######### content Variables ######### -->
<!-- ebene darunter fuer numitems -->
<variable name="Content-Focus">
	<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Doku) + Control.HasFocus(400) + String.IsEmpty(Container(400).ListItem.TVShowTitle) + Container(400).ListItem.IsCollection">videodb://movies/sets/$INFO[Container(400).ListItem.DBID]/</value>
	<value condition="Container.Content(sets) | ListItem.IsCollection">videodb://movies/sets/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(genres)">videodb://movies/genres/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(actors)">videodb://movies/actors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(directors)">videodb://movies/directors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(studios)">videodb://movies/studios/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(countries)">videodb://movies/countries/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(years)">videodb://movies/years/$INFO[ListItem.Label]/</value>

	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows/titles/)">videodb://tvshows/titles/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(genres)">videodb://tvshows/genres/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(actors)">videodb://tvshows/actors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(studios)">videodb://tvshows/studios/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(years)">videodb://tvshows/years/$INFO[ListItem.Label]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(albums) + String.StartsWith(Container.Folderpath,musicdb://albums/)">musicdb://albums/$INFO[ListItem.DBID]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(years)">musicdb://years/$INFO[ListItem.Label]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(artists) + String.StartsWith(Container.Folderpath,musicdb://artists/)">musicdb://artists/$INFO[ListItem.DBID]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(genres)">musicdb://genres/$INFO[ListItem.DBID]/</value>

	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioDecoder.png)">addons://user/kodi.audiodecoder/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonRepository.png)">addons://user/xbmc.addon.repository/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioDSP.png)">addons://user/kodi.adsp/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioEncoder.png)">addons://user/xbmc.audioencoder/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonContextItem.png)">addons://user/kodi.context.item/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Label,$LOCALIZE[35010])">addons://user/kodi.peripheral/</value><!-- DefaultAddon label Peripheriegeräte-Bibliothek -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Label,$LOCALIZE[35049])">addons://user/category.gameaddons/</value><!-- DefaultAddon label Spiele-Addons -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,$LOCALIZE[24048])">addons://user/kodi.inputstream/</value><!-- DefaultAddon label Videoplayer InputStream Addons -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Bilder-Addons)">addons://user/xbmc.addon.image</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonService.png)">addons://user/xbmc.service/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonInfoProvider.png)">addons://user/category.infoproviders/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonLookAndFeel.png)">addons://user/category.lookandfeel/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonImages.png)">addons://user/kodi.resource.images/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonScreensaver.png)">addons://user/xbmc.ui.screensaver/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonUISounds.png)">addons://user/kodi.resource.uisounds/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonSkin.png)">addons://user/xbmc.gui.skin/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonLanguage.png)">addons://user/kodi.resource.language/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonVisualization.png)">addons://user/xbmc.player.musicviz/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonMusic.png)">addons://user/xbmc.addon.audio/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonProgram.png)">addons://user/xbmc.addon.executable/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonPVRClient.png)">addons://user/xbmc.pvrclient/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonVideo.png)">addons://user/xbmc.addon.video/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonWebSkin.png)">addons://user/xbmc.webinterface</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonWeather.png)">addons://user/xbmc.python.weather/</value>
	<value condition="Window.IsVisible(addonbrowser) + ListItem.IsParentFolder">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Benutzer-Addons)">addons://manage</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,System-Addons)">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Alle)">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Aus Repository)">addons://repos</value>
</variable>
<variable name="Content-VideoPlaylist">
	<value condition="!Window.IsVisible(1198)">playlistvideo://</value>
</variable>

<variable name="Content-Similar">
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">special://skin/playlists/defaults/genres/tv/Comedy.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">special://skin/playlists/defaults/genres/tv/Family.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">special://skin/playlists/defaults/genres/tv/Krimi.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">special://skin/playlists/defaults/genres/tv/Anwalt.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel) | String.Contains(ListItem.Genre,Superheros)]">special://skin/playlists/defaults/genres/tv/Science fiction.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">special://skin/playlists/defaults/genres/tv/Animation.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">special://skin/playlists/defaults/genres/tv/Music.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">special://skin/playlists/defaults/genres/tv/Biografie.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">special://skin/playlists/defaults/genres/tv/Mystery.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">special://skin/playlists/defaults/genres/tv/Vampire.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">special://skin/playlists/defaults/genres/tv/Action.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">special://skin/playlists/defaults/genres/tv/Abenteuer.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">special://skin/playlists/defaults/genres/tv/MiniSeries.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">special://skin/playlists/defaults/genres/tv/Dokumenation.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + String.Contains(ListItem.Genre,Hbo)">special://skin/playlists/defaults/genres/tv/Hbo.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance) | String.Contains(ListItem.Genre,Romanze) | String.Contains(ListItem.Genre,Romantik)]">special://skin/playlists/defaults/genres/tv/Drama.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Baseball) | String.Contains(ListItem.Genre,Basketball)]">special://skin/playlists/defaults/genres/tv/Sport.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">special://skin/playlists/defaults/genres/tv/Krieg.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">special://skin/playlists/defaults/genres/tv/Historie.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter) | String.Contains(ListItem.Genre,Grusel)]">special://skin/playlists/defaults/genres/tv/Horror.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">special://skin/playlists/defaults/genres/tv/Arzt.xsp</value>

	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">special://skin/playlists/defaults/genres/film/Comedy.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">special://skin/playlists/defaults/genres/film/Family.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">special://skin/playlists/defaults/genres/film/Krimi.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">special://skin/playlists/defaults/genres/film/Anwalt.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel)]">special://skin/playlists/defaults/genres/film/Science fiction.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">special://skin/playlists/defaults/genres/film/Animation.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">special://skin/playlists/defaults/genres/film/Music.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">special://skin/playlists/defaults/genres/film/Biografie.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">special://skin/playlists/defaults/genres/film/Mystery.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">special://skin/playlists/defaults/genres/film/Vampire.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">special://skin/playlists/defaults/genres/film/Action.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">special://skin/playlists/defaults/genres/film/Abenteuer.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">special://skin/playlists/defaults/genres/film/MiniSeries.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">special://skin/playlists/defaults/genres/film/Dokumenation.xsp</value>
	<value condition="Container.Content(movies) + String.Contains(ListItem.Genre,Hbo)">special://skin/playlists/defaults/genres/film/Hbo.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance)]">special://skin/playlists/defaults/genres/film/Drama.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Basketball) | String.Contains(ListItem.Genre,Baseball)]">special://skin/playlists/defaults/genres/film/Sport.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">special://skin/playlists/defaults/genres/film/Krieg.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">special://skin/playlists/defaults/genres/film/Historie.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter)]">special://skin/playlists/defaults/genres/film/Horror.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">special://skin/playlists/defaults/genres/film/Arzt.xsp</value>
</variable>
<!-- Listentitel Ähnliche Filme nach Playliste -->
<variable name="Content-Similar-Label">
	<value condition="[String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">Komödie</value>
	<value condition="[String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">Familienfilme</value>
	<value condition="[String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">Krimis</value>
	<value condition="[String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">Anwälte</value>
	<value condition="[String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel) | String.Contains(ListItem.Genre,Superheros)]">Science fiction</value>
	<value condition="[String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">Animation</value>
	<value condition="[String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">Musik</value>
	<value condition="[String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">Biografie</value>
	<value condition="[String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">Thriller/Mystery</value>
	<value condition="[String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">Vampire</value>
	<value condition="[String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">Action</value>
	<value condition="[String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">Abenteuer</value>
	<value condition="[String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">Mini Serie</value>
	<value condition="[String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">Dokumenation</value>
	<value condition="String.Contains(ListItem.Genre,Hbo)">HBO</value>
	<value condition="[String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance) | String.Contains(ListItem.Genre,Romanze) | String.Contains(ListItem.Genre,Romantik)]">Drama/Romantik</value>
	<value condition="[String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Baseball) | String.Contains(ListItem.Genre,Basketball)]">Sport</value>
	<value condition="[String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">Krieg</value>
	<value condition="[String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">Historie/Klassiker</value>
	<value condition="[String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter) | String.Contains(ListItem.Genre,Grusel)]">Horror</value>
	<value condition="[String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">Ärzte</value>
</variable>

<!-- ######### CycleClock ######### -->
<variable name="CycleClock-Path">
	<value condition="System.HasAddon(resource.images.clock.cycle) + String.IsEqual(skin.string(ClockLayout),Retro)">resource://resource.images.clock.cycle/vintage/</value>
	<value condition="System.HasAddon(resource.images.clock.cycle) + String.IsEqual(skin.string(ClockLayout),Cycle)">resource://resource.images.clock.cycle/cycle/</value>
	<value condition="System.HasAddon(resource.images.clock.cycle) + String.IsEqual(skin.string(ClockLayout),SBB)">resource://resource.images.clock.cycle/sbb/</value>
	<value>clock/default/</value><!-- String Default und Empty-->
</variable>
<variable name="CycleClock-Hour">
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz00.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz01.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz02.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz03.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz04.png</value>

	<value condition="[String.IsEqual(System.Time(hh),1) | String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz05.png</value>
	<value condition="[String.IsEqual(System.Time(hh),1) | String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz06.png</value>
	<value condition="[String.IsEqual(System.Time(hh),1) | String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(hh),23) | String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz07.png</value>
	<value condition="[String.IsEqual(System.Time(hh),1) | String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz08.png</value>
	<value condition="[String.IsEqual(System.Time(hh),1) | String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz09.png</value>

	<value condition="[String.IsEqual(System.Time(hh),2) | String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz10.png</value>
	<value condition="[String.IsEqual(System.Time(hh),2) | String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz11.png</value>
	<value condition="[String.IsEqual(System.Time(hh),2) | String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz12.png</value>
	<value condition="[String.IsEqual(System.Time(hh),2) | String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz13.png</value>
	<value condition="[String.IsEqual(System.Time(hh),2) | String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz14.png</value>

	<value condition="[String.IsEqual(System.Time(hh),3) | String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz15.png</value>
	<value condition="[String.IsEqual(System.Time(hh),3) | String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz16.png</value>
	<value condition="[String.IsEqual(System.Time(hh),3) | String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz17.png</value>
	<value condition="[String.IsEqual(System.Time(hh),3) | String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz18.png</value>
	<value condition="[String.IsEqual(System.Time(hh),3) | String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz19.png</value>

	<value condition="[String.IsEqual(System.Time(hh),4) | String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz20.png</value>
	<value condition="[String.IsEqual(System.Time(hh),4) | String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz21.png</value>
	<value condition="[String.IsEqual(System.Time(hh),4) | String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz22.png</value>
	<value condition="[String.IsEqual(System.Time(hh),4) | String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz23.png</value>
	<value condition="[String.IsEqual(System.Time(hh),4) | String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz24.png</value>

	<value condition="[String.IsEqual(System.Time(hh),5) | String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz25.png</value>
	<value condition="[String.IsEqual(System.Time(hh),5) | String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz26.png</value>
	<value condition="[String.IsEqual(System.Time(hh),5) | String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz27.png</value>
	<value condition="[String.IsEqual(System.Time(hh),5) | String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz28.png</value>
	<value condition="[String.IsEqual(System.Time(hh),5) | String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz29.png</value>

	<value condition="[String.IsEqual(System.Time(hh),6) | String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz30.png</value>
	<value condition="[String.IsEqual(System.Time(hh),6) | String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz31.png</value>
	<value condition="[String.IsEqual(System.Time(hh),6) | String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz32.png</value>
	<value condition="[String.IsEqual(System.Time(hh),6) | String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz33.png</value>
	<value condition="[String.IsEqual(System.Time(hh),6) | String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz34.png</value>

	<!-- 17 -->
	<value condition="[String.IsEqual(System.Time(hh),7) | String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz35.png</value>
	<value condition="[String.IsEqual(System.Time(hh),7) | String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz36.png</value>
	<value condition="[String.IsEqual(System.Time(hh),7) | String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz37.png</value>
	<value condition="[String.IsEqual(System.Time(hh),7) | String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz38.png</value>
	<value condition="[String.IsEqual(System.Time(hh),7) | String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz39.png</value>

	<value condition="[String.IsEqual(System.Time(hh),8) | String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz40.png</value>
	<value condition="[String.IsEqual(System.Time(hh),8) | String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz41.png</value>
	<value condition="[String.IsEqual(System.Time(hh),8) | String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz42.png</value>
	<value condition="[String.IsEqual(System.Time(hh),8) | String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz43.png</value>
	<value condition="[String.IsEqual(System.Time(hh),8) | String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz44.png</value>

	<value condition="[String.IsEqual(System.Time(hh),9) | String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz45.png</value>
	<value condition="[String.IsEqual(System.Time(hh),9) | String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz46.png</value>
	<value condition="[String.IsEqual(System.Time(hh),9) | String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz47.png</value>
	<value condition="[String.IsEqual(System.Time(hh),9) | String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz48.png</value>
	<value condition="[String.IsEqual(System.Time(hh),9) | String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz49.png</value>

	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz50.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz51.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz52.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz53.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz54.png</value>

	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClock-Path]clocksz55.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClock-Path]clocksz56.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClock-Path]clocksz57.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClock-Path]clocksz58.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClock-Path]clocksz59.png</value>
</variable>
<variable name="CycleClock-Min">
	<value condition="String.IsEqual(System.Time(mm),01)">$VAR[CycleClock-Path]clockmz01.png</value>
	<value condition="String.IsEqual(System.Time(mm),02)">$VAR[CycleClock-Path]clockmz02.png</value>
	<value condition="String.IsEqual(System.Time(mm),03)">$VAR[CycleClock-Path]clockmz03.png</value>
	<value condition="String.IsEqual(System.Time(mm),04)">$VAR[CycleClock-Path]clockmz04.png</value>
	<value condition="String.IsEqual(System.Time(mm),05)">$VAR[CycleClock-Path]clockmz05.png</value>
	<value condition="String.IsEqual(System.Time(mm),06)">$VAR[CycleClock-Path]clockmz06.png</value>
	<value condition="String.IsEqual(System.Time(mm),07)">$VAR[CycleClock-Path]clockmz07.png</value>
	<value condition="String.IsEqual(System.Time(mm),08)">$VAR[CycleClock-Path]clockmz08.png</value>
	<value condition="String.IsEqual(System.Time(mm),09)">$VAR[CycleClock-Path]clockmz09.png</value>
	<value condition="String.IsEqual(System.Time(mm),10)">$VAR[CycleClock-Path]clockmz10.png</value>
	<value condition="String.IsEqual(System.Time(mm),11)">$VAR[CycleClock-Path]clockmz11.png</value>
	<value condition="String.IsEqual(System.Time(mm),12)">$VAR[CycleClock-Path]clockmz12.png</value>
	<value condition="String.IsEqual(System.Time(mm),13)">$VAR[CycleClock-Path]clockmz13.png</value>
	<value condition="String.IsEqual(System.Time(mm),14)">$VAR[CycleClock-Path]clockmz14.png</value>
	<value condition="String.IsEqual(System.Time(mm),15)">$VAR[CycleClock-Path]clockmz15.png</value>
	<value condition="String.IsEqual(System.Time(mm),16)">$VAR[CycleClock-Path]clockmz16.png</value>
	<value condition="String.IsEqual(System.Time(mm),17)">$VAR[CycleClock-Path]clockmz17.png</value>
	<value condition="String.IsEqual(System.Time(mm),18)">$VAR[CycleClock-Path]clockmz18.png</value>
	<value condition="String.IsEqual(System.Time(mm),19)">$VAR[CycleClock-Path]clockmz19.png</value>
	<value condition="String.IsEqual(System.Time(mm),20)">$VAR[CycleClock-Path]clockmz20.png</value>
	<value condition="String.IsEqual(System.Time(mm),21)">$VAR[CycleClock-Path]clockmz21.png</value>
	<value condition="String.IsEqual(System.Time(mm),22)">$VAR[CycleClock-Path]clockmz22.png</value>
	<value condition="String.IsEqual(System.Time(mm),23)">$VAR[CycleClock-Path]clockmz23.png</value>
	<value condition="String.IsEqual(System.Time(mm),24)">$VAR[CycleClock-Path]clockmz24.png</value>
	<value condition="String.IsEqual(System.Time(mm),25)">$VAR[CycleClock-Path]clockmz25.png</value>
	<value condition="String.IsEqual(System.Time(mm),26)">$VAR[CycleClock-Path]clockmz26.png</value>
	<value condition="String.IsEqual(System.Time(mm),27)">$VAR[CycleClock-Path]clockmz27.png</value>
	<value condition="String.IsEqual(System.Time(mm),28)">$VAR[CycleClock-Path]clockmz28.png</value>
	<value condition="String.IsEqual(System.Time(mm),29)">$VAR[CycleClock-Path]clockmz29.png</value>
	<value condition="String.IsEqual(System.Time(mm),30)">$VAR[CycleClock-Path]clockmz30.png</value>
	<value condition="String.IsEqual(System.Time(mm),31)">$VAR[CycleClock-Path]clockmz31.png</value>
	<value condition="String.IsEqual(System.Time(mm),32)">$VAR[CycleClock-Path]clockmz32.png</value>
	<value condition="String.IsEqual(System.Time(mm),33)">$VAR[CycleClock-Path]clockmz33.png</value>
	<value condition="String.IsEqual(System.Time(mm),34)">$VAR[CycleClock-Path]clockmz34.png</value>
	<value condition="String.IsEqual(System.Time(mm),35)">$VAR[CycleClock-Path]clockmz35.png</value>
	<value condition="String.IsEqual(System.Time(mm),36)">$VAR[CycleClock-Path]clockmz36.png</value>
	<value condition="String.IsEqual(System.Time(mm),37)">$VAR[CycleClock-Path]clockmz37.png</value>
	<value condition="String.IsEqual(System.Time(mm),38)">$VAR[CycleClock-Path]clockmz38.png</value>
	<value condition="String.IsEqual(System.Time(mm),39)">$VAR[CycleClock-Path]clockmz39.png</value>
	<value condition="String.IsEqual(System.Time(mm),40)">$VAR[CycleClock-Path]clockmz40.png</value>
	<value condition="String.IsEqual(System.Time(mm),41)">$VAR[CycleClock-Path]clockmz41.png</value>
	<value condition="String.IsEqual(System.Time(mm),42)">$VAR[CycleClock-Path]clockmz42.png</value>
	<value condition="String.IsEqual(System.Time(mm),43)">$VAR[CycleClock-Path]clockmz43.png</value>
	<value condition="String.IsEqual(System.Time(mm),44)">$VAR[CycleClock-Path]clockmz44.png</value>
	<value condition="String.IsEqual(System.Time(mm),45)">$VAR[CycleClock-Path]clockmz45.png</value>
	<value condition="String.IsEqual(System.Time(mm),46)">$VAR[CycleClock-Path]clockmz46.png</value>
	<value condition="String.IsEqual(System.Time(mm),47)">$VAR[CycleClock-Path]clockmz47.png</value>
	<value condition="String.IsEqual(System.Time(mm),48)">$VAR[CycleClock-Path]clockmz48.png</value>
	<value condition="String.IsEqual(System.Time(mm),49)">$VAR[CycleClock-Path]clockmz49.png</value>
	<value condition="String.IsEqual(System.Time(mm),50)">$VAR[CycleClock-Path]clockmz50.png</value>
	<value condition="String.IsEqual(System.Time(mm),51)">$VAR[CycleClock-Path]clockmz51.png</value>
	<value condition="String.IsEqual(System.Time(mm),52)">$VAR[CycleClock-Path]clockmz52.png</value>
	<value condition="String.IsEqual(System.Time(mm),53)">$VAR[CycleClock-Path]clockmz53.png</value>
	<value condition="String.IsEqual(System.Time(mm),54)">$VAR[CycleClock-Path]clockmz54.png</value>
	<value condition="String.IsEqual(System.Time(mm),55)">$VAR[CycleClock-Path]clockmz55.png</value>
	<value condition="String.IsEqual(System.Time(mm),56)">$VAR[CycleClock-Path]clockmz56.png</value>
	<value condition="String.IsEqual(System.Time(mm),57)">$VAR[CycleClock-Path]clockmz57.png</value>
	<value condition="String.IsEqual(System.Time(mm),58)">$VAR[CycleClock-Path]clockmz58.png</value>
	<value condition="String.IsEqual(System.Time(mm),59)">$VAR[CycleClock-Path]clockmz59.png</value>
	<value condition="String.IsEqual(System.Time(mm),00)">$VAR[CycleClock-Path]clockmz60.png</value>
</variable>
<variable name="CycleClock-Sec">
	<value condition="String.IsEqual(System.Time(ss),01)">$VAR[CycleClock-Path]clockscz01.png</value>
	<value condition="String.IsEqual(System.Time(ss),02)">$VAR[CycleClock-Path]clockscz02.png</value>
	<value condition="String.IsEqual(System.Time(ss),03)">$VAR[CycleClock-Path]clockscz03.png</value>
	<value condition="String.IsEqual(System.Time(ss),04)">$VAR[CycleClock-Path]clockscz04.png</value>
	<value condition="String.IsEqual(System.Time(ss),05)">$VAR[CycleClock-Path]clockscz05.png</value>
	<value condition="String.IsEqual(System.Time(ss),06)">$VAR[CycleClock-Path]clockscz06.png</value>
	<value condition="String.IsEqual(System.Time(ss),07)">$VAR[CycleClock-Path]clockscz07.png</value>
	<value condition="String.IsEqual(System.Time(ss),08)">$VAR[CycleClock-Path]clockscz08.png</value>
	<value condition="String.IsEqual(System.Time(ss),09)">$VAR[CycleClock-Path]clockscz09.png</value>
	<value condition="String.IsEqual(System.Time(ss),10)">$VAR[CycleClock-Path]clockscz10.png</value>
	<value condition="String.IsEqual(System.Time(ss),11)">$VAR[CycleClock-Path]clockscz11.png</value>
	<value condition="String.IsEqual(System.Time(ss),12)">$VAR[CycleClock-Path]clockscz12.png</value>
	<value condition="String.IsEqual(System.Time(ss),13)">$VAR[CycleClock-Path]clockscz13.png</value>
	<value condition="String.IsEqual(System.Time(ss),14)">$VAR[CycleClock-Path]clockscz14.png</value>
	<value condition="String.IsEqual(System.Time(ss),15)">$VAR[CycleClock-Path]clockscz15.png</value>
	<value condition="String.IsEqual(System.Time(ss),16)">$VAR[CycleClock-Path]clockscz16.png</value>
	<value condition="String.IsEqual(System.Time(ss),17)">$VAR[CycleClock-Path]clockscz17.png</value>
	<value condition="String.IsEqual(System.Time(ss),18)">$VAR[CycleClock-Path]clockscz18.png</value>
	<value condition="String.IsEqual(System.Time(ss),19)">$VAR[CycleClock-Path]clockscz19.png</value>
	<value condition="String.IsEqual(System.Time(ss),20)">$VAR[CycleClock-Path]clockscz20.png</value>
	<value condition="String.IsEqual(System.Time(ss),21)">$VAR[CycleClock-Path]clockscz21.png</value>
	<value condition="String.IsEqual(System.Time(ss),22)">$VAR[CycleClock-Path]clockscz22.png</value>
	<value condition="String.IsEqual(System.Time(ss),23)">$VAR[CycleClock-Path]clockscz23.png</value>
	<value condition="String.IsEqual(System.Time(ss),24)">$VAR[CycleClock-Path]clockscz24.png</value>
	<value condition="String.IsEqual(System.Time(ss),25)">$VAR[CycleClock-Path]clockscz25.png</value>
	<value condition="String.IsEqual(System.Time(ss),26)">$VAR[CycleClock-Path]clockscz26.png</value>
	<value condition="String.IsEqual(System.Time(ss),27)">$VAR[CycleClock-Path]clockscz27.png</value>
	<value condition="String.IsEqual(System.Time(ss),28)">$VAR[CycleClock-Path]clockscz28.png</value>
	<value condition="String.IsEqual(System.Time(ss),29)">$VAR[CycleClock-Path]clockscz29.png</value>
	<value condition="String.IsEqual(System.Time(ss),30)">$VAR[CycleClock-Path]clockscz30.png</value>
	<value condition="String.IsEqual(System.Time(ss),31)">$VAR[CycleClock-Path]clockscz31.png</value>
	<value condition="String.IsEqual(System.Time(ss),32)">$VAR[CycleClock-Path]clockscz32.png</value>
	<value condition="String.IsEqual(System.Time(ss),33)">$VAR[CycleClock-Path]clockscz33.png</value>
	<value condition="String.IsEqual(System.Time(ss),34)">$VAR[CycleClock-Path]clockscz34.png</value>
	<value condition="String.IsEqual(System.Time(ss),35)">$VAR[CycleClock-Path]clockscz35.png</value>
	<value condition="String.IsEqual(System.Time(ss),36)">$VAR[CycleClock-Path]clockscz36.png</value>
	<value condition="String.IsEqual(System.Time(ss),37)">$VAR[CycleClock-Path]clockscz37.png</value>
	<value condition="String.IsEqual(System.Time(ss),38)">$VAR[CycleClock-Path]clockscz38.png</value>
	<value condition="String.IsEqual(System.Time(ss),39)">$VAR[CycleClock-Path]clockscz39.png</value>
	<value condition="String.IsEqual(System.Time(ss),40)">$VAR[CycleClock-Path]clockscz40.png</value>
	<value condition="String.IsEqual(System.Time(ss),41)">$VAR[CycleClock-Path]clockscz41.png</value>
	<value condition="String.IsEqual(System.Time(ss),42)">$VAR[CycleClock-Path]clockscz42.png</value>
	<value condition="String.IsEqual(System.Time(ss),43)">$VAR[CycleClock-Path]clockscz43.png</value>
	<value condition="String.IsEqual(System.Time(ss),44)">$VAR[CycleClock-Path]clockscz44.png</value>
	<value condition="String.IsEqual(System.Time(ss),45)">$VAR[CycleClock-Path]clockscz45.png</value>
	<value condition="String.IsEqual(System.Time(ss),46)">$VAR[CycleClock-Path]clockscz46.png</value>
	<value condition="String.IsEqual(System.Time(ss),47)">$VAR[CycleClock-Path]clockscz47.png</value>
	<value condition="String.IsEqual(System.Time(ss),48)">$VAR[CycleClock-Path]clockscz48.png</value>
	<value condition="String.IsEqual(System.Time(ss),49)">$VAR[CycleClock-Path]clockscz49.png</value>
	<value condition="String.IsEqual(System.Time(ss),50)">$VAR[CycleClock-Path]clockscz50.png</value>
	<value condition="String.IsEqual(System.Time(ss),51)">$VAR[CycleClock-Path]clockscz51.png</value>
	<value condition="String.IsEqual(System.Time(ss),52)">$VAR[CycleClock-Path]clockscz52.png</value>
	<value condition="String.IsEqual(System.Time(ss),53)">$VAR[CycleClock-Path]clockscz53.png</value>
	<value condition="String.IsEqual(System.Time(ss),54)">$VAR[CycleClock-Path]clockscz54.png</value>
	<value condition="String.IsEqual(System.Time(ss),55)">$VAR[CycleClock-Path]clockscz55.png</value>
	<value condition="String.IsEqual(System.Time(ss),56)">$VAR[CycleClock-Path]clockscz56.png</value>
	<value condition="String.IsEqual(System.Time(ss),57)">$VAR[CycleClock-Path]clockscz57.png</value>
	<value condition="String.IsEqual(System.Time(ss),58)">$VAR[CycleClock-Path]clockscz58.png</value>
	<value condition="String.IsEqual(System.Time(ss),59)">$VAR[CycleClock-Path]clockscz59.png</value>
	<value condition="String.IsEqual(System.Time(ss),00)">$VAR[CycleClock-Path]clockscz60.png</value>
</variable>
<variable name="CycleClock-ZeigerCol">
	<value condition="String.IsEqual(skin.string(ClockLayout),SBB)">TextColorHeavy</value>
</variable>
<variable name="CycleClock-ZiffernCol">
	<value condition="String.IsEqual(skin.string(ClockLayout),SBB)">TextColorHeavy</value>
	<value>$VAR[PrimaryCol]</value>
</variable>
<include name="CycleClock">
	<control type="image">
		<description>Ziffernblatt</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[CycleClock-ZiffernCol]">$VAR[CycleClock-Path]zahlen.png</texture>
		<animation type="Conditional" condition="true">
			<effect type="fade" start="0" end="13" time="0" />
		</animation>
	</control>
	<control type="image">
		<width>714</width>
		<height>714</height>
		<texture>$VAR[CycleClock-Path]schrauben.png</texture>
	</control>
	<control type="image">
		<description>Stundenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[CycleClock-ZeigerCol]">$VAR[CycleClock-Hour]</texture>
	</control>
	<control type="image">
		<description>Minutenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[CycleClock-ZeigerCol]">$VAR[CycleClock-Min]</texture>
	</control>
	<control type="image">
		<description>Sekundenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[PrimaryCol]">$VAR[CycleClock-Sec]</texture>
	</control>
</include>

<!-- ######### Trailerwindow home/videos ######### -->
<include name="Trailerwindow502">
	<control type="group"><!-- Trailerwindow 502 -->
		<left>-1920</left>
		<animation effect="slide" start="0" end="1920" time="300" condition="Control.HasFocus(502)">Conditional</animation>
		<visible>Control.HasFocus(502) + Player.HasVideo</visible>
		<control type="button" id="502">
			<include>Hiddencontrol</include>
			<onleft>stop</onleft>
			<onleft>SetFocus(50)</onleft>
			<onleft>ClearProperty(Trailerpreview,home)</onleft>
			<onright>stop</onright>
			<onright>SetFocus(50)</onright>
			<onright>ClearProperty(Trailerpreview,home)</onright>
			<onup>ClearProperty(Trailerpreview,home)</onup>
			<onup>stop</onup>
			<onup>SetFocus(50)</onup>
			<ondown>ClearProperty(Trailerpreview,home)</ondown>
			<ondown>stop</ondown>
			<ondown>SetFocus(50)</ondown>
			<onclick>stop</onclick>
			<onclick>SetFocus(50)</onclick>
			<onclick>ClearProperty(Trailerpreview,home)</onclick>
		</control>
		<control type="group">
			<left>220</left>
			<top>119</top>
			<control type="image">
				<description>Hintergrund Dialog</description>
				<left>-8</left>
				<top>-8</top>
				<width>1505</width>
				<height>932</height>
				<include>DialogBackground</include>
			</control>
			<control type="image">
				<description>Hintergrund Titel</description>
				<left>-11</left>
				<top>-11</top>
				<width>1512</width>
				<height>80</height>
				<texture border="14,0,14,0" flipy="true" colordiffuse="$VAR[PrimaryCol]">cycle/full-11.png</texture>
			</control>
			<control type="grouplist">
				<description>Titel</description>
				<left>10</left>
				<width>1500</width>
				<height>60</height>
				<itemgap>10</itemgap>
				<align>left</align>
				<orientation>horizontal</orientation>
				<control type="label">
					<description>Play icon</description>
					<width>50</width>
					<height>60</height>
					<font>IconBig</font>
					<textcolor>TextColorFO</textcolor>
					<include>Animation-VintageFont-8</include>
					<label>v</label>
				</control>
				<control type="label">
					<description>Title</description>
					<width>1100</width>
					<height>60</height>
					<font>DialogHeaderSmaller</font>
					<textcolor>TextColorFO</textcolor>
					<include>Animation-VintageFont-8</include>
					<label>$INFO[Videoplayer.Title,Trailer: ]</label>
				</control>
				<control type="label">
					<description>Duration</description>
					<width>300</width>
					<height>60</height>
					<align>right</align>
					<font>DialogHeaderSmaller</font>
					<textcolor>TextColorFO</textcolor>
					<include>Animation-VintageFont-8</include>
					<label>$INFO[Player.Time]$INFO[Player.Duration, / ,]</label>
				</control>
			</control>
			<control type="image">
				<description>Hintergrund videowindow</description>
				<left>20</left>
				<top>75</top>
				<width>1450</width>
				<height>815</height>
				<texture colordiffuse="black">white.png</texture>
			</control>
			<control type="videowindow">
				<description>Videowindow</description>
				<left>20</left>
				<top>75</top>
				<width>1450</width>
				<height>815</height>
				<visible>Player.HasVideo</visible>
			</control>
		</control>
		<control type="group"><!-- progress kreis -->
			<left>860</left>
			<top>440</top>
			<width>200</width>
			<height>200</height>
			<control type="progress" id="230">
				<include>HiddenControl</include>
			</control>
			<visible>Player.Caching | Player.Paused | player.forwarding | player.rewinding</visible>
			<include>Animation-OpenCloseVisibleHidden-Fade</include>
			<control type="label">
				<width>200</width>
				<height>200</height>
				<align>center</align>
				<font>Iconkaitoast</font>
				<textcolor>$VAR[OSDDialogCol]</textcolor>
				<label>Ȧ</label>
				<include>Animation-Busyloader</include>
			</control>
			<control type="label">
				<width>200</width>
				<height>200</height>
				<align>center</align>
				<font>Iconkaitoast</font>
				<textcolor>$VAR[PrimaryCol]</textcolor>
				<label>$VAR[OSDSeekbar-Value]</label>
				<include>Animation-Busyloader</include>
			</control>
			<control type="label">
				<width>200</width>
				<height>200</height>
				<align>center</align>
				<font>Iconkaitoast</font>
				<textcolor>$VAR[PrimaryCol]</textcolor>
				<label>$VAR[OSDSeekbar-Value-Inlay]</label>
				<include>Animation-Busyloader</include>
			</control>
		</control>
	</control>
</include>

<!-- ######### Custom Wiget window home/videos ######### -->
<variable name="WidgetView-FallbackIcon">
	<value condition="!String.IsEmpty(ListItem.TVShowTitle)">D</value><!-- Episode/Serie -->
	<value>E</value>
</variable>
<variable name="WidgetView-Label">
	<value condition="String.IsEqual(ListItem.DBType,movie) + String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][COLOR=TextColorLight]$INFO[ListItem.Year, (,)][/COLOR][/B]</value><!-- Filme -->
	<value condition="String.IsEqual(ListItem.DBType,tvshow)">[B]$INFO[ListItem.TVShowTitle][/B][COLOR=TextColorLight]$INFO[ListItem.Year, (,)][/COLOR]</value><!-- Serie -->
	<value condition="String.IsEqual(ListItem.DBType,episode)">[B]$INFO[ListItem.TVShowTitle][/B]</value><!-- Episode -->
	<value>[B]$INFO[ListItem.label][/B]</value>
</variable>
<variable name="WidgetView-Label2">
	<value condition="String.IsEqual(ListItem.DBType,movie)">$INFO[ListItem.Duration,, min.]</value><!-- Filme -->
	<value condition="String.IsEqual(ListItem.DBType,tvshow) + !Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0)">$INFO[ListItem.Property(NumEpisodes),, Episoden]</value><!-- Serie -->
	<value condition="String.IsEqual(ListItem.DBType,tvshow) + Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0)">$INFO[ListItem.Property(UnWatchedEpisodes),, neue Episoden]</value><!-- Serie -->
	<value condition="String.IsEqual(ListItem.DBType,episode)">$VAR[SeasonPrefix-long,, ]$VAR[EpisodePrefix-long,,[CR]]$INFO[ListItem.Title]</value><!-- Episode -->
</variable>
<variable name="WidgetView-Title">
	<value condition="Window.IsVisible(home) + !String.IsEmpty(Skin.string(MainslotWidgetTitle))">$INFO[Skin.string(MainslotWidgetTitle)]</value>
	<value condition="Window.IsVisible(videos) + !String.IsEmpty(Skin.string(VideoslotWidgetTitle))">$INFO[Skin.String(VideoslotWidgetTitle)]</value>
	<value>Widget auswählen</value>
</variable>
<variable name="WidgetView-Content">
	<value condition="Window.IsVisible(home)">$INFO[Skin.String(MainslotWidgetContent)]</value>
	<value condition="Window.IsVisible(videos)">$INFO[Skin.String(VideoslotWidgetContent)]</value>
</variable>

<!-- ######### settings fakeinfo wenn anzeige rechts leer ######### -->
<include name="Settings-Overview">
	<control type="group">
		<control type="image">
			<description>Hintergrund</description>
			<left>12</left>
			<top>-30</top>
			<width>1103</width>
			<height>835</height>
			<texture colordiffuse="ListBackgroundDiffuse">white.png</texture>
		</control>
		<control type="grouplist">
			<width>1105</width>
			<height>855</height>
			<usecontrolcoords>true</usecontrolcoords>
			<control type="button">
				<description>BuildVersion</description>
				<include>SettingMenu-SettingButton</include>
				<label>Version</label>
				<label2>$INFO[System.BuildVersion]</label2>
			</control>
			<control type="button">
				<description>ScreenResolution</description>
				<include>SettingMenu-SettingButton</include>
				<label>Anzeige</label>
				<label2>$INFO[System.ScreenResolution]</label2>
			</control>
			<control type="button">
				<description>Language</description>
				<include>SettingMenu-SettingButton</include>
				<label>Sprache</label>
				<label2>$INFO[System.Language]</label2>
			</control>
			<control type="button">
				<description>TotalUptime</description>
				<include>SettingMenu-SettingButton</include>
				<label>Laufzeit</label>
				<label2>$INFO[System.TotalUptime]</label2>
			</control>
			<control type="button">
				<description>InternetState</description>
				<include>SettingMenu-SettingButton</include>
				<label>Internet</label>
				<label2>$INFO[System.InternetState]</label2>
			</control>
			<control type="button">
				<description>CpuUsage</description>
				<include>SettingMenu-SettingButton</include>
				<label>Auslastung</label>
				<label2>$INFO[System.CpuUsage]</label2>
			</control>
			<control type="progress">
				<description>CPU BAR</description>
				<left>25</left>
				<width>1115</width>
				<height>24</height>
				<info>System.CPUUsage</info>
				<reveal>true</reveal>
				<texturebg colordiffuse="TextColorLight">dialogs/progress/bg.png</texturebg>
				<lefttexture colordiffuse="$VAR[PrimaryCol]">dialogs/progress/left.png</lefttexture>
				<midtexture colordiffuse="$VAR[SecondaryCol]">dialogs/progress/left.png</midtexture>
				<righttexture colordiffuse="$VAR[SecondaryCol]">dialogs/progress/right.png</righttexture>
				<overlaytexture></overlaytexture>
			</control>
			<control type="button">
				<description>UsedSpacePercent</description>
				<include>SettingMenu-SettingButton</include>
				<label>Speicher</label>
				<label2>$INFO[System.FreeSpacePercent]</label2>
			</control>
			<control type="progress">
				<description>Memory BAR</description>
				<left>25</left>
				<width>1115</width>
				<height>24</height>
				<info>system.memory(free)</info>
				<reveal>true</reveal>
				<texturebg colordiffuse="TextColorLight">dialogs/progress/bg.png</texturebg>
				<lefttexture colordiffuse="$VAR[PrimaryCol]">dialogs/progress/left.png</lefttexture>
				<midtexture colordiffuse="$VAR[SecondaryCol]">dialogs/progress/left.png</midtexture>
				<righttexture colordiffuse="$VAR[SecondaryCol]">dialogs/progress/right.png</righttexture>
				<overlaytexture></overlaytexture>
			</control>
			<control type="button">
				<description>Titel</description>
				<include>SettingMenu-SettingLabel</include>
				<label>Skin</label>
			</control>
			<control type="button">
				<description>Skinversion</description>
				<include>SettingMenu-SettingButton</include>
				<label>Version</label>
				<label2>$VAR[GlobalSkinversion]</label2>
			</control>
			<control type="radiobutton">
				<description>Vintagedesign</description>
				<include>SettingMenu-SettingButton</include>
				<label>Vintagedesign</label>
				<selected>Skin.HasSetting(EnableVintageOverlay)</selected>
			</control>
			<control type="button">
				<description>Vintagedesign</description>
				<include>SettingMenu-SettingButton</include>
				<label>Schriftauswahl</label>
				<label2>$INFO[Skin.string(Skinfont)]</label2>
			</control>
		</control>
	</control>
</include>

<include name="Settings-DBOverview">
	<control type="group">
		<width>1025</width>
		<height>700</height>
		<control type="image">
			<description>Hintergrund</description>
			<left>12</left>
			<top>-30</top>
			<width>1103</width>
			<height>835</height>
			<texture colordiffuse="ListBackgroundDiffuse">white.png</texture>
		</control>
		<control type="grouplist">
			<left>12</left>
			<top>20</top>
			<width>1125</width>
			<height>770</height>
			<align>left</align>
			<control type="image">
				<description>Hintergrund</description>
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
		</control>
		<control type="label">
			<left>25</left>
			<top>20</top>
			<description>Titel</description>
			<width>1025</width>
			<height>60</height>
			<label>Datenbankübersicht</label>
			<font>BreadcumbNormal</font>
		</control>
		<control type="grouplist">
			<left>70</left>
			<top>80</top>
			<width>1025</width>
			<height>360</height>
			<align>right</align>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Neue</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<font>BoldNormal</font>
				<label>Neue</label>
			</control>
			<control type="label">
				<description>Gesehen</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<font>BoldNormal</font>
				<label>Gesehen</label>
			</control>
			<control type="label">
				<description>Gesamt</description>
				<width>290</width>
				<height>60</height>
				<align>right</align>
				<font>BoldNormal</font>
				<label>Gesamt</label>
			</control>
		</control>
		<control type="grouplist">
			<left>25</left>
			<top>140</top>
			<width>1025</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Serien</description>
				<width>250</width>
				<height>60</height>
				<label>Serien</label>
			</control>
			<control type="label">
				<description>Episoden</description>
				<width>250</width>
				<height>60</height>
				<label>Episoden</label>
			</control>
			<control type="label">
				<description>Filme</description>
				<width>250</width>
				<height>60</height>
				<label>Filme</label>
			</control>
			<control type="label">
				<description>Musikalbum</description>
				<width>250</width>
				<height>60</height>
				<label>Musik Alben</label>
			</control>
			<control type="label">
				<description>Musikalbum</description>
				<width>250</width>
				<height>60</height>
				<label>Musik Songs</label>
			</control>
			<control type="label">
				<description>Musikalbum</description>
				<width>250</width>
				<height>60</height>
				<label>Interpreten</label>
			</control>
		</control>
		<control type="grouplist">
			<description>Neue</description>
			<left>300</left>
			<top>140</top>
			<width>250</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Serien</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(TVShows.UnWatched)]</label>
			</control>
			<control type="label">
				<description>Episoden</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Episodes.UnWatched)]</label>
			</control>
			<control type="label">
				<description>Filme</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Movies.UnWatched)]</label>
			</control>
			<control type="label">
				<description>musik alben</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
			<control type="label">
				<description>musik songs</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
			<control type="label">
				<description>musik interpreten</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
		</control>
		<control type="grouplist">
			<description>gesehen</description>
			<left>550</left>
			<top>140</top>
			<width>250</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Serien</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(TVShows.Watched)]</label>
			</control>
			<control type="label">
				<description>Episoden</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Episodes.Watched)]</label>
			</control>
			<control type="label">
				<description>Filme</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Movies.Watched)]</label>
			</control>
			<control type="label">
				<description>musik alben</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
			<control type="label">
				<description>musik songs</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
			<control type="label">
				<description>musik interpreten</description>
				<width>250</width>
				<height>60</height>
				<label></label>
			</control>
		</control>
		<control type="grouplist">
			<description>alle</description>
			<left>840</left>
			<top>140</top>
			<width>250</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Serien</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(TVShows.Count)]</label>
			</control>
			<control type="label">
				<description>Episoden</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Episodes.Count)]</label>
			</control>
			<control type="label">
				<description>Filme</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Movies.Count)]</label>
			</control>
			<control type="label">
				<description>musik alben</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Music.AlbumsCount)]</label>
			</control>
			<control type="label">
				<description>musik songs</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Music.SongsCount)]</label>
			</control>
			<control type="label">
				<description>musik interpreten</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Window(Home).Property(Music.ArtistsCount)]</label>
			</control>
		</control>
	</control>
</include>

<include name="Settings-AddonOverview">
	<control type="group">
		<width>1025</width>
		<height>700</height>
		<control type="image">
			<description>Hintergrund</description>
			<left>12</left>
			<top>-30</top>
			<width>1103</width>
			<height>835</height>
			<texture colordiffuse="ListBackgroundDiffuse">white.png</texture>
		</control>
		<control type="grouplist">
			<left>12</left>
			<top>20</top>
			<width>1125</width>
			<height>770</height>
			<align>left</align>
			<control type="image">
				<description>Hintergrund</description>
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
			<control type="image">
				<description>Hintergrund</description>
				<width>1025</width>
				<height>60</height>
				<texture></texture>
			</control>
			<control type="image">
				<width>1103</width>
				<height>60</height>
				<texture colordiffuse="TextColorLight">white.png</texture>
				<include>Animation-Opacity30</include>
			</control>
		</control>
		<control type="label">
			<left>25</left>
			<top>20</top>
			<description>Titel</description>
			<width>1025</width>
			<height>60</height>
			<label>Addonübersicht</label>
			<font>BreadcumbNormal</font>
		</control>
		<control type="grouplist">
			<left>25</left>
			<top>80</top>
			<width>1125</width>
			<height>360</height>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Neue</description>
				<width>1075</width>
				<height>60</height>
				<align>right</align>
				<font>BoldNormal</font>
				<label>Installiert</label>
			</control>
		</control>
		<control type="grouplist">
			<left>25</left>
			<top>140</top>
			<width>1025</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Serien</description>
				<width>650</width>
				<height>60</height>
				<label>Programme</label>
			</control>
			<control type="label">
				<description>Episoden</description>
				<width>650</width>
				<height>60</height>
				<label>Video</label>
			</control>
			<control type="label">
				<description>Filme</description>
				<width>650</width>
				<height>60</height>
				<label>Audio</label>
			</control>
			<control type="label">
				<description>Bilder</description>
				<width>650</width>
				<height>60</height>
				<label>Bilder</label>
			</control>
			<control type="label">
				<description>Bilder</description>
				<width>650</width>
				<height>60</height>
				<label>Verfügbare Aktualisierungen</label>
			</control>
		</control>
		<control type="grouplist">
			<description>Neue</description>
			<left>845</left>
			<top>140</top>
			<width>250</width>
			<height>360</height>
			<align>left</align>
			<control type="label">
				<description>Programme</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Container(20001).NumItems]</label>
			</control>
			<control type="label">
				<description>Video</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Container(20002).NumItems]</label>
			</control>
			<control type="label">
				<description>Musik</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Container(20003).NumItems]</label>
			</control>
			<control type="label">
				<description>Bilder</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Container(20004).NumItems]</label>
			</control>
			<control type="label">
				<description>Updates</description>
				<width>250</width>
				<height>60</height>
				<align>right</align>
				<label>$INFO[Container(20005).NumItems]</label>
			</control>
		</control>
	</control>
</include>

<include name="Settings-SkinOverview">
	<control type="group">
		<width>1025</width>
		<height>700</height>
		<control type="image">
			<description>Hintergrund</description>
			<left>12</left>
			<top>-30</top>
			<width>1103</width>
			<height>835</height>
			<texture colordiffuse="ListBackgroundDiffuse">white.png</texture>
		</control>
		<control type="label">
			<description>Titel</description>
			<left>25</left>
			<width>1025</width>
			<height>60</height>
			<label>$VAR[GlobalSkinversion]</label>
			<font>BreadcumbNormal</font>
		</control>
		<control type="label">
			<description>Subtitel</description>
			<left>25</left>
			<width>1025</width>
			<height>60</height>
			<top>40</top>
			<label>Ein Skin für Kodi!</label>
			<font>RegularSmall</font>
		</control>
		<control type="textbox">
			<description>Beschreibung</description>
			<left>25</left>
			<top>140</top>
			<width>1025</width>
			<height max="572">auto</height>
			<include>GlobalSkinDescription</include>
		</control>
	</control>
</include>
</includes>

