<?xml version="1.0" encoding="UTF-8"?>
<includes>
<!-- Cycle 0.3 -->
<!-- ######################### -->
<!-- Global 
############################## -->
<variable name="GlobalDateFormat">
	<value>$INFO[System.Date(ddd)]. $INFO[System.Date(dd),,.]$INFO[System.Date(mm),,.]$INFO[System.Date(yyyy)]</value>
</variable>

<variable name="GlobalSkinversion">
	<value>Cycle 0.3</value>
</variable>

<include name="GlobalSkinDescription">
	<label>Basierend auf dem WIP Skin Cycle von Vanneska. Der Skin ist ausschließlich für [B]Kodi Kryton ab Alpha2[/B] und sollte auch nur mit dieser Version zum Einsatz kommen.[CR][CR]• Cycle soll ein schneller "Basic-Skin" sein, der sich mit einfachem Layout, gut lesbarem Text und unaufdringlichem Design, auf die Grundfunktionen von Kodi beschränkt.[CR][CR]• Die Gewichtung des Skins liegt auf Text und Farbe, einheitliche, schnelle Navigation und Ladezeiten durch die Verwendung von Icons als Text.[CR][CR]• Cycle ist für die Verwendung der Datenbankmedien Film und Serie ausgelegt.</label>
</include>

<variable name="global_label2">
	<value condition="ListItem.IsParentFolder">..</value>
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Titel -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Titel -->
	
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[20453]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Episoden -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[20453]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Episoden -->
	
	<value condition="Container.Content(seasons) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + !String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes)]$INFO[ListItem.Property(UnWatchedEpisodes), (,) Episoden]</value><!-- Titel -->
	<value condition="Container.Content(seasons) + String.IsEqual(Container.SortMethod,$LOCALIZE[556]) + String.IsEqual(ListItem.Property(TotalEpisodes),ListItem.Property(UnWatchedEpisodes))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Titel -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20074])">$VAR[FlagLabel-MPAA,FSK-,]</value><!-- Altersfreigabe -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Benutzer-Rating -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Benutzer-Rating -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[568]) + !String.IsEmpty(ListItem.lastPlayed)">$INFO[ListItem.label2]</value><!-- Zuletzt Abgespielt am -->
	<value condition="Container.Content(tvshows) + String.IsEqual(Container.SortMethod,$LOCALIZE[568]) + String.IsEmpty(ListItem.lastPlayed)">neue Serie</value><!-- Zuletzt Abgespielt am -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20368])">$INFO[ListItem.Premiered]</value><!-- Produktion-Code -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[567])">$INFO[ListItem.label2,(,)]</value><!-- Abspielzaehler -->
	
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[365]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Name -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Episode -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[563]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Bewertung -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + !String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating]$INFO[ListItem.UserRating, (,)]</value><!-- Benutzer-Rating -->
	
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[365]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Name -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[20359]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,, (0)]</value><!-- Episode -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[563]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,,(0)]</value><!-- Bewertung -->
	<value condition="Container.Content(episodes) + String.IsEqual(Container.SortMethod,$LOCALIZE[38018]) + String.IsEmpty(ListItem.UserRating)">$VAR[FlagLabel-Rating,,(0)]</value><!-- Benutzer-Rating -->
	<value>$INFO[ListItem.label2]</value>
</variable>

<variable name="global_label">
	<value condition="ListItem.IsParentFolder">..</value>
	<value condition="Container.Content(episodes) + String.Contains(Container.FolderPath,.xsp) + !String.IsEmpty(ListItem.Episode)">$VAR[EpisodePrefix-short,, ]$INFO[ListItem.Title,, - ]$INFO[ListItem.TvShowTitle]</value>
	<value condition="Container.Content(episodes) + !String.Contains(Container.FolderPath,.xsp) + !String.IsEmpty(ListItem.Episode)">$VAR[EpisodePrefix-short,, ]$INFO[ListItem.Title]</value>
	<value condition="Container.Content(songs)">$INFO[ListItem.Title]</value>
	<value>$INFO[ListItem.label]</value>
</variable>

<variable name="global_sublabel">
	<value condition="ListItem.IsParentFolder"></value>
	<value condition="Container.Content(songs) + String.StartsWith(Container.Folderpath,musicdb://songs) + !String.IsEmpty(ListItem.Album)">$INFO[ListItem.Artist,, - ]$INFO[ListItem.Album]</value><!-- unten Artist alle songs db -->
	<value condition="Container.Content(songs) + String.StartsWith(Container.Folderpath,musicdb://songs) + String.IsEmpty(ListItem.Album)">$INFO[ListItem.Artist]</value><!-- unten Artist alle songs db -->
	<value condition="Container.Content(songs) + String.IsEqual(Container.SortMethod,$LOCALIZE[552])">$INFO[ListItem.Album,, - ]$INFO[ListItem.Duration,, $LOCALIZE[12391]]</value><!-- rechts dateAdded NODE_TYPE_ALBUM_RECENTLY_ADDED_SONGS SortByNone	552	dateAdded -->
	<value condition="Container.Content(songs) + String.IsEqual(Container.SortMethod,$LOCALIZE[576])">$INFO[ListItem.Album,, - ]$INFO[ListItem.Duration,, $LOCALIZE[12391]]</value><!-- rechts dateAdded NODE_TYPE_SONG_TOP100 SortByNone 576 Play count -->
	<value condition="Container.Content(songs) + !String.IsEqual(Container.SortMethod,$LOCALIZE[552]) + !String.IsEqual(Container.SortMethod,$LOCALIZE[576]) + !String.IsEqual(Container.SortMethod,$LOCALIZE[551])">$INFO[ListItem.Genre]</value><!-- unten genre bei allen -->
	<value condition="Container.Content(artists)">$INFO[ListItem.Property(Artist_Genre)]</value><!-- unten Artist alle songs db -->

	<value condition="Container.Content(albums) + ![String.IsEqual(Container.SortMethod,$LOCALIZE[556]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[578])]">$INFO[ListItem.Artist]</value><!-- unten Artist bei SortByYear 562 / SortByDateAdded 570 / SortByPlaycount 567 / SortByRating 563 / SortByUserRating 38018 / SortByNone 552 dateAdded / SortByLastPlayed 568 last played -->
	<value condition="Container.Content(albums) + [String.IsEqual(Container.SortMethod,$LOCALIZE[556]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[578])]">$INFO[ListItem.Genre]</value><!-- unten genre bei SortByTitle 556 / SortByAlbum 558 / SortByArtist 557 -->
	<value condition="Window.IsVisible(programs)">$INFO[ListItem.AddonType]</value>
	<value></value>
</variable>

<!-- musik sort https://github.com/notspiff/kodi-cmake/blob/master/xbmc/music/GUIViewStateMusic.cpp 
Album title
SortByTitle	556	Duration

NODE_TYPE_TOP100
SortByGenre	none	Empty

NODE_TYPE_GENRE
SortByGenre	515	Empty

NODE_TYPE_YEAR:
SortByLabel	562	Year

NODE_TYPE_ARTIST:
SortByArtist	557	Empty

NODE_TYPE_ALBUM_COMPILATIONS
NODE_TYPE_ALBUM
NODE_TYPE_YEAR_ALBUM
SortByAlbum	558	Artist 
SortByArtist	557	Artist
SortByArtistThenYear	578	Artist/Year 
SortByYear	562	Year
SortByDateAdded	570	dateAdded
SortByPlaycount	567	Play count
SortByRating	563	Rating
SortByUserRating	38018	UserRating

NODE_TYPE_ALBUM_RECENTLY_ADDED
SortByNone	552	dateAdded

NODE_TYPE_ALBUM_RECENTLY_ADDED_SONGS:
SortByNone	552	dateAdded

NODE_TYPE_ALBUM_RECENTLY_PLAYED
SortByLastPlayed	568	last played

NODE_TYPE_ALBUM_RECENTLY_PLAYED_SONGS
SortByLastPlayed	568	last played

NODE_TYPE_ALBUM_TOP100:
SortByNone	551	Play count

SINGLES
SortByArtist	557	Duration
SortByArtistThenYear	578	Year
SortByTitle	556	Duration
SortByLabel	551	???
SortByTime	180	Duration
SortByRating	563	Rating
SortByUserRating	38018	UserRating
SortByDateAdded	570	DateAdded 

SONG
SortByTrackNumber	554	Duration
SortByTitle	556	Duration
SortByAlbum	558	Duration
SortByArtist	557	Duration
SortByArtistThenYear	578	Artist/Year
SortByLabel	551	???
SortByTime	180	Duration
SortByRating	563	Rating
SortByUserRating	38018	UserRating
SortByYear	562	Year
SortByDateAdded	570	DateAdded 
SortByPlaycount	567	PlayCount

NODE_TYPE_SONG_TOP100:
SortByNone	576	Play count
-->

<variable name="global_musicplaycount">
	<value condition="Integer.IsGreater(ListItem.Playcount,4)">ññññġ</value>
	<value condition="String.StartsWith(ListItem.Playcount,4)">ññññ</value>
	<value condition="String.StartsWith(ListItem.Playcount,3)">ñññ</value>
	<value condition="String.StartsWith(ListItem.Playcount,2)">ññ</value>
	<value condition="String.StartsWith(ListItem.Playcount,1)">ñ</value>
	<value></value>
</variable>

<!-- dialog_select button id5 icons fuer unterschiedliche funktionen -->
<variable name="dialog_select_button5">
	<value condition="String.IsEqual(Control.GetLabel(5),$LOCALIZE[13516])">x</value>
	<value>Ĥ</value>
</variable>

<!-- Hidden controls -->
<include name="HiddenControl">
	<left>-10</left>
	<top>-10</top>
	<width>1</width>
	<height>1</height>
	<font>-</font>
	<texture>-</texture>
	<texturefocus>-</texturefocus>
	<texturenofocus>-</texturenofocus>
	<alttexturenofocus>-</alttexturenofocus>
	<alttexturefocus>-</alttexturefocus>
	<textureradiofocus>-</textureradiofocus>
	<textureradionofocus>-</textureradionofocus>
</include>

<!-- Global Compaircontainer -->
<include name="Compaircontainer">
	<top>1</top>
	<left>1</left>
	<height>1</height>
	<width>1</width>
	<viewtype>list</viewtype>
	<scrolltime tween="sine" easing="out">320</scrolltime>
	<itemlayout width="1" height="1">
	</itemlayout>
	<focusedlayout width="1" height="1">
	</focusedlayout>
</include>

<!-- nicht unterstuetzte Funktionen -->
<include name="UnfeaturedWindow">
	<include condition="Skin.HasSetting(EnableVintageOverlay)">global_vintagebackground</include>
	<include condition="!Skin.HasSetting(EnableVintageOverlay)">global_background</include>
	<control type="group">
		<left>760</left>
		<top>340</top>
		<control type="label">
			<width>400</width>
			<height>200</height>
			<align>center</align>
			<font>weatherloading</font>
			<textcolor>red</textcolor>
			<label>Ë</label>
		</control>
		<control type="label">
			<top>380</top>
			<width>400</width>
			<height>80</height>
			<align>center</align>
			<label>Funktion ist nicht enthalten</label>
			<wrapmultiline>true</wrapmultiline>
		</control>
	</control>
</include>

<!-- ######################### -->
<!-- Label Variables
############################## -->
<!-- Filter Defaultbutton IT 19, nach Focus andere Farbe fuer Sichtbarkeit im Edit Feld -->


<variable name="PremieredShortLabel">
	<value condition="String.EndsWith(ListItem.Premiered,1927)">1927</value>
	<value condition="String.EndsWith(ListItem.Premiered,1928)">1928</value>
	<value condition="String.EndsWith(ListItem.Premiered,1929)">1929</value>
	<value condition="String.EndsWith(ListItem.Premiered,1930)">1930</value>
	<value condition="String.EndsWith(ListItem.Premiered,1931)">1931</value>
	<value condition="String.EndsWith(ListItem.Premiered,1932)">1932</value>
	<value condition="String.EndsWith(ListItem.Premiered,1933)">1933</value>
	<value condition="String.EndsWith(ListItem.Premiered,1934)">1934</value>
	<value condition="String.EndsWith(ListItem.Premiered,1935)">1935</value>
	<value condition="String.EndsWith(ListItem.Premiered,1936)">1936</value>
	<value condition="String.EndsWith(ListItem.Premiered,1937)">1937</value>
	<value condition="String.EndsWith(ListItem.Premiered,1938)">1938</value>
	<value condition="String.EndsWith(ListItem.Premiered,1939)">1939</value>
	<value condition="String.EndsWith(ListItem.Premiered,1940)">1940</value>
	<value condition="String.EndsWith(ListItem.Premiered,1941)">1941</value>
	<value condition="String.EndsWith(ListItem.Premiered,1942)">1942</value>
	<value condition="String.EndsWith(ListItem.Premiered,1943)">1943</value>
	<value condition="String.EndsWith(ListItem.Premiered,1944)">1944</value>
	<value condition="String.EndsWith(ListItem.Premiered,1945)">1945</value>
	<value condition="String.EndsWith(ListItem.Premiered,1946)">1946</value>
	<value condition="String.EndsWith(ListItem.Premiered,1947)">1947</value>
	<value condition="String.EndsWith(ListItem.Premiered,1948)">1948</value>
	<value condition="String.EndsWith(ListItem.Premiered,1949)">1949</value>
	<value condition="String.EndsWith(ListItem.Premiered,1950)">1950</value>
	<value condition="String.EndsWith(ListItem.Premiered,1951)">1951</value>
	<value condition="String.EndsWith(ListItem.Premiered,1952)">1952</value>
	<value condition="String.EndsWith(ListItem.Premiered,1953)">1953</value>
	<value condition="String.EndsWith(ListItem.Premiered,1954)">1954</value>
	<value condition="String.EndsWith(ListItem.Premiered,1955)">1955</value>
	<value condition="String.EndsWith(ListItem.Premiered,1956)">1956</value>
	<value condition="String.EndsWith(ListItem.Premiered,1957)">1957</value>
	<value condition="String.EndsWith(ListItem.Premiered,1958)">1958</value>
	<value condition="String.EndsWith(ListItem.Premiered,1959)">1959</value>
	<value condition="String.EndsWith(ListItem.Premiered,1960)">1960</value>
	<value condition="String.EndsWith(ListItem.Premiered,1961)">1961</value>
	<value condition="String.EndsWith(ListItem.Premiered,1962)">1962</value>
	<value condition="String.EndsWith(ListItem.Premiered,1963)">1963</value>
	<value condition="String.EndsWith(ListItem.Premiered,1964)">1964</value>
	<value condition="String.EndsWith(ListItem.Premiered,1965)">1965</value>
	<value condition="String.EndsWith(ListItem.Premiered,1966)">1966</value>
	<value condition="String.EndsWith(ListItem.Premiered,1967)">1967</value>
	<value condition="String.EndsWith(ListItem.Premiered,1968)">1968</value>
	<value condition="String.EndsWith(ListItem.Premiered,1969)">1969</value>
	<value condition="String.EndsWith(ListItem.Premiered,1970)">1970</value>
	<value condition="String.EndsWith(ListItem.Premiered,1971)">1971</value>
	<value condition="String.EndsWith(ListItem.Premiered,1972)">1972</value>
	<value condition="String.EndsWith(ListItem.Premiered,1973)">1973</value>
	<value condition="String.EndsWith(ListItem.Premiered,1974)">1974</value>
	<value condition="String.EndsWith(ListItem.Premiered,1975)">1975</value>
	<value condition="String.EndsWith(ListItem.Premiered,1976)">1976</value>
	<value condition="String.EndsWith(ListItem.Premiered,1977)">1977</value>
	<value condition="String.EndsWith(ListItem.Premiered,1978)">1978</value>
	<value condition="String.EndsWith(ListItem.Premiered,1979)">1979</value>
	<value condition="String.EndsWith(ListItem.Premiered,1980)">1980</value>
	<value condition="String.EndsWith(ListItem.Premiered,1981)">1981</value>
	<value condition="String.EndsWith(ListItem.Premiered,1982)">1982</value>
	<value condition="String.EndsWith(ListItem.Premiered,1983)">1983</value>
	<value condition="String.EndsWith(ListItem.Premiered,1984)">1984</value>
	<value condition="String.EndsWith(ListItem.Premiered,1985)">1985</value>
	<value condition="String.EndsWith(ListItem.Premiered,1986)">1986</value>
	<value condition="String.EndsWith(ListItem.Premiered,1987)">1987</value>
	<value condition="String.EndsWith(ListItem.Premiered,1988)">1988</value>
	<value condition="String.EndsWith(ListItem.Premiered,1989)">1989</value>
	<value condition="String.EndsWith(ListItem.Premiered,1990)">1990</value>
	<value condition="String.EndsWith(ListItem.Premiered,1991)">1991</value>
	<value condition="String.EndsWith(ListItem.Premiered,1992)">1992</value>
	<value condition="String.EndsWith(ListItem.Premiered,1993)">1993</value>
	<value condition="String.EndsWith(ListItem.Premiered,1994)">1994</value>
	<value condition="String.EndsWith(ListItem.Premiered,1995)">1995</value>
	<value condition="String.EndsWith(ListItem.Premiered,1996)">1996</value>
	<value condition="String.EndsWith(ListItem.Premiered,1997)">1997</value>
	<value condition="String.EndsWith(ListItem.Premiered,1998)">1998</value>
	<value condition="String.EndsWith(ListItem.Premiered,1999)">1999</value>
	<value condition="String.EndsWith(ListItem.Premiered,2000)">2000</value>
	<value condition="String.EndsWith(ListItem.Premiered,2001)">2001</value>
	<value condition="String.EndsWith(ListItem.Premiered,2002)">2002</value>
	<value condition="String.EndsWith(ListItem.Premiered,2003)">2003</value>
	<value condition="String.EndsWith(ListItem.Premiered,2004)">2004</value>
	<value condition="String.EndsWith(ListItem.Premiered,2005)">2005</value>
	<value condition="String.EndsWith(ListItem.Premiered,2006)">2006</value>
	<value condition="String.EndsWith(ListItem.Premiered,2007)">2007</value>
	<value condition="String.EndsWith(ListItem.Premiered,2008)">2008</value>
	<value condition="String.EndsWith(ListItem.Premiered,2009)">2009</value>
	<value condition="String.EndsWith(ListItem.Premiered,2010)">2010</value>
	<value condition="String.EndsWith(ListItem.Premiered,2011)">2011</value>
	<value condition="String.EndsWith(ListItem.Premiered,2012)">2012</value>
	<value condition="String.EndsWith(ListItem.Premiered,2013)">2013</value>
	<value condition="String.EndsWith(ListItem.Premiered,2014)">2014</value>
	<value condition="String.EndsWith(ListItem.Premiered,2015)">2015</value>
	<value condition="String.EndsWith(ListItem.Premiered,2016)">2016</value>
	<value condition="String.EndsWith(ListItem.Premiered,2017)">2017</value>
	<value condition="String.EndsWith(ListItem.Premiered,2018)">2018</value>
	<value condition="String.EndsWith(ListItem.Premiered,2019)">2019</value>
	<value condition="String.EndsWith(ListItem.Premiered,2020)">2020</value>
	<value>$INFO[ListItem.Premiered]</value>
</variable>

<variable name="VideoinfoTitle">
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) | String.Contains(ListItem.DBTYPE,Season)">$INFO[ListItem.TVShowTitle][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.Year, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,episode)">$INFO[ListItem.Title][COLOR=$VAR[SecondaryCol]]$VAR[PremieredShortLabel, (,)][/COLOR]</value>
	<value>$INFO[ListItem.Label][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.Year, (,)][/COLOR]</value>
</variable>

<!-- SMS -->
<include name="SMSButton">
	<width>6</width>
	<height>98</height>
	<font>-</font>
	<textcolor>-</textcolor>
	<textoffsetx>-</textoffsetx>
	<scroll>false</scroll>
</include>

<include name="SMSScrollbar">
	<control type="group">
		<left>1800</left>
		<top>120</top>
		<width>6</width>
		<height>880</height>
		<control type="grouplist" id="62">
			<width>6</width>
			<height>880</height>
			<itemgap>0</itemgap>
			<onright condition="Control.IsVisible(50)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(51)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(52)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(53)">SetFocus(9900)</onright>
			<onright condition="Control.IsVisible(56)">SetFocus(156)</onright>
			<onright condition="Control.IsVisible(71)">SetFocus(71)</onright>
			<onup>62</onup>
			<ondown>62</ondown>
			<onback>50</onback>
			<control type="button" id="621">
				<description>Jumpbutton 2</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS2)</onclick>
			</control>
			<control type="button" id="622">
				<description>Jumpbutton 3</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS3)</onclick>
			</control>
			<control type="button" id="623">
				<description>Jumpbutton 4</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS4)</onclick>
			</control>
			<control type="button" id="624">
				<description>Jumpbutton 5</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS5)</onclick>
			</control>
			<control type="button" id="625">
				<description>Jumpbutton 6</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS6)</onclick>
			</control>
			<control type="button" id="626">
				<description>Jumpbutton 7</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS7)</onclick>
			</control>
			<control type="button" id="627">
				<description>Jumpbutton 8</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS8)</onclick>
			</control>
			<control type="button" id="628">
				<description>Jumpbutton 9</description>
				<include>SMSButton</include>
				<onclick condition="Control.IsVisible(50)">SetFocus(50)</onclick>
				<onclick condition="Control.IsVisible(51)">SetFocus(51)</onclick>
				<onclick condition="Control.IsVisible(52)">SetFocus(52)</onclick>
				<onclick condition="Control.IsVisible(53)">SetFocus(53)</onclick>
				<onclick condition="Control.IsVisible(56)">SetFocus(56)</onclick>
				<onclick condition="Control.IsVisible(71)">SetFocus(71)</onclick>
				<onleft condition="Control.IsVisible(50)">SetFocus(50)</onleft>
				<onleft condition="Control.IsVisible(51)">SetFocus(51)</onleft>
				<onleft condition="Control.IsVisible(52)">SetFocus(52)</onleft>
				<onleft condition="Control.IsVisible(53)">SetFocus(53)</onleft>
				<onleft condition="Control.IsVisible(56)">SetFocus(56)</onleft>
				<onleft condition="Control.IsVisible(71)">SetFocus(71)</onleft>
				<onclick>Action(JumpSMS9)</onclick>
			</control>
		</control>
	</control>
</include>

<!-- SMS und Scoll Letter -->
<variable name="ScrollSMSLetterLabel">
	<value condition="Control.HasFocus(621)">A[CR]B[CR]C</value>
	<value condition="Control.HasFocus(622)">D[CR]E[CR]F</value>
	<value condition="Control.HasFocus(623)">G[CR]H[CR]I</value>
	<value condition="Control.HasFocus(624)">J[CR]K[CR]L</value>
	<value condition="Control.HasFocus(625)">M[CR]N[CR]O</value>
	<value condition="Control.HasFocus(626)">P[CR]Q[CR]R[CR]S</value>
	<value condition="Control.HasFocus(627)">T[CR]U[CR]V</value>
	<value condition="Control.HasFocus(628)">W[CR]X[CR]Y[CR]Z</value>
</variable>

<include name="ScrollSMSLetter">
	<control type="image">
		<width>68</width>
		<height>169</height>
		<texture colordiffuse="$VAR[PrimaryCol]">cycle/smsbar.png</texture>
		<visible>!Control.HasFocus(60)</visible>
	</control>
	<control type="label">
		<left>12</left>
		<top>-9</top>
		<width>56</width>
		<height>169</height>
		<align>center</align>
		<wrapmultiline>true</wrapmultiline>
		<font>SMSLetter</font>
		<textcolor>TextColorFO</textcolor>
		<label>$VAR[ScrollSMSLetterLabel]</label>
		<visible>!Container.Scrolling</visible>
	</control>
	<control type="label">
		<left>12</left>
		<top>-5</top>
		<width>56</width>
		<height>169</height>
		<align>center</align>
		<font>SMSLetter</font>
		<textcolor>TextColorFO</textcolor>
		<label>$INFO[ListItem.SortLetter]</label>
		<visible>Container.Scrolling + !Control.HasFocus(60)</visible>
	</control>
	<control type="label"><!-- pfeile -->
		<description>Pfeil nach unten</description>
		<left>18</left>
		<top>169</top>
		<width>40</width>
		<height>40</height>
		<font>IconNormal</font>
		<textcolor>$VAR[PrimaryCol]</textcolor>
		<label>.</label>
		<visible>ControlGroup(62).HasFocus + !Control.HasFocus(628)</visible>
	</control>
	<control type="label">
		<description>Pfeil nach oben beim letzten</description>
		<left>18</left>
		<top>169</top>
		<width>40</width>
		<height>40</height>
		<font>IconNormal</font>
		<textcolor>$VAR[PrimaryCol]</textcolor>
		<label>*</label>
		<visible>ControlGroup(62).HasFocus + Control.HasFocus(628)</visible>
	</control>
</include>

<!-- ######################### -->
<!-- Prefix/Suffix/Textvariablen/Zaehlvariablen 
############################## -->
<!-- enumerations -->
<variable name="CustomEnumeration">
	<value condition="String.IsEqual(skin.string(CustomEnumeration),1)">A</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),2)">B</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),3)">C</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),4)">D</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),5)">E</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),6)">F</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),7)">G</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),8)">H</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),9)">I</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),10)">J</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),11)">K</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),12)">L</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),13)">M</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),14)">N</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),15)">O</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),16)">P</value>
	<value condition="String.IsEqual(skin.string(CustomEnumeration),17)">Q</value>
	<value>A</value>
</variable>

<!-- Prefix Variables -->
<variable name="EpisodeSuffix">
	<value condition="String.StartsWith(ListItem.Episode,S1)">01</value>
	<value condition="String.StartsWith(ListItem.Episode,S2)">02</value>
	<value condition="String.StartsWith(ListItem.Episode,S3)">03</value>
	<value condition="String.StartsWith(ListItem.Episode,S4)">04</value>
	<value condition="String.StartsWith(ListItem.Episode,S5)">05</value>
	<value condition="String.StartsWith(ListItem.Episode,S6)">06</value>
	<value condition="String.StartsWith(ListItem.Episode,S7)">07</value>
	<value condition="String.StartsWith(ListItem.Episode,S8)">08</value>
	<value condition="String.StartsWith(ListItem.Episode,S9)">09</value>
	<value condition="String.StartsWith(ListItem.Episode,S10)">10</value>
	<value condition="String.StartsWith(ListItem.Episode,S11)">11</value>
	<value condition="String.StartsWith(ListItem.Episode,S12)">12</value>
	<value condition="String.StartsWith(ListItem.Episode,S13)">13</value>
	<value condition="String.StartsWith(ListItem.Episode,S14)">14</value>
	<value condition="String.StartsWith(ListItem.Episode,S15)">15</value>
	<value condition="String.StartsWith(ListItem.Episode,S16)">16</value>
	<value condition="String.StartsWith(ListItem.Episode,S17)">17</value>
	<value condition="String.StartsWith(ListItem.Episode,S18)">18</value>
	<value condition="String.StartsWith(ListItem.Episode,S19)">19</value>
	<value condition="String.StartsWith(ListItem.Episode,S20)">20</value>
	<value>$INFO[ListItem.Episode]</value>
</variable>
	
<variable name="EpisodePrefix">
	<value condition="String.StartsWith(ListItem.Episode,S)">$VAR[EpisodeSuffix]</value>
	<value condition="!Integer.IsGreater(ListItem.Episode,9)">0$INFO[ListItem.Episode]</value>
	<value>$INFO[ListItem.Episode]</value>
</variable>
<variable name="EpisodePrefix-short">
	<value condition="String.StartsWith(ListItem.Episode,S)">$VAR[EpisodeSuffix]</value>
	<value>$VAR[EpisodePrefix]</value>
</variable>
<variable name="EpisodePrefix-long">
	<value condition="String.StartsWith(ListItem.Episode,S)">Episode $VAR[EpisodeSuffix]</value>
	<value>Episode $VAR[EpisodePrefix]</value>
</variable>
	
<variable name="SeasonPrefix">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!Integer.IsGreater(ListItem.Season,9)">0$INFO[Listitem.Season]</value>
	<value>$INFO[Listitem.Season]</value>
</variable>
<variable name="SeasonPrefix-short">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!String.IsEmpty(ListItem.Season)">$VAR[SeasonPrefix]x</value>
</variable>
<variable name="SeasonPrefix-long">
	<value condition="String.StartsWith(ListItem.Label,alle Staffeln)">Alle</value>
	<value condition="!String.IsEmpty(ListItem.Season)">Staffel $VAR[SeasonPrefix]</value>
</variable>

<variable name="TrackPrefix">
	<value condition="!Integer.IsGreater(ListItem.Tracknumber,9)">0</value>
	<value></value>
</variable>

<variable name="VT_Date">
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PercentPlayed,10)">$INFO[ListItem.PercentPlayed]% $INFO[ListItem.LastPlayed,am ,]</value>
	<value condition="[Container.Content(movies) | Container.Content(episodes)] + Integer.IsGreater(ListItem.PlayCount,0)">$INFO[ListItem.LastPlayed]</value>
	<value condition="Container.Content(movies) + !String.IsEmpty(ListItem.Year)">$INFO[ListItem.Year]</value>
	<value condition="!String.IsEmpty(ListItem.Premiered)">$INFO[ListItem.Premiered]</value>
</variable>

<variable name="VT_DatePrefix">
	<value condition="[Container.Content(episodes) | Container.Content(movies)] + Integer.IsGreater(ListItem.PercentPlayed,10)">Zuletzt gesehen: </value>
	<value condition="[Container.Content(episodes) | Container.Content(movies)] + Integer.IsGreater(ListItem.PlayCount,0) + !ListItem.IsResumable">Zuletzt gesehen: </value>
	<value condition="Container.Content(movies) + !String.IsEmpty(ListItem.Year)">Jahr: </value>
	<value condition="!String.IsEmpty(ListItem.Premiered)">Premiere: </value>
</variable>

<variable name="VT_DateCategroyinfo">
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PercentPlayed,10)">$INFO[Container(400).ListItem.PercentPlayed]% $INFO[Container(400).ListItem.LastPlayed,am ,]</value>
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PlayCount,0)">$INFO[Container(400).ListItem.LastPlayed]</value>
	<value condition="!String.IsEmpty(Container(400).ListItem.Premiered)">$INFO[Container(400).ListItem.Premiered]</value>
</variable>

<variable name="VT_DatePrefixCategroyinfo">
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PercentPlayed,10)">Zuletzt gesehen: </value>
	<value condition="String.Contains(Container(400).ListItem.DBTYPE,movie) + Integer.IsGreater(Container(400).ListItem.PlayCount,0) + !Container(400).ListItem.IsResumable">Zuletzt gesehen: </value>
	<value condition="!String.IsEmpty(Container(400).ListItem.Premiered)">Premiere: </value>
</variable>

<!-- seasonview -->
<variable name="SeasonPrefixSeasonContent0">
	<value condition="String.Contains(Container(54).ListItem.Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem.Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent1">
	<value condition="String.Contains(Container(54).ListItem(1).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(1).Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent2">
	<value condition="String.Contains(Container(54).ListItem(2).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(2).Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent3">
	<value condition="String.Contains(Container(54).ListItem(3).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(3).Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent-1">
	<value condition="String.Contains(Container(54).ListItem(-1).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(-1).Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent-2">
	<value condition="String.Contains(Container(54).ListItem(-2).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(-2).Season,9)">0</value>
	<value></value>
</variable>

<variable name="SeasonPrefixSeasonContent-3">
	<value condition="String.Contains(Container(54).ListItem(-3).Label,alle Staffeln)">!</value>
	<value condition="!Integer.IsGreater(Container(54).ListItem(-3).Season,9)">0</value>
	<value></value>
</variable>

<!-- Staffelanzahl -1 (alle Staffeln) -->
<variable name="Season54NumItems">
	<value condition="String.IsEqual(Container.NumItems,31)">30</value>
	<value condition="String.IsEqual(Container.NumItems,30)">29</value>
	<value condition="String.IsEqual(Container.NumItems,29)">28</value>
	<value condition="String.IsEqual(Container.NumItems,28)">27</value>
	<value condition="String.IsEqual(Container.NumItems,27)">26</value>
	<value condition="String.IsEqual(Container.NumItems,26)">25</value>
	<value condition="String.IsEqual(Container.NumItems,25)">24</value>
	<value condition="String.IsEqual(Container.NumItems,24)">23</value>
	<value condition="String.IsEqual(Container.NumItems,23)">22</value>
	<value condition="String.IsEqual(Container.NumItems,22)">21</value>
	<value condition="String.IsEqual(Container.NumItems,21)">20</value>
	<value condition="String.IsEqual(Container.NumItems,20)">19</value>
	<value condition="String.IsEqual(Container.NumItems,19)">18</value>
	<value condition="String.IsEqual(Container.NumItems,18)">17</value>
	<value condition="String.IsEqual(Container.NumItems,17)">16</value>
	<value condition="String.IsEqual(Container.NumItems,16)">15</value>
	<value condition="String.IsEqual(Container.NumItems,15)">14</value>
	<value condition="String.IsEqual(Container.NumItems,14)">13</value>
	<value condition="String.IsEqual(Container.NumItems,13)">12</value>
	<value condition="String.IsEqual(Container.NumItems,12)">11</value>
	<value condition="String.IsEqual(Container.NumItems,11)">10</value>
	<value condition="String.IsEqual(Container.NumItems,10)">9</value>
	<value condition="String.IsEqual(Container.NumItems,9)">8</value>
	<value condition="String.IsEqual(Container.NumItems,8)">7</value>
	<value condition="String.IsEqual(Container.NumItems,7)">6</value>
	<value condition="String.IsEqual(Container.NumItems,6)">5</value>
	<value condition="String.IsEqual(Container.NumItems,5)">4</value>
	<value condition="String.IsEqual(Container.NumItems,4)">3</value>
	<value condition="String.IsEqual(Container.NumItems,3)">2</value>
	<value condition="String.IsEqual(Container.NumItems,2)">1</value>
	<value>$INFO[Container.NumItems]</value>
</variable>

<!-- Kategorieview Titel Prefix -->
<variable name="KategorieLabelInfoPrefix">
	<value condition="Container.Content(actors) + !String.IsEmpty(Container(400).ListItem.TVShowTitle)">Serien mit Darsteller/in </value>
	<value condition="Container.Content(actors) + String.IsEmpty(Container(400).ListItem.TVShowTitle)">Filme mit Darsteller/in </value>
	<value condition="Container.Content(genres) + !String.IsEmpty(Container(400).ListItem.TVShowTitle)">Serien aus dem Genre </value>
	<value condition="Container.Content(genres) + String.IsEmpty(Container(400).ListItem.TVShowTitle)">Filme aus dem Genre </value>
	<value condition="Container.Content(years) + !String.IsEmpty(Container(400).ListItem.TVShowTitle)">Serien aus dem Jahr </value>
	<value condition="Container.Content(years) + String.IsEmpty(Container(400).ListItem.TVShowTitle)">Filme aus dem Jahr </value>
	<value condition="Container.Content(studios) + !String.IsEmpty(Container(400).ListItem.TVShowTitle)">Serien des Studios </value>
	<value condition="Container.Content(studios) + String.IsEmpty(Container(400).ListItem.TVShowTitle)">Filme des Studios </value>
	<value condition="Container.Content(countries) + !String.IsEmpty(Container(400).ListItem.TVShowTitle)">Filme aus </value>
</variable>

<!-- ######################### -->
<!-- Nowplaying und OSD
############################## -->
<!-- OSD + Player -->
<variable name="VideoPlayerEpisodeSuffix">
	<value condition="String.StartsWith(VideoPlayer.Episode,S1)">01</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S2)">02</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S3)">03</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S4)">04</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S5)">05</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S6)">06</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S7)">07</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S8)">08</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S9)">09</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S10)">10</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S11)">11</value>
	<value condition="String.StartsWith(VideoPlayer.Episode,S12)">12</value>
	<value>$INFO[VideoPlayer.Episode]</value>
</variable>
<!-- alle gleich, wegen der besseren uebersicht - und trennung falls sich long oder short aendert, auch wenn manche eigentlich nicht notwendig sind als zweite var.. -->
<variable name="VideoPlayerEpisodePrefix">
	<value condition="String.StartsWith(VideoPlayer.Episode,S)">$VAR[VideoPlayerEpisodeSuffix]</value>
	<value condition="!Integer.IsGreater(VideoPlayer.Episode,9)">0$INFO[VideoPlayer.Episode]</value>
	<value>$INFO[VideoPlayer.Episode]</value>
</variable>
<variable name="VideoPlayerEpisodePrefix-short">
	<value condition="!String.IsEmpty(VideoPlayer.Episode)">$VAR[VideoPlayerEpisodePrefix]</value>
</variable>
<variable name="VideoPlayerEpisodePrefix-long">
	<value condition="!String.IsEmpty(VideoPlayer.Episode)">Episode $VAR[VideoPlayerEpisodePrefix]</value>
</variable>
<variable name="VideoPlayerSeasonPrefix">
	<value condition="!Integer.IsGreater(VideoPlayer.Season,9)">0$INFO[VideoPlayer.Season]</value>
	<value>$INFO[VideoPlayer.Season]</value>
</variable>
<variable name="VideoPlayerSeasonPrefix-short">
	<value condition="!String.IsEmpty(VideoPlayer.Season)">$VAR[VideoPlayerSeasonPrefix]x</value>
</variable>
<variable name="VideoPlayerSeasonPrefix-long">
	<value condition="!String.IsEmpty(VideoPlayer.Season)">Staffel $VAR[VideoPlayerSeasonPrefix]</value>
</variable>

<variable name="Player_Status">
	<value condition="Player.Paused">$LOCALIZE[112]</value>
	<value condition="!String.IsEmpty(Player.SeekStepSize) + ![player.forwarding | player.rewinding]">Suchlauf $INFO[Player.SeekStepSize]</value>
	<value condition="Player.DisplayAfterSeek + ![player.forwarding | player.rewinding]">Suchlauf $INFO[Player.SeekOffset]</value>
	<value condition="!Player.DisplayAfterSeek + Player.Seeking">Suchlauf</value>
	<value condition="Player.Forwarding2x">FFx2</value>
	<value condition="Player.Forwarding4x">FFx4</value>
	<value condition="Player.Forwarding8x">FFx8</value>
	<value condition="Player.Forwarding16x">FFx16</value>
	<value condition="Player.Forwarding32x">FFx32</value>
	<value condition="Player.Rewinding2x">RWx2</value>
	<value condition="Player.Rewinding4x">RWx4</value>
	<value condition="Player.Rewinding8x">RWx8</value>
	<value condition="Player.Rewinding16x">RWx16</value>
	<value condition="Player.Rewinding32x">RWx32</value>
	<value condition="Player.Playing + !Player.Seeking + !Player.DisplayAfterSeek">Abspielen</value>
	<value condition="[Player.Paused + !Player.Caching] + !Player.Seeking + !Player.DisplayAfterSeek">Pause</value>
	<value condition="[Player.Paused + Player.Caching] + !Player.Seeking">$LOCALIZE[15107] $INFO[Player.CacheLevel]%</value>
</variable>

<variable name="Player_Statusicon">
	<value condition="Player.Paused">ß</value>
	<value condition="Player.forwarding">Þ</value>
	<value condition="Player.rewinding">Ý</value>
	<value>à</value>
</variable>

<include name="VideoPlayerOSD.left.top.info">
	<control type="grouplist">
		<width>1000</width>
		<height>100</height>
		<itemgap>10</itemgap>
		<orientation>horizontal</orientation>
		<control type="label">
			<include>OSDInfoIconDimension</include>
			<label>$VAR[Player_Statusicon]</label>
		</control>
		<!-- Nowplaying Info Zeile -->
		<control type="wraplist" id="5001">
			<left>5</left>
			<width>1000</width>
			<height>60</height>
			<autoscroll time="3000" delay="8000" repeat="5000">Player.Playing</autoscroll>
			<scrolltime tween="cubic" easing="inout">3400</scrolltime>
			<visible>Player.Playing</visible>
			<viewtype>list</viewtype>
			<visible>!VideoPlayer.Content(files)</visible>
			<itemlayout width="1000" height="60">
				<control type="label">
					<width>1000</width>
					<include>OSDLabelInfoDimension</include>
					<label>$INFO[ListItem.Label]</label>
					<animation type="Conditional" condition="true">
						<effect type="fade" start="100" end="0" delay="1600" time="400" />
					</animation>
				</control>
			</itemlayout>
			<focusedlayout width="1000" height="60">
				<control type="label">
					<width>1000</width>
					<include>OSDLabelInfoDimension</include>
					<label>$INFO[ListItem.Label]</label>
				</control>
			</focusedlayout>
			<content>
				<item id="1">
					<label>TV-Serie - $INFO[VideoPlayer.TVShowTitle]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$VAR[VideoPlayerSeasonPrefix-long]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$VAR[VideoPlayerEpisodePrefix-long]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$INFO[VideoPlayer.Title]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) | VideoPlayer.Content(episodes)</visible>
				</item>
				<item id="2">
					<label>$INFO[VideoPlayer.Genre]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) | VideoPlayer.Content(episodes)</visible>
					<visible>!String.IsEmpty(VideoPlayer.Genre)</visible>
				</item>
				<item id="1">
					<label>$INFO[VideoPlayer.Year, aus dem Jahr ,]</label>
					<onclick>noop</onclick>
					<visible>VideoPlayer.Content(movies) + !String.IsEmpty(VideoPlayer.Year)</visible>
				</item>
				<item id="5">
					<label>Zuletzt abgespielt am: $VAR[VideoplayerLastPlayed1]$VAR[VideoplayerLastPlayed2]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.LastPlayed)</visible>
				</item>
				<item id="5">
					<label>$INFO[VideoPlayer.PlayCount,, mal gesehen]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.PlayCount)</visible>
				</item>
				<item id="5">
					<label>Regie: $INFO[VideoPlayer.Director]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Director)</visible>
				</item>
				<item id="5">
					<label>Drehbuch: $INFO[VideoPlayer.Writer]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Writer)</visible>
				</item>
				<item id="6">
					<label>Land: $INFO[VideoPlayer.Country]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Country)</visible>
				</item>
				<item id="7">
					<label>Bewertung: $INFO[VideoPlayer.Rating]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.Rating) + String.IsEmpty(VideoPlayer.RatingAndVotes)</visible>
				</item>
				<item id="8">
					<label>Bewertung: $INFO[VideoPlayer.RatingAndVotes]</label>
					<onclick>noop</onclick>
					<visible>!String.IsEmpty(VideoPlayer.RatingAndVotes)</visible>
				</item>
			</content>
		</control>
		<!-- Playerstatus bei Vorlauf, Ruecklauf, Pause... -->
		<control type="label">
			<description>Status Label</description>
			<width>400</width>
			<include>OSDLabelInfoDimension</include>
			<label>$VAR[Player_Status]</label>
			<visible>!Player.Playing | VideoPlayer.Content(files)</visible>
		</control>
	</control>
</include>

<include name="VideoPlayerOSD.right.top.info">
	<control type="grouplist">
		<description>Status oben info right - Zeit und Endzeit</description>
		<width>1200</width>
		<height>100</height>
		<itemgap>10</itemgap>
		<visible>!Window.IsVisible(videobookmarks) + !Window.IsVisible(DialogSettings.xml) + !Window.IsVisible(notification)</visible>
		<animation type="Conditional" condition="Window.IsVisible(volumebar)">
			<effect type="slide" start="0,0" end="-100,0" time="300" />
		</animation>
		<orientation>horizontal</orientation>
		<control type="label">
			<description>Zeit icon</description>
			<include>OSDInfoIconDimension</include>
			<label>á</label>
		</control>
		<control type="label">
			<description>Zeit label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[System.Time(hh),,:]$INFO[System.Time(mm)]</label>
		</control>
		<control type="label">
			<description>Divider Abstand 40 pixel</description>
			<width>40</width>
			<include>OSDLabelInfoDimension</include>
			<label></label>
		</control>
		<control type="label">
			<description>Endzeit icon</description>
			<include>OSDInfoIconDimension</include>
			<label>ã</label>
		</control>
		<control type="label">
			<description>Endzeit label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[VideoPlayer.FinishTime(hh),,:]$INFO[VideoPlayer.FinishTime(mm)]</label>
		</control>
	</control>
</include>

<include name="VideoPlayerOSD.down.info">
	<control type="group">
		<description>Status unten info left - player Zeit</description>
		<left>155</left>
		<top>830</top>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="String.IsEqual(Window(Home).Property(PlotInfo),ein2) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<control type="grouplist">
			<width>600</width>
			<height>60</height>
			<itemgap>40</itemgap>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Aktuelle playerzeit</description>
				<width>auto</width>
				<include>OSDLabelInfoDimension</include>
				<label>$INFO[Player.Time(hh),,:]$INFO[Player.Time(mm),,:]$INFO[Player.Time(ss)]</label>
			</control>
			<control type="label">
				<description>Aktuelle restzeit</description>
				<width>auto</width>
				<include>OSDLabelInfoDimension</include>
				<label>$INFO[Player.TimeRemaining(hh),,:]$INFO[Player.TimeRemaining(mm),,:]$INFO[Player.TimeRemaining(ss)]</label>
			</control>
		</control>
	</control>
	<control type="grouplist">
		<description>Status unten info rechts - Playlist Position wenn mehr als 1</description>
		<left>1548</left>
		<top>830</top>
		<width>400</width>
		<height>60</height>
		<itemgap>10</itemgap>
		<visible>Integer.IsGreater(Playlist.Length,1)</visible>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="String.IsEqual(Window(Home).Property(PlotInfo),ein2) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<orientation>horizontal</orientation>
		<control type="label">
			<description>Playlist icon</description>
			<include>OSDInfoIconDimension</include>
			<label>&lt;</label>
		</control>
		<control type="label">
			<description>Playlist Label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[Playlist.Position]$INFO[Playlist.Length,/]</label>
		</control>
	</control>
	<control type="grouplist">
		<description>Status unten info rechts - Chapter nur wenn nicht kapitel = 1 und Playlist = 1</description>
		<left>1548</left>
		<top>830</top>
		<width>400</width>
		<height>60</height>
		<itemgap>10</itemgap>
		<animation effect="slide" end="0,-105" tween="sine" easing="inout" time="200" condition="String.IsEqual(Window(Home).Property(PlotInfo),ein2) | Window.IsActive(videoosd) | Window.IsActive(musicosd)">Conditional</animation>
		<orientation>horizontal</orientation>
		<visible>!Integer.IsGreater(Playlist.Length,1)</visible>
		<control type="label">
			<description>Kapitel icon</description>
			<include>OSDInfoIconDimension</include>
			<label>Ĕ</label>
		</control>
		<control type="label">
			<description>Kapitel label</description>
			<width>auto</width>
			<include>OSDLabelInfoDimension</include>
			<label>$INFO[Player.Chapter]$INFO[Player.ChapterCount,/]</label>
		</control>
	</control>
</include>

<!-- Volumenbar -->
<variable name="DialogVolumeVAR">
	<value condition="Player.Muted">Ÿ</value>
	<value condition="!Integer.IsGreater(Player.Volume,0)">Ÿ</value>
	<value condition="Integer.IsGreater(Player.Volume,0) + !Integer.IsGreater(Player.Volume,20)">Ź</value>
	<value condition="Integer.IsGreater(Player.Volume,20) + !Integer.IsGreater(Player.Volume,40)">ź</value>
	<value condition="Integer.IsGreater(Player.Volume,40) + !Integer.IsGreater(Player.Volume,60)">Ż</value>
	<value condition="Integer.IsGreater(Player.Volume,60) + !Integer.IsGreater(Player.Volume,80)">ż</value>
	<value condition="Integer.IsGreater(Player.Volume,80) + !Integer.IsGreater(Player.Volume,99)">Ž</value>
	<value condition="Integer.IsGreater(Player.Volume,99)">ž</value>
</variable>

<variable name="NPPlaylist">
	<value condition="!Window.IsVisible(1198)">playlistvideo://</value>
</variable>


<!-- OSD Anzeige last.Played ohne Uhrzeit Schnick Schnack -->
<variable name="VideoplayerLastPlayed1">
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.01.)">01.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.01.)">02.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.01.)">03.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.01.)">04.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.01.)">05.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.01.)">06.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.01.)">07.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.01.)">08.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.01.)">09.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.01.)">10.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.01.)">11.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.01.)">12.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.01.)">13.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.01.)">14.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.01.)">15.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.01.)">16.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.01.)">17.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.01.)">18.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.01.)">19.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.01.)">20.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.01.)">21.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.01.)">22.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.01.)">23.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.01.)">24.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.01.)">25.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.01.)">26.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.01.)">27.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.01.)">28.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.01.)">29.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.01.)">30.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.01.)">31.01.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.02.)">01.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.02.)">02.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.02.)">03.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.02.)">04.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.02.)">05.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.02.)">06.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.02.)">07.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.02.)">08.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.02.)">09.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.02.)">10.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.02.)">11.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.02.)">12.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.02.)">13.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.02.)">14.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.02.)">15.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.02.)">16.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.02.)">17.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.02.)">18.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.02.)">19.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.02.)">20.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.02.)">21.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.02.)">22.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.02.)">23.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.02.)">24.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.02.)">25.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.02.)">26.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.02.)">27.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.02.)">28.02.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.03.)">01.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.03.)">02.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.03.)">03.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.03.)">04.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.03.)">05.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.03.)">06.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.03.)">07.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.03.)">08.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.03.)">09.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.03.)">10.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.03.)">11.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.03.)">12.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.03.)">13.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.03.)">14.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.03.)">15.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.03.)">16.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.03.)">17.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.03.)">18.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.03.)">19.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.03.)">20.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.03.)">21.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.03.)">22.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.03.)">23.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.03.)">24.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.03.)">25.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.03.)">26.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.03.)">27.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.03.)">28.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.03.)">29.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.03.)">30.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.03.)">31.03.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.04.)">01.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.04.)">02.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.04.)">03.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.04.)">04.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.04.)">05.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.04.)">06.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.04.)">07.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.04.)">08.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.04.)">09.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.04.)">10.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.04.)">11.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.04.)">12.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.04.)">13.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.04.)">14.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.04.)">15.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.04.)">16.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.04.)">17.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.04.)">18.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.04.)">19.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.04.)">20.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.04.)">21.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.04.)">22.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.04.)">23.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.04.)">24.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.04.)">25.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.04.)">26.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.04.)">27.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.04.)">28.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.04.)">29.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.04.)">30.04.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.05.)">01.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.05.)">02.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.05.)">03.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.05.)">04.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.05.)">05.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.05.)">06.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.05.)">07.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.05.)">08.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.05.)">09.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.05.)">10.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.05.)">11.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.05.)">12.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.05.)">13.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.05.)">14.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.05.)">15.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.05.)">16.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.05.)">17.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.05.)">18.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.05.)">19.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.05.)">20.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.05.)">21.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.05.)">22.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.05.)">23.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.05.)">24.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.05.)">25.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.05.)">26.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.05.)">27.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.05.)">28.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.05.)">29.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.05.)">30.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.05.)">31.05.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.06.)">01.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.06.)">02.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.06.)">03.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.06.)">04.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.06.)">05.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.06.)">06.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.06.)">07.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.06.)">08.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.06.)">09.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.06.)">10.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.06.)">11.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.06.)">12.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.06.)">13.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.06.)">14.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.06.)">15.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.06.)">16.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.06.)">17.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.06.)">18.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.06.)">19.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.06.)">20.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.06.)">21.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.06.)">22.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.06.)">23.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.06.)">24.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.06.)">25.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.06.)">26.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.06.)">27.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.06.)">28.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.06.)">29.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.06.)">30.06.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.07.)">01.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.07.)">02.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.07.)">03.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.07.)">04.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.07.)">05.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.07.)">06.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.07.)">07.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.07.)">08.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.07.)">09.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.07.)">10.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.07.)">11.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.07.)">12.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.07.)">13.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.07.)">14.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.07.)">15.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.07.)">16.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.07.)">17.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.07.)">18.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.07.)">19.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.07.)">20.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.07.)">21.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.07.)">22.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.07.)">23.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.07.)">24.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.07.)">25.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.07.)">26.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.07.)">27.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.07.)">28.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.07.)">29.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.07.)">30.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.07.)">31.07.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.08.)">01.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.08.)">02.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.08.)">03.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.08.)">04.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.08.)">05.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.08.)">06.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.08.)">07.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.08.)">08.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.08.)">09.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.08.)">10.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.08.)">11.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.08.)">12.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.08.)">13.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.08.)">14.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.08.)">15.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.08.)">16.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.08.)">17.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.08.)">18.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.08.)">19.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.08.)">20.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.08.)">21.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.08.)">22.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.08.)">23.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.08.)">24.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.08.)">25.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.08.)">26.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.08.)">27.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.08.)">28.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.08.)">29.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.08.)">30.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.08.)">31.08.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.09.)">01.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.09.)">02.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.09.)">03.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.09.)">04.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.09.)">05.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.09.)">06.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.09.)">07.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.09.)">08.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.09.)">09.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.09.)">10.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.09.)">11.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.09.)">12.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.09.)">13.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.09.)">14.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.09.)">15.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.09.)">16.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.09.)">17.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.09.)">18.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.09.)">19.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.09.)">20.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.09.)">21.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.09.)">22.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.09.)">23.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.09.)">24.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.09.)">25.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.09.)">26.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.09.)">27.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.09.)">28.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.09.)">29.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.09.)">30.09.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.10.)">01.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.10.)">02.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.10.)">03.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.10.)">04.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.10.)">05.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.10.)">06.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.10.)">07.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.10.)">08.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.10.)">09.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.10.)">10.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.10.)">11.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.10.)">12.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.10.)">13.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.10.)">14.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.10.)">15.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.10.)">16.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.10.)">17.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.10.)">18.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.10.)">19.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.10.)">20.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.10.)">21.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.10.)">22.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.10.)">23.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.10.)">24.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.10.)">25.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.10.)">26.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.10.)">27.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.10.)">28.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.10.)">29.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.10.)">30.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.10.)">31.10.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.11.)">01.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.11.)">02.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.11.)">03.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.11.)">04.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.11.)">05.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.11.)">06.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.11.)">07.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.11.)">08.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.11.)">09.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.11.)">10.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.11.)">11.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.11.)">12.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.11.)">13.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.11.)">14.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.11.)">15.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.11.)">16.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.11.)">17.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.11.)">18.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.11.)">19.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.11.)">20.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.11.)">21.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.11.)">22.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.11.)">23.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.11.)">24.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.11.)">25.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.11.)">26.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.11.)">27.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.11.)">28.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.11.)">29.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.11.)">30.11.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,01.12.)">01.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,02.12.)">02.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,03.12.)">03.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,04.12.)">04.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,05.12.)">05.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,06.12.)">06.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,07.12.)">07.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,08.12.)">08.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,09.12.)">09.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,10.12.)">10.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,11.12.)">11.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,12.12.)">12.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,13.12.)">13.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,14.12.)">14.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,15.12.)">15.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,16.12.)">16.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,17.12.)">17.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,18.12.)">18.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,19.12.)">19.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,20.12.)">20.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,21.12.)">21.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,22.12.)">22.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,23.12.)">23.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,24.12.)">24.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,25.12.)">25.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,26.12.)">26.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,27.12.)">27.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,28.12.)">28.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,29.12.)">29.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,30.12.)">30.12.</value>
	<value condition="String.StartsWith(VideoPlayer.LastPlayed,31.12.)">31.12.</value>
	<value></value>
</variable>
	
<variable name="VideoplayerLastPlayed2">
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2010)">2010</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2011)">2011</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2012)">2012</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2013)">2013</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2014)">2014</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2015)">2015</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2016)">2016</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2017)">2017</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2018)">2018</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2019)">2019</value>
	<value condition="String.EndsWith(VideoPlayer.LastPlayed,2020)">2020</value>
	<value></value>
</variable>

<variable name="VideoplayerDuration">
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,08:)">8:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,07:)">7:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,06:)">6:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,05:)">5:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,04:)">4:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,03:)">3:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,02:)">2:$INFO[Player.Duration(mm)]</value>
	<value condition="Integer.IsGreater(VideoPlayer.Duration(h),0) + String.StartsWith(VideoPlayer.Duration,01:)">1:$INFO[Player.Duration(mm)]</value>
	<value>$INFO[Player.Duration(mm)]</value>
</variable>

<variable name="playercontrol-play">
	<value condition="Player.Paused">Ū</value>
	<value>ū</value>
</variable>

<variable name="playercontrol-repeat">
	<value condition="Playlist.IsRepeat">¤</value>
	<value condition="Playlist.IsRepeatOne">¥</value>
	<value>£</value>
</variable>

<variable name="playercontrol-random">
	<value condition="Playlist.IsRandom">¢</value>
	<value>¡</value>
</variable>

<!-- OSD buttons - anders als menueicons fuer umrandete buttons fuer iconset Estuary wie OSD -->
<variable name="OSD-playercontrol-repeat">
	<value condition="Playlist.IsRepeat">Ş</value>
	<value condition="Playlist.IsRepeatOne">ş</value>
	<value>ŝ</value>
</variable>

<variable name="OSD-playercontrol-random">
	<value condition="Playlist.IsRandom">Ŝ</value>
	<value>ś</value>
</variable>

<!-- clock Nowplaying home und screensaver -->
<include name="Clock_nowplaying">
	<control type="videowindow">
		<description>Fake preview fuer zeitlabels</description>
		<left>-5</left>
		<top>-5</top>
		<width>5</width>
		<height>5</height>
		<visible>Player.HasVideo</visible>
	</control>
	<control type="group"><!-- Alternativanzeige fuer Skinlogo -->
		<top>800</top>
		<visible>Player.HasMedia + [Window.IsActive(Home) + !Window.IsVisible(Custom_1101_Widgets.xml)] | Window.IsActive(Custom_1150_Screensaver.xml)</visible>
		<animation type="Conditional" condition="!Control.HasFocus(9900)"><!-- home focus clock button -->
			<effect type="slide" start="0,0" end="0,80" time="300" delay="180" tween="quadratic" easing="out"/>
		</animation>
		<control type="grouplist"><!-- Video -->
			<left>360</left>
			<width>1200</width>
			<height>100</height>
			<itemgap>0</itemgap>
			<align>center</align>
			<visible>Player.HasVideo</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<width>40</width>
				<height>45</height>
				<font>IconNormal</font>
				<label>$VAR[Player_Statusicon]</label>
			</control>
			<control type="label">
				<description>Serien Titel episoden</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<label>$INFO[VideoPlayer.TVShowTitle]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Enum</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<font>EnumRegularNormal</font>
				<label> $VAR[CustomEnumeration] </label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Titel episoden</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<label>$INFO[VideoPlayer.Title]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Titel Film/Dateien</description>
				<width>auto</width>
				<height>45</height>
				<align>center</align>
				<label>$INFO[VideoPlayer.Title]</label>
				<visible>!VideoPlayer.Content(episodes)</visible>
			</control>
		</control>
		<control type="grouplist">
			<left>360</left>
			<top>50</top>
			<width>1200</width>
			<height>35</height>
			<itemgap>0</itemgap>
			<align>center</align>
			<visible>Player.HasVideo</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<description>Subtitel Episoden</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$VAR[VideoPlayerEpisodePrefix-long]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Enum</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>EnumRegularSmall</font>
				<label> $VAR[CustomEnumeration] </label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Subtitel Episoden Zeit</description>
				<width>auto</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$INFO[Player.Time]$INFO[Player.Duration,/,]</label>
				<visible>VideoPlayer.Content(episodes)</visible>
			</control>
			<control type="label">
				<description>Zeit Film/Dateien</description>
				<width>1200</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$INFO[Player.Time]$INFO[Player.Duration,/,]</label>
				<visible>!VideoPlayer.Content(episodes)</visible>
			</control>
		</control>
		<control type="grouplist"><!-- audio -->
			<left>360</left>
			<width>1200</width>
			<height>100</height>
			<itemgap>0</itemgap>
			<align>center</align>
			<visible>Player.HasAudio</visible>
			<orientation>horizontal</orientation>
			<control type="label">
				<width>40</width>
				<height>45</height>
				<font>IconNormal</font>
				<label>$VAR[Player_Statusicon]</label>
			</control>
			<control type="label">
				<description>Titel</description>
				<width>auto</width>
				<height>45</height>
				<scrollspeed>50</scrollspeed>
				<scroll>true</scroll>
				<label>$INFO[MusicPlayer.TrackNumber,, ]$INFO[MusicPlayer.Title]</label>
			</control>
		</control>
		<control type="label">
			<description>Subtitel</description>
			<left>360</left>
			<top>50</top>
			<width>1200</width>
			<height>35</height>
			<align>center</align>
			<font>RegularSmall</font>
			<label>$INFO[MusicPlayer.Artist]</label>
			<visible>Player.HasAudio</visible>
		</control>
		<control type="grouplist">
			<left>360</left>
			<top>95</top>
			<width>1200</width>
			<height>100</height>
			<itemgap>0</itemgap>
			<align>left</align>
			<visible>Player.HasAudio</visible>
			<animation effect="slide" start="0,0" end="0,-45" time="0" condition="String.IsEmpty(MusicPlayer.Artist)">Conditional</animation><!-- slide epty artist -->
			<control type="label">
				<description>Subtitel Zeit</description>
				<width>1200</width>
				<height>35</height>
				<align>center</align>
				<font>RegularSmall</font>
				<label>$INFO[Player.Time]$INFO[Player.Duration, / ,]</label>
				<visible>[Integer.IsGreater(Player.TimeRemaining,20) + !String.IsEmpty(MusicPlayer.offset(1).Title)] | String.IsEmpty(MusicPlayer.offset(1).Title)</visible>
			</control>
			<control type="label">
				<description>Subtitel naechstes 20 Sek. vorm Ende wenn vorhanden</description>
				<width>1200</width>
				<height>45</height>
				<align>center</align>
				<label>Folgt: $INFO[MusicPlayer.offset(1).Title]</label>
				<visible>!Integer.IsGreater(Player.TimeRemaining,20) + !String.IsEmpty(MusicPlayer.offset(1).Title)</visible>
			</control>
		</control>
	</control>
</include>
	
<!-- ######################### -->
<!-- content Variables
############################## -->
<variable name="ContentSimilar">
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">special://skin/playlists/defaults/genres/tv/Comedy.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">special://skin/playlists/defaults/genres/tv/Family.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">special://skin/playlists/defaults/genres/tv/Krimi.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">special://skin/playlists/defaults/genres/tv/Anwalt.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel) | String.Contains(ListItem.Genre,Superheros)]">special://skin/playlists/defaults/genres/tv/Science fiction.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">special://skin/playlists/defaults/genres/tv/Animation.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">special://skin/playlists/defaults/genres/tv/Music.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">special://skin/playlists/defaults/genres/tv/Biografie.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">special://skin/playlists/defaults/genres/tv/Mystery.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">special://skin/playlists/defaults/genres/tv/Vampire.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">special://skin/playlists/defaults/genres/tv/Action.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">special://skin/playlists/defaults/genres/tv/Abenteuer.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">special://skin/playlists/defaults/genres/tv/MiniSeries.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">special://skin/playlists/defaults/genres/tv/Dokumenation.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + String.Contains(ListItem.Genre,Hbo)">special://skin/playlists/defaults/genres/tv/Hbo.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance) | String.Contains(ListItem.Genre,Romanze) | String.Contains(ListItem.Genre,Romantik)]">special://skin/playlists/defaults/genres/tv/Drama.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Baseball) | String.Contains(ListItem.Genre,Basketball)]">special://skin/playlists/defaults/genres/tv/Sport.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">special://skin/playlists/defaults/genres/tv/Krieg.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">special://skin/playlists/defaults/genres/tv/Historie.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter) | String.Contains(ListItem.Genre,Grusel)]">special://skin/playlists/defaults/genres/tv/Horror.xsp</value>
	<value condition="[Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes)] + [String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">special://skin/playlists/defaults/genres/tv/Arzt.xsp</value>

	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">special://skin/playlists/defaults/genres/film/Comedy.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">special://skin/playlists/defaults/genres/film/Family.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">special://skin/playlists/defaults/genres/film/Krimi.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">special://skin/playlists/defaults/genres/film/Anwalt.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel)]">special://skin/playlists/defaults/genres/film/Science fiction.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">special://skin/playlists/defaults/genres/film/Animation.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">special://skin/playlists/defaults/genres/film/Music.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">special://skin/playlists/defaults/genres/film/Biografie.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">special://skin/playlists/defaults/genres/film/Mystery.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">special://skin/playlists/defaults/genres/film/Vampire.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">special://skin/playlists/defaults/genres/film/Action.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">special://skin/playlists/defaults/genres/film/Abenteuer.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">special://skin/playlists/defaults/genres/film/MiniSeries.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">special://skin/playlists/defaults/genres/film/Dokumenation.xsp</value>
	<value condition="Container.Content(movies) + String.Contains(ListItem.Genre,Hbo)">special://skin/playlists/defaults/genres/film/Hbo.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance)]">special://skin/playlists/defaults/genres/film/Drama.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Basketball) | String.Contains(ListItem.Genre,Baseball)]">special://skin/playlists/defaults/genres/film/Sport.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">special://skin/playlists/defaults/genres/film/Krieg.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">special://skin/playlists/defaults/genres/film/Historie.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter)]">special://skin/playlists/defaults/genres/film/Horror.xsp</value>
	<value condition="Container.Content(movies) + [String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">special://skin/playlists/defaults/genres/film/Arzt.xsp</value>
	<value>-</value>
</variable>
	
<!-- Listentitel Ähnliche Filme nach Playliste -->
<variable name="SimilarLabel">
	<value condition="[String.Contains(ListItem.Genre,Comedy) | String.Contains(ListItem.Genre,Sitcom) | String.Contains(ListItem.Genre,Komödie)]">Komödie</value>
	<value condition="[String.Contains(ListItem.Genre,Family) | String.Contains(ListItem.Genre,Familien) | String.Contains(ListItem.Genre,Kinder) | String.Contains(ListItem.Genre,Kids)]">Familienfilme</value>
	<value condition="[String.Contains(ListItem.Genre,CSI) | String.Contains(ListItem.Genre,Crime) | String.Contains(ListItem.Genre,Krimi) | String.Contains(ListItem.Genre,Agenten)]">Krimis</value>
	<value condition="[String.Contains(ListItem.Genre,Anwälte) | String.Contains(ListItem.Genre,Law) | String.Contains(ListItem.Genre,Lawyer)]">Anwälte</value>
	<value condition="[String.Contains(ListItem.Genre,Sci-Fi) | String.Contains(ListItem.Genre,fiction) | String.Contains(ListItem.Genre,Superhelden) | String.Contains(ListItem.Genre,Stargate) | String.Contains(ListItem.Genre,Marvel) | String.Contains(ListItem.Genre,Superheros)]">Science fiction</value>
	<value condition="[String.Contains(ListItem.Genre,Animation) | String.Contains(ListItem.Genre,Anime) | String.Contains(ListItem.Genre,Zeichentrick)]">Animation</value>
	<value condition="[String.Contains(ListItem.Genre,Musik) | String.Contains(ListItem.Genre,Music) | String.Contains(ListItem.Genre,Musical)]">Musik</value>
	<value condition="[String.Contains(ListItem.Genre,Biografie) | String.Contains(ListItem.Genre,Biography)]">Biografie</value>
	<value condition="[String.Contains(ListItem.Genre,Mystic) | String.Contains(ListItem.Genre,Thrill) | String.Contains(ListItem.Genre,Mystery) | String.Contains(ListItem.Genre,Fantasy) | String.Contains(ListItem.Genre,Thriller)]">Thriller/Mystery</value>
	<value condition="[String.Contains(ListItem.Genre,Vampire) | String.Contains(ListItem.Genre,Vampires)]">Vampire</value>
	<value condition="[String.Contains(ListItem.Genre,Action) | String.Contains(ListItem.Genre,Kampfsport) | String.Contains(ListItem.Genre,Martial) | String.Contains(ListItem.Genre,Ninja)]">Action</value>
	<value condition="[String.Contains(ListItem.Genre,Western) | String.Contains(ListItem.Genre,Abenteuer) | String.Contains(ListItem.Genre,Adventure)]">Abenteuer</value>
	<value condition="[String.Contains(ListItem.Genre,Mini Series) | String.Contains(ListItem.Genre,Mini Serie)]">Mini Serie</value>
	<value condition="[String.Contains(ListItem.Genre,Dokumenation) | String.Contains(ListItem.Genre,Doku) | String.Contains(ListItem.Genre,Dokumentary) | String.Contains(ListItem.Genre,National) | String.Contains(ListItem.Genre,Nature)]">Dokumenation</value>
	<value condition="String.Contains(ListItem.Genre,Hbo)">HBO</value>
	<value condition="[String.Contains(ListItem.Genre,Drama) | String.Contains(ListItem.Genre,Love) | String.Contains(ListItem.Genre,Romance) | String.Contains(ListItem.Genre,Romanze) | String.Contains(ListItem.Genre,Romantik)]">Drama/Romantik</value>
	<value condition="[String.Contains(ListItem.Genre,Sport) | String.Contains(ListItem.Genre,Sports) | String.Contains(ListItem.Genre,Boxer) | String.Contains(ListItem.Genre,Boxing) | String.Contains(ListItem.Genre,Football) | String.Contains(ListItem.Genre,Baseball) | String.Contains(ListItem.Genre,Basketball)]">Sport</value>
	<value condition="[String.Contains(ListItem.Genre,Krieg) | String.Contains(ListItem.Genre,War)]">Krieg</value>
	<value condition="[String.Contains(ListItem.Genre,Historie) | String.Contains(ListItem.Genre,History) | String.Contains(ListItem.Genre,Monumental) | String.Contains(ListItem.Genre,Classic) | String.Contains(ListItem.Genre,Klassik) | String.Contains(ListItem.Genre,Film-Noir)]">Historie/Klassiker</value>
	<value condition="[String.Contains(ListItem.Genre,Horror) | String.Contains(ListItem.Genre,Zombies) | String.Contains(ListItem.Genre,Splatter) | String.Contains(ListItem.Genre,Grusel)]">Horror</value>
	<value condition="[String.Contains(ListItem.Genre,Ärzte) | String.Contains(ListItem.Genre,Krankenhaus) | String.Contains(ListItem.Genre,Doctor) | String.Contains(ListItem.Genre,Hospital)]">Ärzte</value>
</variable>
		
<!-- ebene darunter fuer numitems -->
<variable name="content_focus">
	<value condition="Container.Content(sets) | ListItem.IsCollection">videodb://movies/sets/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(genres)">videodb://movies/genres/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(actors)">videodb://movies/actors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(directors)">videodb://movies/directors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(studios)">videodb://movies/studios/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(countries)">videodb://movies/countries/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://movies) + Container.Content(years)">videodb://movies/years/$INFO[ListItem.Label]/</value>
	
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows/titles/)">videodb://tvshows/titles/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(genres)">videodb://tvshows/genres/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(actors)">videodb://tvshows/actors/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(studios)">videodb://tvshows/studios/$INFO[ListItem.DBID]/</value>
	<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + Container.Content(years)">videodb://tvshows/years/$INFO[ListItem.Label]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(albums) + String.StartsWith(Container.Folderpath,musicdb://albums/)">musicdb://albums/$INFO[ListItem.DBID]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(years)">musicdb://years/$INFO[ListItem.Label]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(artists) + String.StartsWith(Container.Folderpath,musicdb://artists/)">musicdb://artists/$INFO[ListItem.DBID]/</value>
	<value condition="Window.IsVisible(music) + Container.Content(genres)">musicdb://genres/$INFO[ListItem.DBID]/</value>
	
	<value condition="Window.IsVisible(programs)">addons://user/xbmc.addon.executable/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioDecoder.png)">addons://user/kodi.audiodecoder/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonRepository.png)">addons://user/xbmc.addon.repository/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioDSP.png)">addons://user/kodi.adsp/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonAudioEncoder.png)">addons://user/xbmc.audioencoder/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonContextItem.png)">addons://user/kodi.context.item/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Label,$LOCALIZE[35010])">addons://user/kodi.peripheral/</value><!-- DefaultAddonPeripheral -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Label,$LOCALIZE[35049])">addons://user/category.gameaddons/</value><!-- DefaultAddonGame -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,$LOCALIZE[24048])">addons://user/kodi.inputstream/</value><!-- DefaultAddonInputstream -->
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Bilder-Addons)">addons://user/xbmc.addon.image</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonService.png)">addons://user/xbmc.service/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonInfoProvider.png)">addons://user/category.infoproviders/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonLookAndFeel.png)">addons://user/category.lookandfeel/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonImages.png)">addons://user/kodi.resource.images/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonScreensaver.png)">addons://user/xbmc.ui.screensaver/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonUISounds.png)">addons://user/kodi.resource.uisounds/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonSkin.png)">addons://user/xbmc.gui.skin/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonLanguage.png)">addons://user/kodi.resource.language/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonVisualization.png)">addons://user/xbmc.player.musicviz/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonMusic.png)">addons://user/xbmc.addon.audio/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonProgram.png)">addons://user/xbmc.addon.executable/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonPVRClient.png)">addons://user/xbmc.pvrclient/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonVideo.png)">addons://user/xbmc.addon.video/</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonWebSkin.png)">addons://user/xbmc.webinterface</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.Icon,DefaultAddonWeather.png)">addons://user/xbmc.python.weather/</value>
	<value condition="Window.IsVisible(addonbrowser) + ListItem.IsParentFolder">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Benutzer-Addons)">addons://manage</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,System-Addons)">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Alle)">addons://user/all</value>
	<value condition="Window.IsVisible(addonbrowser) + String.IsEqual(ListItem.label,Aus Repository)">addons://repos</value>
</variable>

<!-- infodialoge label formate -->
<include name="info_details_title">
	<top>-38</top>
	<width>430</width>
	<height>32</height>
	<font>SubTitleCapsNormal</font>
	<textcolor>TextColorMedium</textcolor>
</include>

<include name="info_details_label">
	<width>430</width>
	<height>64</height>
	<aligny>top</aligny>
	<wrapmultiline>true</wrapmultiline>
	<font>SubTitleCapsBold</font>
</include>

<include name="info-Background-Fade">
	<control type="group">
		<animation effect="slide" start="0,0" end="0,119" time="300" condition="Window.IsVisible(movieinformation) + !String.IsEmpty(Window(movieinformation).Property(AniSlideR))">Conditional</animation>
		<control type="image">
			<description>Castlist, menue und contents hintergrund oben</description>
			<left>-400</left>
			<top>-320</top>
			<width>2320</width>
			<height>1000</height>
			<texture colordiffuse="FocusBackdropCol2">white.png</texture>
			<animation type="WindowOpen" reversible="false">
				<effect type="fade" delay="2000" start="0" end="100" time="5000" tween="cubic" easing="in" />
			</animation>
			<animation effect="fade" time="150" reversible="false">WindowClose</animation>
			<animation type="Visible" reversible="false" condition="!Window.IsActive(Custom_1121_Textbox.xml)">
				<effect type="fade" delay="2000" start="0" end="100" time="5000" loop="true" tween="cubic" easing="in" />
			</animation>
			<animation type="Visible" reversible="true" condition="Window.IsActive(Custom_1121_Textbox.xml)">
				<effect type="fade" delay="5000" start="0" end="100" time="5000" loop="true" tween="cubic" easing="in" />
			</animation>
			<animation type="Hidden" reversible="false">
				<effect type="fade" start="100" end="0" time="150" tween="cubic" easing="inout" />
			</animation>
			<visible>!Window.IsVisible(Custom_1121_Textbox.xml) + [Control.HasFocus(9000) | Control.HasFocus(50) | Control.HasFocus(501)]</visible>
		</control>
		<control type="image">
			<description>Castlist, menue und contents hintergrund unten</description>
			<left>-400</left>
			<top>680</top>
			<width>2320</width>
			<height>800</height>
			<texture colordiffuse="FocusBackdropCol">white.png</texture>
			<animation type="WindowOpen" reversible="false">
				<effect type="fade" delay="2000" start="0" end="100" time="5000" tween="cubic" easing="in" />
			</animation>
			<animation effect="fade" time="150" reversible="false">WindowClose</animation>
			<animation type="Visible" reversible="false" condition="!Window.IsActive(Custom_1121_Textbox.xml)">
				<effect type="fade" delay="2000" start="0" end="100" time="5000" loop="true" tween="cubic" easing="in" />
			</animation>
			<animation type="Visible" reversible="true" condition="Window.IsActive(Custom_1121_Textbox.xml)">
				<effect type="fade" delay="5000" start="0" end="100" time="5000" loop="true" tween="cubic" easing="in" />
			</animation>
			<animation type="Hidden" reversible="false">
				<effect type="fade" start="100" end="0" time="150" tween="cubic" easing="inout" />
			</animation>
			<visible>!Window.IsVisible(Custom_1121_Textbox.xml) + [Control.HasFocus(9000) | Control.HasFocus(50) | Control.HasFocus(501)]</visible>
		</control>
	</control>
</include>

<!-- TextBox dialog includes -->
<include name="TextBoxArtLogo">
	<left>1450</left>
	<top>120</top>
	<width>400</width>
	<height>80</height>
	<fadetime>300</fadetime>
	<aspectratio align="right" aligny="bottom">keep</aspectratio>
</include>
	
<variable name="TextBoxTitle">
	<value condition="!String.IsEmpty(ListItem.AddonName)">$INFO[ListItem.AddonName][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.AddonVersion, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) | String.Contains(ListItem.DBTYPE,Season)">$INFO[ListItem.TVShowTitle][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.Year, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,episode)">$INFO[ListItem.TVShowTitle][COLOR=$VAR[SecondaryCol]]$VAR[PremieredShortLabel, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,movie)">$INFO[ListItem.Label][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.Year, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,album)">$INFO[ListItem.Album]</value>
	<value condition="String.Contains(ListItem.DBTYPE,artist)">$INFO[ListItem.Artist]</value>
	<value condition="String.Contains(ListItem.DBTYPE,song)">$INFO[ListItem.Tracknumber,,. ]$INFO[ListItem.Title][COLOR=$VAR[SecondaryCol]]$INFO[ListItem.Year, (,)][/COLOR]</value>
	<value condition="String.Contains(ListItem.DBTYPE,set)">$INFO[ListItem.Label]</value>
</variable>

<variable name="TextBoxSubTitle">
	<value condition="!String.IsEmpty(ListItem.AddonName)">$INFO[ListItem.AddonType]</value>
	<value condition="String.Contains(ListItem.DBTYPE,movie) + Integer.IsGreater(ListItem.PercentPlayed,10) | Integer.IsGreater(ListItem.PlayCount,0) + !ListItem.IsResumable">$VAR[VT_DatePrefix]$VAR[VT_Date]</value>
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) + !String.IsEmpty(ListItem.Property(TotalSeasons))">$INFO[ListItem.Property(TotalSeasons),, Staffeln]</value><!-- serie -->
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) + String.IsEmpty(ListItem.Property(TotalSeasons))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- Staffel -->
	<value condition="String.Contains(ListItem.DBTYPE,episode)">$VAR[SeasonPrefix-long]</value>
	<value condition="String.Contains(ListItem.DBTYPE,album)">$INFO[ListItem.Artist]</value>
	<value condition="String.Contains(ListItem.DBTYPE,artist)">$INFO[ListItem.Album]</value>
	<value condition="String.Contains(ListItem.DBTYPE,song)">$INFO[ListItem.Artist]</value>
</variable>
<variable name="TextBoxSubTitle2">
	<value condition="!String.IsEmpty(ListItem.AddonName) + !String.IsEmpty(ListItem.AddonCreator)">$INFO[ListItem.AddonCreator]</value>
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) + !String.IsEmpty(ListItem.Property(TotalSeasons))">$INFO[ListItem.Property(TotalEpisodes),, Episoden]</value><!-- serie -->
	<value condition="String.Contains(ListItem.DBTYPE,episode)">$VAR[EpisodePrefix-long, , - ]$INFO[ListItem.Title]</value>
	<value condition="String.Contains(ListItem.DBTYPE,song)">$INFO[ListItem.Album]</value>
</variable>

<variable name="TextBoxText">
	<value condition="!String.IsEmpty(ListItem.AddonName)">$INFO[ListItem.AddonDescription]</value>
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) | String.Contains(ListItem.DBTYPE,Season) | String.Contains(ListItem.DBTYPE,episode) | String.Contains(ListItem.DBTYPE,movie) | String.Contains(ListItem.DBTYPE,video)">$INFO[ListItem.Tagline,[B],[/B][CR]]$INFO[ListItem.Plot]</value>
	<value condition="String.Contains(ListItem.DBTYPE,album) | String.Contains(ListItem.DBTYPE,artist) | String.Contains(ListItem.DBTYPE,song)">$INFO[ListItem.Property(Artist_Description),,[CR]]$INFO[ListItem.Property(Album_Description),,[CR]]$INFO[ListItem.Comment]</value>
	<value condition="String.Contains(ListItem.DBTYPE,set)">$INFO[Window(home).Property(Set.Movies.Plot)]</value>
	<value condition="Control.HasFocus(90034)">Klangschema für Kodi cylce[CR]Hinweis:[CR]Das Klangschema muss noch in den Kodi Einstellungen ausgewählt werden.</value>
	<value condition="Control.HasFocus(90035)">Downloadet alle verfügbaren Artworks für TV Sendungen, Filme und Musikvideos in deine Datenbank. Überprüfe die Optionen für nicht unterstützte Artwork[CR]Artworkquellen: [CR]www.fanart.tv[CR]www.thetvdb.com[CR]www.themoviedb.org[CR]Remark:[CR]Überprüfe dein Skin ob Artwork unterstützt wird![CR]Jede TV Sendung/Film braucht seinen eigenen Ordner![CR]Skin Integration:[CR]Siehe Readme Datei</value>

	<value condition="Control.HasFocus(90036)">You have a huge library of TV shows and you havent viewed half of it. So why does it feel like such a chore to sit down and watch something? LazyTV is here to free you from your battles with indecision, instead letting you lean back and soak up content. With one click you can be channel-surfing your own library, or have what you probably want to watch pop up in a single window. Afterall, you know you want to watch TV, so why do you also have to decide what specifically to watch? Unlike a smart playlist or skin widget, LazyTV doesnt just provide the first unwatched episode of a TV show. It provides the first unwatched episode AFTER the last watched one in your library. A small, but important, distinction.</value>
	<value condition="Control.HasFocus(90037)">Plugin für Skins um Bibliotheksdaten überall als Widget zur Verfügung zu stellen.</value>
	<value condition="Control.HasFocus(90041)">Bewerte deine Filme, Serien oder Episoden nicht nur im Infodialog sondern auch bequem beim Browsen in deiner Datenbank über das Kontextmenü, oder nach der Wiedergabe!</value>
	<value condition="Control.HasFocus(90043)">Wettervorhersage bereitgestellt durch OpenWeatherMap (http://openweathermap.org/)</value>
	<value condition="Control.HasFocus(90044)">TV Show Next Aired liefert Termin-Informationen über die anstehenden Episoden der Serien aus der Datenbank. Dazu gibt es eine Wochenansicht mit allen in der nächsten Woche laufenden Episoden sowie (bei vorhandenem Skin Support) die direkte Integration der Informationen in die Ansichten des jeweiligen Skins. Sie werden nie wieder eine Folge verpassen.</value>
	<value condition="Control.HasFocus(90045)">This script fetches extended information for several media types (artists, albums, movie sets etc.). Needs skin support.</value>
	<value condition="Control.HasFocus(90046)">This script makes it possible to edit movie details manually from within XBMC. Needs Skin Support</value>
</variable>

<!-- ######################### -->
<!-- CycleClock
############################## -->
<variable name="CycleClockPath">
	<value condition="Skin.HasSetting(EnableVintageOverlay)">clock/vintage/</value>
	<value condition="!Skin.HasSetting(EnableVintageOverlay)">clock/cycle/</value>
</variable>

<variable name="Cycleclocksz">
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz00.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz01.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz02.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz03.png</value>
	<value condition="[String.IsEqual(System.Time(hh),12) | String.IsEqual(System.Time(hh),00)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz04.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz05.png</value>
	<value condition="[String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz06.png</value>
	<value condition="[String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(hh),23) + String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz07.png</value>
	<value condition="[String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz08.png</value>
	<value condition="[String.IsEqual(System.Time(hh),01) | String.IsEqual(System.Time(hh),13)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz09.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz10.png</value>
	<value condition="[String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz11.png</value>
	<value condition="[String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz12.png</value>
	<value condition="[String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz13.png</value>
	<value condition="[String.IsEqual(System.Time(hh),02) | String.IsEqual(System.Time(hh),14)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz14.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz15.png</value>
	<value condition="[String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz16.png</value>
	<value condition="[String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz17.png</value>
	<value condition="[String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz18.png</value>
	<value condition="[String.IsEqual(System.Time(hh),03) | String.IsEqual(System.Time(hh),15)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz19.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz20.png</value>
	<value condition="[String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz21.png</value>
	<value condition="[String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz22.png</value>
	<value condition="[String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz23.png</value>
	<value condition="[String.IsEqual(System.Time(hh),04) | String.IsEqual(System.Time(hh),16)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz24.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz25.png</value>
	<value condition="[String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz26.png</value>
	<value condition="[String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz27.png</value>
	<value condition="[String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz28.png</value>
	<value condition="[String.IsEqual(System.Time(hh),05) | String.IsEqual(System.Time(hh),17)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz29.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz30.png</value>
	<value condition="[String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz31.png</value>
	<value condition="[String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz32.png</value>
	<value condition="[String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz33.png</value>
	<value condition="[String.IsEqual(System.Time(hh),06) | String.IsEqual(System.Time(hh),18)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz34.png</value>
	
	<!-- 17 -->
	<value condition="[String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz35.png</value>
	<value condition="[String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz36.png</value>
	<value condition="[String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz37.png</value>
	<value condition="[String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz38.png</value>
	<value condition="[String.IsEqual(System.Time(hh),07) | String.IsEqual(System.Time(hh),19)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz39.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz40.png</value>
	<value condition="[String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz41.png</value>
	<value condition="[String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz42.png</value>
	<value condition="[String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz43.png</value>
	<value condition="[String.IsEqual(System.Time(hh),08) | String.IsEqual(System.Time(hh),20)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz44.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz45.png</value>
	<value condition="[String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz46.png</value>
	<value condition="[String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz47.png</value>
	<value condition="[String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz48.png</value>
	<value condition="[String.IsEqual(System.Time(hh),09) | String.IsEqual(System.Time(hh),21)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz49.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz50.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz51.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz52.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz53.png</value>
	<value condition="[String.IsEqual(System.Time(hh),10) | String.IsEqual(System.Time(hh),22)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz54.png</value>
	
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),00) | String.IsEqual(System.Time(mm),01) | String.IsEqual(System.Time(mm),02) | String.IsEqual(System.Time(mm),03) | String.IsEqual(System.Time(mm),04) | String.IsEqual(System.Time(mm),05) | String.IsEqual(System.Time(mm),06) | String.IsEqual(System.Time(mm),07) | String.IsEqual(System.Time(mm),08) | String.IsEqual(System.Time(mm),09) | String.IsEqual(System.Time(mm),10) | String.IsEqual(System.Time(mm),11) | String.IsEqual(System.Time(mm),12)]">$VAR[CycleClockPath]clocksz55.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),13) | String.IsEqual(System.Time(mm),14) | String.IsEqual(System.Time(mm),15) | String.IsEqual(System.Time(mm),16) | String.IsEqual(System.Time(mm),17) | String.IsEqual(System.Time(mm),18) | String.IsEqual(System.Time(mm),19) | String.IsEqual(System.Time(mm),20) | String.IsEqual(System.Time(mm),21) | String.IsEqual(System.Time(mm),22) | String.IsEqual(System.Time(mm),23) | String.IsEqual(System.Time(mm),24)]">$VAR[CycleClockPath]clocksz56.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),25) | String.IsEqual(System.Time(mm),26) | String.IsEqual(System.Time(mm),27) | String.IsEqual(System.Time(mm),28) | String.IsEqual(System.Time(mm),29) | String.IsEqual(System.Time(mm),30) | String.IsEqual(System.Time(mm),31) | String.IsEqual(System.Time(mm),32) | String.IsEqual(System.Time(mm),33) | String.IsEqual(System.Time(mm),34) | String.IsEqual(System.Time(mm),35) | String.IsEqual(System.Time(mm),36)]">$VAR[CycleClockPath]clocksz57.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),37) | String.IsEqual(System.Time(mm),38) | String.IsEqual(System.Time(mm),39) | String.IsEqual(System.Time(mm),40) | String.IsEqual(System.Time(mm),41) | String.IsEqual(System.Time(mm),42) | String.IsEqual(System.Time(mm),43) | String.IsEqual(System.Time(mm),44) | String.IsEqual(System.Time(mm),45) | String.IsEqual(System.Time(mm),46) | String.IsEqual(System.Time(mm),47) | String.IsEqual(System.Time(mm),48)]">$VAR[CycleClockPath]clocksz58.png</value>
	<value condition="[String.IsEqual(System.Time(hh),11) | String.IsEqual(System.Time(hh),23)] + [String.IsEqual(System.Time(mm),49) | String.IsEqual(System.Time(mm),50) | String.IsEqual(System.Time(mm),51) | String.IsEqual(System.Time(mm),52) | String.IsEqual(System.Time(mm),53) | String.IsEqual(System.Time(mm),54) | String.IsEqual(System.Time(mm),55) | String.IsEqual(System.Time(mm),56) | String.IsEqual(System.Time(mm),57) | String.IsEqual(System.Time(mm),58) | String.IsEqual(System.Time(mm),59) | String.IsEqual(System.Time(mm),60)]">$VAR[CycleClockPath]clocksz59.png</value>
</variable>

<variable name="Cycleclockmz">
	<value condition="String.IsEqual(System.Time(mm),01)">$VAR[CycleClockPath]clockmz01.png</value>
	<value condition="String.IsEqual(System.Time(mm),02)">$VAR[CycleClockPath]clockmz02.png</value>
	<value condition="String.IsEqual(System.Time(mm),03)">$VAR[CycleClockPath]clockmz03.png</value>
	<value condition="String.IsEqual(System.Time(mm),04)">$VAR[CycleClockPath]clockmz04.png</value>
	<value condition="String.IsEqual(System.Time(mm),05)">$VAR[CycleClockPath]clockmz05.png</value>
	<value condition="String.IsEqual(System.Time(mm),06)">$VAR[CycleClockPath]clockmz06.png</value>
	<value condition="String.IsEqual(System.Time(mm),07)">$VAR[CycleClockPath]clockmz07.png</value>
	<value condition="String.IsEqual(System.Time(mm),08)">$VAR[CycleClockPath]clockmz08.png</value>
	<value condition="String.IsEqual(System.Time(mm),09)">$VAR[CycleClockPath]clockmz09.png</value>
	<value condition="String.IsEqual(System.Time(mm),10)">$VAR[CycleClockPath]clockmz10.png</value>
	<value condition="String.IsEqual(System.Time(mm),11)">$VAR[CycleClockPath]clockmz11.png</value>
	<value condition="String.IsEqual(System.Time(mm),12)">$VAR[CycleClockPath]clockmz12.png</value>
	<value condition="String.IsEqual(System.Time(mm),13)">$VAR[CycleClockPath]clockmz13.png</value>
	<value condition="String.IsEqual(System.Time(mm),14)">$VAR[CycleClockPath]clockmz14.png</value>
	<value condition="String.IsEqual(System.Time(mm),15)">$VAR[CycleClockPath]clockmz15.png</value>
	<value condition="String.IsEqual(System.Time(mm),16)">$VAR[CycleClockPath]clockmz16.png</value>
	<value condition="String.IsEqual(System.Time(mm),17)">$VAR[CycleClockPath]clockmz17.png</value>
	<value condition="String.IsEqual(System.Time(mm),18)">$VAR[CycleClockPath]clockmz18.png</value>
	<value condition="String.IsEqual(System.Time(mm),19)">$VAR[CycleClockPath]clockmz19.png</value>
	<value condition="String.IsEqual(System.Time(mm),20)">$VAR[CycleClockPath]clockmz20.png</value>
	<value condition="String.IsEqual(System.Time(mm),21)">$VAR[CycleClockPath]clockmz21.png</value>
	<value condition="String.IsEqual(System.Time(mm),22)">$VAR[CycleClockPath]clockmz22.png</value>
	<value condition="String.IsEqual(System.Time(mm),23)">$VAR[CycleClockPath]clockmz23.png</value>
	<value condition="String.IsEqual(System.Time(mm),24)">$VAR[CycleClockPath]clockmz24.png</value>
	<value condition="String.IsEqual(System.Time(mm),25)">$VAR[CycleClockPath]clockmz25.png</value>
	<value condition="String.IsEqual(System.Time(mm),26)">$VAR[CycleClockPath]clockmz26.png</value>
	<value condition="String.IsEqual(System.Time(mm),27)">$VAR[CycleClockPath]clockmz27.png</value>
	<value condition="String.IsEqual(System.Time(mm),28)">$VAR[CycleClockPath]clockmz28.png</value>
	<value condition="String.IsEqual(System.Time(mm),29)">$VAR[CycleClockPath]clockmz29.png</value>
	<value condition="String.IsEqual(System.Time(mm),30)">$VAR[CycleClockPath]clockmz30.png</value>
	<value condition="String.IsEqual(System.Time(mm),31)">$VAR[CycleClockPath]clockmz31.png</value>
	<value condition="String.IsEqual(System.Time(mm),32)">$VAR[CycleClockPath]clockmz32.png</value>
	<value condition="String.IsEqual(System.Time(mm),33)">$VAR[CycleClockPath]clockmz33.png</value>
	<value condition="String.IsEqual(System.Time(mm),34)">$VAR[CycleClockPath]clockmz34.png</value>
	<value condition="String.IsEqual(System.Time(mm),35)">$VAR[CycleClockPath]clockmz35.png</value>
	<value condition="String.IsEqual(System.Time(mm),36)">$VAR[CycleClockPath]clockmz36.png</value>
	<value condition="String.IsEqual(System.Time(mm),37)">$VAR[CycleClockPath]clockmz37.png</value>
	<value condition="String.IsEqual(System.Time(mm),38)">$VAR[CycleClockPath]clockmz38.png</value>
	<value condition="String.IsEqual(System.Time(mm),39)">$VAR[CycleClockPath]clockmz39.png</value>
	<value condition="String.IsEqual(System.Time(mm),40)">$VAR[CycleClockPath]clockmz40.png</value>
	<value condition="String.IsEqual(System.Time(mm),41)">$VAR[CycleClockPath]clockmz41.png</value>
	<value condition="String.IsEqual(System.Time(mm),42)">$VAR[CycleClockPath]clockmz42.png</value>
	<value condition="String.IsEqual(System.Time(mm),43)">$VAR[CycleClockPath]clockmz43.png</value>
	<value condition="String.IsEqual(System.Time(mm),44)">$VAR[CycleClockPath]clockmz44.png</value>
	<value condition="String.IsEqual(System.Time(mm),45)">$VAR[CycleClockPath]clockmz45.png</value>
	<value condition="String.IsEqual(System.Time(mm),46)">$VAR[CycleClockPath]clockmz46.png</value>
	<value condition="String.IsEqual(System.Time(mm),47)">$VAR[CycleClockPath]clockmz47.png</value>
	<value condition="String.IsEqual(System.Time(mm),48)">$VAR[CycleClockPath]clockmz48.png</value>
	<value condition="String.IsEqual(System.Time(mm),49)">$VAR[CycleClockPath]clockmz49.png</value>
	<value condition="String.IsEqual(System.Time(mm),50)">$VAR[CycleClockPath]clockmz50.png</value>
	<value condition="String.IsEqual(System.Time(mm),51)">$VAR[CycleClockPath]clockmz51.png</value>
	<value condition="String.IsEqual(System.Time(mm),52)">$VAR[CycleClockPath]clockmz52.png</value>
	<value condition="String.IsEqual(System.Time(mm),53)">$VAR[CycleClockPath]clockmz53.png</value>
	<value condition="String.IsEqual(System.Time(mm),54)">$VAR[CycleClockPath]clockmz54.png</value>
	<value condition="String.IsEqual(System.Time(mm),55)">$VAR[CycleClockPath]clockmz55.png</value>
	<value condition="String.IsEqual(System.Time(mm),56)">$VAR[CycleClockPath]clockmz56.png</value>
	<value condition="String.IsEqual(System.Time(mm),57)">$VAR[CycleClockPath]clockmz57.png</value>
	<value condition="String.IsEqual(System.Time(mm),58)">$VAR[CycleClockPath]clockmz58.png</value>
	<value condition="String.IsEqual(System.Time(mm),59)">$VAR[CycleClockPath]clockmz59.png</value>
	<value condition="String.IsEqual(System.Time(mm),00)">$VAR[CycleClockPath]clockmz60.png</value>
</variable>

<variable name="Cycleclockscz">
	<value condition="String.IsEqual(System.Time(ss),01)">$VAR[CycleClockPath]clockscz01.png</value>
	<value condition="String.IsEqual(System.Time(ss),02)">$VAR[CycleClockPath]clockscz02.png</value>
	<value condition="String.IsEqual(System.Time(ss),03)">$VAR[CycleClockPath]clockscz03.png</value>
	<value condition="String.IsEqual(System.Time(ss),04)">$VAR[CycleClockPath]clockscz04.png</value>
	<value condition="String.IsEqual(System.Time(ss),05)">$VAR[CycleClockPath]clockscz05.png</value>
	<value condition="String.IsEqual(System.Time(ss),06)">$VAR[CycleClockPath]clockscz06.png</value>
	<value condition="String.IsEqual(System.Time(ss),07)">$VAR[CycleClockPath]clockscz07.png</value>
	<value condition="String.IsEqual(System.Time(ss),08)">$VAR[CycleClockPath]clockscz08.png</value>
	<value condition="String.IsEqual(System.Time(ss),09)">$VAR[CycleClockPath]clockscz09.png</value>
	<value condition="String.IsEqual(System.Time(ss),10)">$VAR[CycleClockPath]clockscz10.png</value>
	<value condition="String.IsEqual(System.Time(ss),11)">$VAR[CycleClockPath]clockscz11.png</value>
	<value condition="String.IsEqual(System.Time(ss),12)">$VAR[CycleClockPath]clockscz12.png</value>
	<value condition="String.IsEqual(System.Time(ss),13)">$VAR[CycleClockPath]clockscz13.png</value>
	<value condition="String.IsEqual(System.Time(ss),14)">$VAR[CycleClockPath]clockscz14.png</value>
	<value condition="String.IsEqual(System.Time(ss),15)">$VAR[CycleClockPath]clockscz15.png</value>
	<value condition="String.IsEqual(System.Time(ss),16)">$VAR[CycleClockPath]clockscz16.png</value>
	<value condition="String.IsEqual(System.Time(ss),17)">$VAR[CycleClockPath]clockscz17.png</value>
	<value condition="String.IsEqual(System.Time(ss),18)">$VAR[CycleClockPath]clockscz18.png</value>
	<value condition="String.IsEqual(System.Time(ss),19)">$VAR[CycleClockPath]clockscz19.png</value>
	<value condition="String.IsEqual(System.Time(ss),20)">$VAR[CycleClockPath]clockscz20.png</value>
	<value condition="String.IsEqual(System.Time(ss),21)">$VAR[CycleClockPath]clockscz21.png</value>
	<value condition="String.IsEqual(System.Time(ss),22)">$VAR[CycleClockPath]clockscz22.png</value>
	<value condition="String.IsEqual(System.Time(ss),23)">$VAR[CycleClockPath]clockscz23.png</value>
	<value condition="String.IsEqual(System.Time(ss),24)">$VAR[CycleClockPath]clockscz24.png</value>
	<value condition="String.IsEqual(System.Time(ss),25)">$VAR[CycleClockPath]clockscz25.png</value>
	<value condition="String.IsEqual(System.Time(ss),26)">$VAR[CycleClockPath]clockscz26.png</value>
	<value condition="String.IsEqual(System.Time(ss),27)">$VAR[CycleClockPath]clockscz27.png</value>
	<value condition="String.IsEqual(System.Time(ss),28)">$VAR[CycleClockPath]clockscz28.png</value>
	<value condition="String.IsEqual(System.Time(ss),29)">$VAR[CycleClockPath]clockscz29.png</value>
	<value condition="String.IsEqual(System.Time(ss),30)">$VAR[CycleClockPath]clockscz30.png</value>
	<value condition="String.IsEqual(System.Time(ss),31)">$VAR[CycleClockPath]clockscz31.png</value>
	<value condition="String.IsEqual(System.Time(ss),32)">$VAR[CycleClockPath]clockscz32.png</value>
	<value condition="String.IsEqual(System.Time(ss),33)">$VAR[CycleClockPath]clockscz33.png</value>
	<value condition="String.IsEqual(System.Time(ss),34)">$VAR[CycleClockPath]clockscz34.png</value>
	<value condition="String.IsEqual(System.Time(ss),35)">$VAR[CycleClockPath]clockscz35.png</value>
	<value condition="String.IsEqual(System.Time(ss),36)">$VAR[CycleClockPath]clockscz36.png</value>
	<value condition="String.IsEqual(System.Time(ss),37)">$VAR[CycleClockPath]clockscz37.png</value>
	<value condition="String.IsEqual(System.Time(ss),38)">$VAR[CycleClockPath]clockscz38.png</value>
	<value condition="String.IsEqual(System.Time(ss),39)">$VAR[CycleClockPath]clockscz39.png</value>
	<value condition="String.IsEqual(System.Time(ss),40)">$VAR[CycleClockPath]clockscz40.png</value>
	<value condition="String.IsEqual(System.Time(ss),41)">$VAR[CycleClockPath]clockscz41.png</value>
	<value condition="String.IsEqual(System.Time(ss),42)">$VAR[CycleClockPath]clockscz42.png</value>
	<value condition="String.IsEqual(System.Time(ss),43)">$VAR[CycleClockPath]clockscz43.png</value>
	<value condition="String.IsEqual(System.Time(ss),44)">$VAR[CycleClockPath]clockscz44.png</value>
	<value condition="String.IsEqual(System.Time(ss),45)">$VAR[CycleClockPath]clockscz45.png</value>
	<value condition="String.IsEqual(System.Time(ss),46)">$VAR[CycleClockPath]clockscz46.png</value>
	<value condition="String.IsEqual(System.Time(ss),47)">$VAR[CycleClockPath]clockscz47.png</value>
	<value condition="String.IsEqual(System.Time(ss),48)">$VAR[CycleClockPath]clockscz48.png</value>
	<value condition="String.IsEqual(System.Time(ss),49)">$VAR[CycleClockPath]clockscz49.png</value>
	<value condition="String.IsEqual(System.Time(ss),50)">$VAR[CycleClockPath]clockscz50.png</value>
	<value condition="String.IsEqual(System.Time(ss),51)">$VAR[CycleClockPath]clockscz51.png</value>
	<value condition="String.IsEqual(System.Time(ss),52)">$VAR[CycleClockPath]clockscz52.png</value>
	<value condition="String.IsEqual(System.Time(ss),53)">$VAR[CycleClockPath]clockscz53.png</value>
	<value condition="String.IsEqual(System.Time(ss),54)">$VAR[CycleClockPath]clockscz54.png</value>
	<value condition="String.IsEqual(System.Time(ss),55)">$VAR[CycleClockPath]clockscz55.png</value>
	<value condition="String.IsEqual(System.Time(ss),56)">$VAR[CycleClockPath]clockscz56.png</value>
	<value condition="String.IsEqual(System.Time(ss),57)">$VAR[CycleClockPath]clockscz57.png</value>
	<value condition="String.IsEqual(System.Time(ss),58)">$VAR[CycleClockPath]clockscz58.png</value>
	<value condition="String.IsEqual(System.Time(ss),59)">$VAR[CycleClockPath]clockscz59.png</value>
	<value condition="String.IsEqual(System.Time(ss),00)">$VAR[CycleClockPath]clockscz60.png</value>
</variable>

<include name="CycleClock">
	<control type="image">
		<description>Ziffernblatt</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[PrimaryCol]">$VAR[CycleClockPath]zahlen.png</texture>
		<animation type="Conditional" condition="true">
			<effect type="fade" start="0" end="13" time="0" />
		</animation>
	</control>
	<control type="image">
		<width>714</width>
		<height>714</height>
		<texture>$VAR[CycleClockPath]schrauben.png</texture>
	</control>
	<control type="image">
		<description>Stundenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture>$VAR[Cycleclocksz]</texture>
	</control>
	<control type="image">
		<description>Minutenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture>$VAR[Cycleclockmz]</texture>
	</control>
	<control type="image">
		<description>Sekundenzeiger</description>
		<width>714</width>
		<height>714</height>
		<texture colordiffuse="$VAR[PrimaryCol]">$VAR[Cycleclockscz]</texture>
	</control>
</include>
	
<include name="Trailerwindow502">
	<control type="group"><!-- Trailerwindow 502 -->
		<left>-1920</left>
		<animation effect="slide" start="0" end="1920" time="300" condition="Control.HasFocus(502)">Conditional</animation>
		<visible>Control.HasFocus(502) + Player.HasVideo</visible>
		<control type="button" id="502">
			<include>Hiddencontrol</include>
			<onleft>stop</onleft>
			<onleft>SetFocus(50)</onleft>
			<onleft>ClearProperty(Trailerpreview,home)</onleft>
			<onright>stop</onright>
			<onright>SetFocus(50)</onright>
			<onright>ClearProperty(Trailerpreview,home)</onright>
			<onup>ClearProperty(Trailerpreview,home)</onup>
			<onup>stop</onup>
			<onup>SetFocus(50)</onup>
			<ondown>ClearProperty(Trailerpreview,home)</ondown>
			<ondown>stop</ondown>
			<ondown>SetFocus(50)</ondown>
			<onclick>stop</onclick>
			<onclick>SetFocus(50)</onclick>
			<onclick>ClearProperty(Trailerpreview,home)</onclick>
		</control>
		<control type="group">
			<left>220</left>
			<top>119</top>
			<control type="image">
				<description>Hintergrund Dialog</description>
				<left>-8</left>
				<top>-8</top>
				<width>1505</width>
				<height>932</height>
				<include>DialogBackground</include>
			</control>
			<control type="image">
				<left>-11</left>
				<top>-11</top>
				<width>1512</width>
				<height>80</height>
				<texture border="14,0,14,0" flipy="true" colordiffuse="$VAR[PrimaryCol]">cycle/full-11.png</texture>
			</control>
			<control type="grouplist">
				<description>Titel</description>
				<left>10</left>
				<width>980</width>
				<height>60</height>
				<itemgap>10</itemgap>
				<align>left</align>
				<orientation>horizontal</orientation>
				<control type="label">
					<description>Play icon</description>
					<width>50</width>
					<height>50</height>
					<font>IconBig</font>
					<textcolor>TextColorFO</textcolor>
					<label>v</label>
				</control>
				<control type="label">
					<description>Title</description>
					<width>auto</width>
					<height>50</height>
					<textcolor>TextColorFO</textcolor>
					<label>$INFO[Videoplayer.Title,Trailer: ]</label>
				</control>
			</control>
			<control type="label">
				<description>Duration</description>
				<left>1000</left>
				<width>480</width>
				<height>50</height>
				<align>right</align>
				<textcolor>TextColorFO</textcolor>
				<label>$INFO[Player.Time]$INFO[Player.Duration, / ,]</label>
			</control>
			<control type="image">
				<description>Hintergrund videowindow</description>
				<left>20</left>
				<top>75</top>
				<width>1450</width>
				<height>815</height>
				<texture colordiffuse="black">white.png</texture>
			</control>
			<control type="videowindow">
				<description>Videowindow</description>
				<left>20</left>
				<top>75</top>
				<width>1449</width>
				<height>815</height>
				<visible>Player.HasVideo</visible>
			</control>
		</control>
	</control>
</include>

<!-- ######################### -->
<!-- Custom Wiget window home/videos
############################## -->
<!-- Art fallback -->
<variable name="ValueWidgetView_FallbackIcon">
	<value condition="!String.IsEmpty(ListItem.TVShowTitle)">D</value><!-- Episode/Serie -->
	<value>E</value>
</variable>

<!-- Widgets Cycle labels -->
<variable name="ValueWidgetView_Label">
	<value condition="String.Contains(ListItem.DBTYPE,movie) + String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][COLOR=TextColorLight]$INFO[ListItem.Year, (,)][/COLOR][/B]</value><!-- Filme -->
	<value condition="String.Contains(ListItem.DBTYPE,tvshow)">[B]$INFO[ListItem.TVShowTitle][/B][COLOR=TextColorLight]$INFO[ListItem.Year, (,)][/COLOR]</value><!-- Serie -->
	<value condition="String.Contains(ListItem.DBTYPE,episode)">[B]$INFO[ListItem.TVShowTitle][/B]</value><!-- Episode -->
	<value>[B]$INFO[ListItem.label][/B]</value>
</variable>

<variable name="ValueWidgetView_Label2">
	<value condition="String.Contains(ListItem.DBTYPE,movie)">$INFO[ListItem.Duration,, $LOCALIZE[12391]]</value><!-- Filme -->
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) + !Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0)">$INFO[ListItem.Property(NumEpisodes),, Episoden]</value><!-- Serie -->
	<value condition="String.Contains(ListItem.DBTYPE,tvshow) + Integer.IsGreater(ListItem.Property(UnWatchedEpisodes),0)">$INFO[ListItem.Property(UnWatchedEpisodes),, neue Episoden]</value><!-- Serie -->
	<value condition="String.Contains(ListItem.DBTYPE,episode)">$VAR[SeasonPrefix-long,, ]$VAR[EpisodePrefix-long,,[CR]]$INFO[ListItem.Title]</value><!-- Episode -->
</variable>

<variable name="ValueWidgetViewContent">
	<value condition="Window.IsVisible(home)">$INFO[Skin.String(MainslotWidgetContent)]</value>
	<value condition="Window.IsVisible(videos)">$INFO[Skin.String(VideoslotWidgetContent)]</value>
</variable>

<variable name="ValueWidgetViewTitle">
	<value condition="Window.IsVisible(home)">$INFO[Skin.string(MainslotWidgetTitle)]</value>
	<value condition="Window.IsVisible(videos)">$INFO[Skin.String(VideoslotWidgetTitle)]</value>
</variable>


<include name="widget.selection">
<control type="group"><!-- Widget auswahl -->
	<left>660</left>
	<top>210</top>
	<description>Widget auswahl</description>
	<include>Dialog_popup_Animation</include>
	<visible>Control.HasFocus(9700)</visible>
	<control type="image">
		<description>Hintergrund Dialog</description>
		<left>-8</left>
		<top>-8</top>
		<width>695</width>
		<height>540</height>
		<include>DialogBackground</include>
	</control>
	<control type="image">
		<left>-11</left>
		<top>-11</top>
		<width>702</width>
		<height>80</height>
		<texture border="14,0,14,0" flipy="true" colordiffuse="$VAR[PrimaryCol]">cycle/full-11.png</texture>
	</control>
	<control type="grouplist">
		<description>Titel</description>
		<top>-11</top>
		<left>10</left>
		<width>660</width>
		<height>80</height>
		<itemgap>5</itemgap>
		<align>left</align>
		<orientation>horizontal</orientation>
		<control type="label">
			<description>Widget icon</description>
			<width>60</width>
			<height>67</height>
			<font>IconSidebarDimension</font>
			<textcolor>TextColorFO</textcolor>
			<label>V</label>
		</control>
		<control type="label">
			<description>Widget Titel aus string</description>
			<width>auto</width>
			<height>67</height>
			<textcolor>TextColorFO</textcolor>
			<font>DialogHeader</font>
			<include>VintageDialogTitel_Animation</include>
			<label>Widget auswählen</label>
		</control>
	</control>
	<control type="panel" id="9700">
		<left>-14</left>
		<top>80</top>
		<height>720</height>
		<width>707</width>
		<focusposition>1</focusposition>
		<onleft condition="Window.IsVisible(Custom_1194_UISetup.xml)">SetFocus(20)</onleft>
		<onleft condition="!Window.IsVisible(Custom_1194_UISetup.xml) + !String.IsEmpty(Container(400).ListItem.Label)">SetFocus(400)</onleft>
		<onright condition="!Window.IsVisible(Custom_1194_UISetup.xml) + !String.IsEmpty(Container(400).ListItem.Label)">SetFocus(400)</onright>
		<onright condition="Window.IsVisible(Custom_1194_UISetup.xml)">SetFocus(20)</onright>
		<ondown>9700</ondown>
		<onup>9700</onup>
		<visible allowhiddenfocus="true">Control.HasFocus(9700)</visible>
		<itemlayout width="707" height="60">
			<control type="label">
				<left>30</left>
				<width>50</width>
				<height>60</height>
				<aligny>top</aligny>
				<font>IconNormal</font>
				<textcolor>TextColorMedium</textcolor>
				<label>$INFO[ListItem.Label2]</label>
			</control>
			<control type="label">
				<left>80</left>
				<width>600</width>
				<height>60</height>
				<aligny>top</aligny>
				<textoffsety>5</textoffsety><!-- abweichung flip focus image -->
				<textcolor>TextColorMedium</textcolor>
				<label>$INFO[ListItem.Label]</label>
			</control>
		</itemlayout>
		<focusedlayout width="707" height="60">
			<control type="image">
				<width>706</width>
				<height>60</height>
				<texture border="14,0,14,0" flipy="true" colordiffuse="$VAR[PrimaryCol]">cycle/full-11.png</texture>
			</control>
			<control type="label">
				<left>30</left>
				<width>50</width>
				<height>60</height>
				<aligny>top</aligny>
				<font>IconNormal</font>
				<textcolor>TextColorFO</textcolor>
				<label>$INFO[ListItem.Label2]</label>
			</control>
			<control type="label">
				<left>80</left>
				<width>600</width>
				<height>60</height>
				<aligny>top</aligny>
				<textoffsety>5</textoffsety><!-- abweichung flip focus image -->
				<textcolor>TextColorFO</textcolor>
				<label>$INFO[ListItem.Label]</label>
			</control>
		</focusedlayout>
		<content>
			<item id="1">
				<description>Zufaellige Filme</description>
				<label>Zufällige (Filme)</label>
				<label2>E</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=randommovies&amp;reload=$INFO[Window(Home).Property(randommovies)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Zufällige Filme)</onclick>
			</item>
			<item id="2">
				<description>Neue Filme</description>
				<label>Neue (Filme)</label>
				<label2>G</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=recentmovies&amp;reload=$INFO[Window(Home).Property(recentmovies)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Neue Filme)</onclick>
			</item>
			<item id="3">
				<description>Laufende Filme</description>
				<label>Laufende (Filme)</label>
				<label2>F</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=recommendedmovies&amp;reload=$INFO[Window(Home).Property(recommendedmovies)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Laufende Filme)</onclick>
			</item>
			<item id="4">
				<description>Zufaellige Episoden</description>
				<label>Zufällige (Episoden)</label>
				<label2>D</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=randomepisodes&amp;reload=$INFO[Window(Home).Property(randomepisodes)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Zufällige Episoden)</onclick>
			</item>
			<item id="5">
				<description>Neue Episoden</description>
				<label>Neue (Episoden)</label>
				<label2>H</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=recentepisodes&amp;reload=$INFO[Window(Home).Property(recentepisodes)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Neue Episoden)</onclick>
			</item>
			<item id="6">
				<description>Laufende Serien</description>
				<label>Laufende (Serien)</label>
				<label2>A</label2>
				<onclick condition="Window.IsVisible(home)">Skin.reset(HomePlayliste)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.reset(VideoPlayliste)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidget)],plugin://service.library.data.provider?type=recommendedepisodes&amp;reload=$INFO[Window(Home).Property(recommendedepisodes)])</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)],Laufende Serien)</onclick>
			</item>
			<item id="7">
				<description>Video Playliste</description>
				<label>Eigene Playliste</label>
				<label2>&lt;</label2>
				<onclick>SetProperty(CustomKeyboardLabel,Widgettitel auswählen,home)</onclick>
				<onclick condition="Window.IsVisible(home)">Skin.SetString(HomePlayliste,Film)</onclick>
				<onclick condition="Window.IsVisible(videos)">Skin.SetString(VideoPlayliste,Film)</onclick>
				<onclick>Skin.SetString($INFO[Window(1101).Property(SlotclickWidgettitle)])</onclick>
				<onclick>Skin.SetFile($INFO[Window(1101).Property(SlotclickWidget)],.xsp,special://skin/playlists/)</onclick>
			</item>
		</content>
	</control>
	<control type="panel" id="9701">
		<description>Widget auswahlicons haeckchen</description>
		<left>620</left>
		<top>80</top>
		<width>80</width>
		<height>530</height>
		<focusposition>1</focusposition>
		<onleft>noop</onleft>
		<onright>noop</onright>
		<ondown>noop</ondown>
		<onup>noop</onup>
		<visible allowhiddenfocus="true">Control.HasFocus(9700)</visible>
		<itemlayout width="80" height="60">
			<control type="label">
				<width>80</width>
				<height>60</height>
				<align>center</align>
				<font>IconNormal</font>
				<textcolor>TextColorMedium</textcolor>
				<label>$INFO[ListItem.Label2]</label>
			</control>
		</itemlayout>
		<focusedlayout width="80" height="60">
			<control type="label">
				<width>80</width>
				<height>60</height>
				<align>center</align>
				<font>IconNormal</font>
				<textcolor>TextColorMedium</textcolor>
				<label>$INFO[ListItem.Label2]</label>
			</control>
		</focusedlayout>
		<content>
			<item id="1">
				<description>Zufaellige Filme</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=randommovies)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=randommovies)]</visible>
			</item>
			<item id="1">
				<description>Zufaellige Filme</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=randommovies)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=randommovies)]</visible>
			</item>
			<item id="2">
				<description>Neue Filme</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recentmovies)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recentmovies)]</visible>
			</item>
			<item id="2">
				<description>Neue Filme</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recentmovies)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recentmovies)]</visible>
			</item>
			<item id="3">
				<description>Laufende Filme</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recommendedmovies)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recommendedmovies)]</visible>
			</item>
			<item id="3">
				<description>Laufende Filme</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recommendedmovies)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recommendedmovies)]</visible>
			</item>
			<item id="4">
				<description>Zufaellige Episoden</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=randomepisodes)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=randomepisodes)]</visible>
			</item>
			<item id="4">
				<description>Zufaellige Episoden</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=randomepisodes)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=randomepisodes)]</visible>
			</item>
			<item id="5">
				<description>Neue Episoden</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recentepisodes)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recentepisodes)]</visible>
			</item>
			<item id="5">
				<description>Neue Episoden</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recentepisodes)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recentepisodes)]</visible>
			</item>
			<item id="6">
				<description>Laufende Serien</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recommendedepisodes)] | [Window.IsVisible(videos) + String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recommendedepisodes)]</visible>
			</item>
			<item id="6">
				<description>Laufende Serien</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.StartsWith(Skin.String(MainslotWidgetContent),plugin://service.library.data.provider?type=recommendedepisodes)] | [Window.IsVisible(videos) + !String.StartsWith(skin.string(VideoslotWidgetContent),plugin://service.library.data.provider?type=recommendedepisodes)]</visible>
			</item>
			<item id="7">
				<description>Video Playliste</description>
				<label>-</label>
				<label2>Ĥ</label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + String.IsEqual(Skin.String(HomePlayliste),Film)] | [Window.IsVisible(videos) + String.IsEqual(skin.string(VideoPlayliste),Film)]</visible>
			</item>
			<item id="7">
				<description>Video Playliste</description>
				<label>-</label>
				<label2></label2>
				<onclick>noop</onclick>
				<visible>[Window.IsVisible(home) + !String.IsEqual(Skin.String(HomePlayliste),Film)] | [Window.IsVisible(videos) + !String.IsEqual(skin.string(VideoPlayliste),Film)]</visible>
			</item>
		</content>
	</control>
</control>
</include>
<!-- ######################### -->
<!-- UISetup
############################## -->
<variable name="UISetupFocus.Label">
	<value condition="Control.HasFocus(10)">$INFO[skin.string(HomeSlideMenueStartItem)]</value>
	<value condition="Control.HasFocus(11)">$INFO[skin.string(HomeSlideMenueStartItemL)]</value>
	<value condition="Control.HasFocus(12)">$INFO[skin.string(HomeSlideMenueStartItemR)]</value>
	<value condition="Control.HasFocus(13)">weiter um diesen Schritt abzuschließen</value>
	<value condition="Control.HasFocus(22)">weiter um diesen Schritt abzuschließen</value>
	<value condition="Control.HasFocus(20) | String.IsEqual(Window(home).Property(UISetupFocus),HomeWidget)">$INFO[Skin.string(MainslotWidgetTitle)]</value>
	<value condition="Control.HasFocus(21) | String.IsEqual(Window(home).Property(UISetupFocus),VideoWidget)">$INFO[skin.string(VideoslotWidgetTitle)]</value>
	
	<value condition="Control.HasFocus(32)">weiter um diesen Schritt abzuschließen</value>
	<value condition="Control.HasFocus(30) | String.IsEqual(Window(home).Property(UISetupFocus),FilmeRechts)">$INFO[Skin.string(CycleMyNavVideoMovieQuicklinkTitle)]</value>
	<value condition="Control.HasFocus(31) | String.IsEqual(Window(home).Property(UISetupFocus),SerienRechts)">$INFO[skin.string(CycleMyNavVideoTVQuicklinkTitle)]</value>
	
	<value condition="Control.HasFocus(42)">weiter um diesen Schritt abzuschließen</value>
	<value condition="Control.HasFocus(40) + !String.IsEmpty(Skin.string(FilmDokuContent))">$INFO[Skin.string(FilmDokuContent)]</value>
	<value condition="Control.HasFocus(41) + !String.IsEmpty(Skin.string(TVDokuContent))">$INFO[skin.string(TVDokuContent)]</value>
	<value condition="Control.HasFocus(50) + Skin.HasSetting(EnableVintageOverlay)">an</value>
	<value condition="Control.HasFocus(50) + !Skin.HasSetting(EnableVintageOverlay)">aus</value>
	<value condition="Control.HasFocus(52) + !Skin.HasSetting(HideBackGroundFanart)">Anzeigen</value>
	<value condition="Control.HasFocus(52) + Skin.HasSetting(HideBackGroundFanart)">Ausblenden</value>
	<value condition="Control.HasFocus(53)">Klicken um die Grundeinstellungen abzuschließen</value>
</variable>

</includes>

