<?xml version="1.0" encoding="UTF-8"?>
<includes>
	<!-- ######################### -->
	<!-- Sideblade 
	############################## -->
	<include name="Sideblade_LeftBG">
		<top>480</top>
		<width>60</width>
		<height>128</height>
		<font>-</font>
		<texturefocus colordiffuse="$VAR[primaryCol]">views/blade.png</texturefocus>
		<texturenofocus colordiffuse="$VAR[primaryCol]">views/blade.png</texturenofocus>
	</include>
	<include name="Sideblade_Left">
		<top>480</top>
		<width>45</width>
		<height>45</height>
		<font>-</font>
		<texturefocus>-</texturefocus>
		<texturenofocus>-</texturenofocus>
	</include>
	<include name="Sideblade_Left_NF"><!-- Sideblade indikator links -->
		<control type="group">
			<left>-5</left>
			<visible>![Window.IsVisible(Custom_1120_MainMenuSlide.xml) | Window.IsVisible(Custom_1141_ViewtypeSimilar.xml) | Window.IsVisible(contextmenu) | Window.IsVisible(shutdownmenu) | Window.IsVisible(favourites) | Window.IsVisible(playercontrols)]</visible>
			<include>Open_Close_Fade_Animation</include>
			<control type="button">
				<include>Sideblade_LeftBG</include>
			</control>
			<control type="label">
				<description>Arrow</description>
				<left>-15</left>
				<top>485</top>
				<width>100</width>
				<height>100</height>
				<font>IconSideblade</font>
				<label>+</label>
				<include>IconColorFO</include>
			</control>
			<control type="button" id="9001">
				<include>Sideblade_Left</include>
				<onclick>ActivateWindow(1120)</onclick>
			</control>
		</control>
	</include>
	
	<include name="Sideblade_Left_FO"><!-- Sideblade indikator mit ausgefahrener Sidebar -->
		<control type="group">
			<description>Nach unten bevor Uberschneidung des Buttons bei der Naviagation</description>
			<left>416</left>
			<visible>ControlGroup(9110).HasFocus</visible>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,5)">
				<effect type="slide" start="0,0" end="0,60" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,6)">
				<effect type="slide" start="0,0" end="0,120" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,7)">
				<effect type="slide" start="0,0" end="0,180" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,8)">
				<effect type="slide" start="0,0" end="0,240" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,9)">
				<effect type="slide" start="0,0" end="0,300" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,10)">
				<effect type="slide" start="0,0" end="0,360" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,11)">
				<effect type="slide" start="0,0" end="0,420" time="120" />
			</animation>
			<animation type="Conditional" condition="String.IsEqual(Container(9110).CurrentItem,12)">
				<effect type="slide" start="0,0" end="0,480" time="120" />
			</animation>
			<control type="button">
				<include>Sideblade_LeftBG</include>
			</control>
			<control type="label">
				<description>Arrow</description>
				<left>-15</left>
				<top>485</top>
				<width>100</width>
				<height>100</height>
				<font>IconSideblade</font>
				<label>+</label>
				<include>IconColorFO</include>
			</control>
			<control type="button" id="9001">
				<include>Sideblade_Left</include>
				<onclick>SetFocus(50)</onclick>
			</control>
		</control>
	</include>
	
	<include name="Sideblade_Left_BG"><!-- Sideblade hintergrund -->
		<control type="image">
			<description>Hintergrund</description>
			<width>419</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[DialogCol]" background="true">White.png</texture>
		</control>
		<control type="image">
			<left>419</left>
			<width>8</width>
			<height>1080</height>
			<texture colordiffuse="ShadowColor">cycle/shadow-right-8.png</texture>
		</control>
	</include>
	
	<include name="Sideblade_Left_IconBG"><!-- Sideblade icon hintergrund -->
		<control type="image">
			<description>Iconhintergrund</description>
			<width>100</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[primaryCol]" background="true">White.png</texture>
		</control>
	</include>
	
	<include name="Sideblade_Left_Breadcumb"><!-- Sideblade breadcumb - titel oben und info ganz unten falls noetig -->
		<control type="group">
			<left>120</left>
			<top>20</top>
			<width>sidebar.breadcumblabel.width</width>
			<height>1080</height>
			<control type="grouplist">
				<width>sidebar.breadcumblabel.width</width>
				<height>140</height>
				<itemgap>10</itemgap>
				<orientation>vertical</orientation>
				<control type="label">
					<width>sidebar.breadcumblabel.width</width><!-- check selbe breite wie alle -->
					<height>sidebar.breadcumblabel.height</height>
					<font>BreadcumbNormal</font>
					<scroll>false</scroll>
					<label>$VAR[Sideblade_breadcrumbs]</label>
				</control>
				<control type="label">
					<width>sidebar.breadcumblabel.width</width>
					<height>sidebar.breadcumblabel.height</height>
					<font>BreadcumbSmall</font>
					<scroll>false</scroll>
					<wrapmultiline>true</wrapmultiline>
					<label>$VAR[Sideblade_breadcrumbs2]</label>
					<!--<visible>!ListItem.IsParentFolder</visible> -->
				</control>
			</control>
			<control type="label">
				<top>965</top>
				<width>sidebar.breadcumblabel.width</width>
				<height>sidebar.breadcumblabel.height</height>
				<font>BreadcumbSmall</font>
				<scroll>false</scroll>
				<wrapmultiline>true</wrapmultiline>
				<label>$VAR[Sideblade_breadcrumbs3]</label>
			</control>
		</control>
	</include>
	
	<include name="Sideblade_Left_Dimension"><!-- Sideblade grouplist groesse -->
		<left>100</left>
		<top>150</top>
		<width>375</width>
		<height>975</height>
		<onleft>ActivateWindow(1120)</onleft><!-- Mainmenue Quciknav -->
		<onright>SetFocus(50)</onright><!-- back -->
		<onup>9110</onup>
		<ondown>9110</ondown>
		<onback>50</onback><!-- back -->
		<orientation>vertical</orientation>
		<itemgap>5</itemgap>
	</include>
	
	<include name="Sideblade_Left_IconDimension"><!-- Sideblade sidebar icon grouplist groesse -->
		<left>20</left>
		<top>150</top>
		<itemgap>5</itemgap>
		<width>100</width>
		<height>975</height>
		<visible>ControlGroup(9110).HasFocus</visible>
	</include>

	<include name="Sideblade_ButtonValues"><!-- Sideblade buttonvorlage -->
		<width>330</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<textoffsetx>20</textoffsetx>
		<radioposx>250</radioposx>
		<textwidth>250</textwidth>
		<radioposy>10</radioposy>
		<font>LightNormal</font>
		<texturenofocus>-</texturenofocus>
		<alttexturenofocus>-</alttexturenofocus>
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubButton.png</texturefocus>
		<alttexturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubButton.png</alttexturefocus>
	</include>
	
	<!-- ######################### -->
	<!-- homeslide 
	############################## -->
	<include name="HomeMenuListDimension"><!-- Home Sideblade groesse -->
		<width>388</width>
		<height>975</height>
		<itemgap>5</itemgap>
	</include>

	<include name="HomeMenuListright"><!-- Home Sideblade action rechts focus back in diversen Fenstern, auch bei Favoriten -->
		<onright condition="Window.IsActive(Custom_1120_MainMenuSlide.xml)">Dialog.Close(1120)</onright>
		<onright condition="Window.IsActive(favourites)">close</onright>
		<onright condition="Window.IsVisible(home)">SetFocus(9800)</onright>
		<onright condition="Window.IsVisible(videos)">SetFocus(50)</onright>
		<onleft condition="Window.IsVisible(musiclibrary)">SetFocus(71)</onleft>
		<onleft condition="Window.IsVisible(pictures)">SetFocus(71)</onleft>
		<onleft condition="Window.IsVisible(programs)">SetFocus(71)</onleft>
		<onright condition="Window.IsVisible(SettingsCategory.xml)">SetFocus(3)</onright>
		<onright condition="Window.IsVisible(settings)">SetFocus(9100)</onright>
		<onright condition="Window.IsVisible(skinsettings)">SetFocus(9000)</onright>
		<onright condition="Window.IsVisible(systeminfo)">SetFocus(9000)</onright>
		<onright condition="Window.IsVisible(weather)">SetFocus(54)</onright>
	</include>
	
	<include name="HomeMenuListleft"><!-- Home Sideblade action links focus back in diversen Fenstern, auch bei Favoriten -->
		<onleft condition="Window.IsActive(Custom_1120_MainMenuSlide.xml)">Dialog.Close(1120)</onleft>
		<onleft condition="Window.IsActive(favourites)">close</onleft>
		<onleft condition="Window.IsVisible(home)">SetFocus(9800)</onleft>
		<onleft condition="Window.IsVisible(videos)">SetFocus(9110)</onleft>
		<onleft condition="Window.IsVisible(musiclibrary)">SetFocus(9110)</onleft>
		<onleft condition="Window.IsVisible(pictures)">SetFocus(9110)</onleft>
		<onleft condition="Window.IsVisible(programs)">SetFocus(9110)</onleft>
		<onleft condition="Window.IsVisible(SettingsCategory.xml)">SetFocus(3)</onleft>
		<onleft condition="Window.IsVisible(settings)">SetFocus(9100)</onleft>
		<onleft condition="Window.IsVisible(skinsettings)">SetFocus(9000)</onleft>
		<onleft condition="Window.IsVisible(systeminfo)">SetFocus(9000)</onleft>
		<onleft condition="Window.IsVisible(weather)">SetFocus(54)</onleft>
	</include>
	
	<include name="HomeMenu_Left_BG"><!-- Home Sideblade hintergrund -->
		<control type="image">
			<description>Hintergrund</description>
			<width>419</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[DialogCol]" background="true">White.png</texture>
		</control>
		<control type="image">
			<description>Schatten</description>
			<left>419</left>
			<width>8</width>
			<height>1080</height>
			<texture colordiffuse="ShadowColor">cycle/shadow-right-8.png</texture>
		</control>
	</include>
	
	<include name="HomeMenu_Left_IconBG"><!-- Home Sideblade icon hintergrund -->
		<control type="image">
			<description>Iconhintergrund</description>
			<width>100</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[primaryCol]" background="true">White.png</texture>
		</control>
	</include>
	
	<include name="HomeMenuButtonValues"><!-- Home Sideblade buttonvorlagen -->
		<width>330</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<textoffsetx>20</textoffsetx>
		<font>LightNormal</font>
	</include>

	<include name="HomeMenuSubButton">
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubButton.png</texturefocus>
	</include>
	
	<include name="HomeMenuEnterButton">
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubEnter.png</texturefocus>
	</include>
	
	<include name="HomeMenuArrowButton">
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubArrow.png</texturefocus>
	</include>
	
	<include name="HomeMenuArrowButtonFO">
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubArrowFO.png</texturefocus>
	</include>
	
	<include name="HomeMenuLabelDimension"><!-- Home Sideblade ContainerLabel Pinboards und Playlisten -->
		<left>40</left>
		<width>280</width>
		<height>sidebar.icon.dimension</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<font>Pinboard</font>
		<label>$INFO[ListItem.Label]</label>
	</include>
	
	<include name="HomeMenuDivider">
		<control type="label" id="8112">
			<description>Divider</description>
			<height>135</height><!-- include ueberschreibung -->
			<include>HomeMenuEnterButton</include>
			<include>HomeMenuButtonValues</include>
			<label></label>
			<visible>String.IsEqual(Container(8100).NumItems,11)</visible>
		</control>
		<control type="label" id="8114">
			<description>Divider</description>
			<height>200</height><!-- include ueberschreibung -->
			<include>HomeMenuEnterButton</include>
			<include>HomeMenuButtonValues</include>
			<label></label>
			<visible>String.IsEqual(Container(8100).NumItems,10)</visible>
		</control>
		<control type="label" id="8116">
			<description>Divider</description>
			<height>265</height><!-- include ueberschreibung -->
			<include>HomeMenuEnterButton</include>
			<include>HomeMenuButtonValues</include>
			<label></label>
			<visible>String.IsEqual(Container(8100).NumItems,9)</visible>
		</control>
		<control type="label" id="8118">
			<description>Divider</description>
			<height>330</height><!-- include ueberschreibung -->
			<include>HomeMenuEnterButton</include>
			<include>HomeMenuButtonValues</include>
			<label></label>
			<visible>Integer.IsLessOrEqual(Container(8100).NumItems,8)</visible>
		</control>
	</include>
	
	<variable name="HomeMenuPinboard"><!-- Home Sideblade Pinboard Playlisten -->
		<value condition="String.IsEqual(Control.GetLabel(82382),TV) + !String.IsEmpty(Skin.String(PinboardRecentTVPls))">$INFO[Skin.String(PinboardRecentTVPls)]</value>
		<value condition="String.IsEqual(Control.GetLabel(82382),Movie) + !String.IsEmpty(Skin.String(PinboardRecentMoviesPls))">$INFO[Skin.String(PinboardRecentMoviesPls)]</value>
	</variable>

	<!-- ######################### -->
	<!-- settings 
	############################## -->
	<include name="ColorMenuButtonValues"><!-- Farbeinstellungen custom window buttonvorlage -->
		<width>702</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>5</textoffsety>
		<textoffsetx>40</textoffsetx>
		<radioposx>610</radioposx>
		<radioposy>0</radioposy>
		<texturedown>-</texturedown>
		<textureupfocus>-</textureupfocus>
		<texturedownfocus>-</texturedownfocus>
		<textureradiofocus>-</textureradiofocus>
		<textureradionofocus>-</textureradionofocus>
		<texturefocus flipy="true" border="14,0,14,0" colordiffuse="$VAR[primaryCol]">cycle/full-11.png</texturefocus>
		<texturenofocus>-</texturenofocus>
		<font>LightNormal</font>
	</include>

	<include name="SettingMenuListDimension"><!-- Einstellungen Sideblade groesse -->
		<width>388</width>
		<height>975</height>
	</include>
	
	<include name="SettingMenu_BG"><!-- Einstellungen Sideblade icon hintergrund -->
		<control type="image">
			<description>Hintergrund</description>
			<width>419</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[DialogCol]" background="true">White.png</texture>
		</control>
		<control type="image">
			<left>419</left>
			<width>8</width>
			<height>1080</height>
			<texture colordiffuse="ShadowColor">cycle/shadow-right-8.png</texture>
		</control>
	</include>
	
	<include name="SettingMenu_IconBG"><!-- Einstellungen Sideblade icon hintergrund -->
		<control type="image">
			<description>Iconhintergrund</description>
			<width>100</width>
			<height>1080</height>
			<texture colordiffuse="$VAR[primaryCol]" background="true">White.png</texture>
		</control>
	</include>

	<include name="SettingMenuButtonValues"><!-- Einstellungen Sideblade buttonvorlagen -->
		<width>330</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<textoffsetx>20</textoffsetx>
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">buttons/MainSliderightSubButton.png</texturefocus>
		<font>LightNormal</font>
	</include>

	<include name="SkinSettingButtonValue">
		<texturefocus border="14,0,14,0" colordiffuse="$VAR[primaryCol]">cycle/full-11.png</texturefocus>
		<texturenofocus>-</texturenofocus>
		<width>1125</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<textoffsetx>25</textoffsetx>
		<radioposx>1030</radioposx>
		<radioposy>5</radioposy>
	</include>
	
	<include name="SkinSettingSubLabel">
		<width>1125</width>
		<height>80</height>
		<aligny>top</aligny>
		<font>BoldNormal</font>
		<textoffsetx>25</textoffsetx>
		<textoffsety>30</textoffsety>
	</include>
	
	<!-- ######################### -->
	<!-- Shutdown 
	############################## -->
	<include name="ShutdownButtons"><!-- Shutdown Sideblade buttonvorlagen -->
		<width>330</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>15</textoffsety>
		<font>LightNormal</font>
		<texturenofocus>-</texturenofocus>
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">cycle/right-11.png</texturefocus>
	</include>
	
	<!-- ######################### -->
	<!-- context 
	############################## -->
	<include name="ContextmenueButton"><!-- Context Sideblade buttonvorlagen -->
		<font>RegularSmall</font>
		<width>368</width>
		<height>sidebar.label.height</height>
		<aligny>top</aligny>
		<textoffsety>20</textoffsety>
		<textoffsetx>20</textoffsetx>
		<texturefocus border="0,0,14,0" colordiffuse="$VAR[primaryCol]">cycle/right-11.png</texturefocus>
	</include>
	
	<!-- ######################### -->
	<!-- kringel 
	############################## -->
	<include name="LogoMenueLayout">
		<control type="image">
			<width>400</width>
			<height>400</height>
			<texture colordiffuse="ShadowColor">logo/logoBorderFO.png</texture>
		</control>
		<control type="image">
			<width>400</width>
			<height>400</height>
			<texture colordiffuse="$VAR[primaryCol]">logo/logoD.png</texture>
		</control>
		<control type="image">
			<width>400</width>
			<height>400</height>
			<texture colordiffuse="$VAR[secondaryCol]">logo/logoL2.png</texture>
		</control>
		<control type="image">
			<width>400</width>
			<height>400</height>
			<texture colordiffuse="$VAR[circlesCol]">logo/logoW.png</texture>
		</control>
		<control type="image">
			<width>400</width>
			<height>400</height>
			<texture colordiffuse="$VAR[secondaryCol]">logo/logoL1.png</texture>
		</control>
	</include>
	<!-- ######################### home ############################## -->
	<!-- mitte -->
	<variable name="CycleHomeQuicknavTitle">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Serien)">D</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Filme)">E</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Video)">W</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Musik)">ñ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Einstellungen)">ė</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Wetter)">:</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Addons)">Ĝ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Bilder)">À</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Favoriten)">ę</value>
		<value>D</value>
	</variable>
	<variable name="CycleHomeQuicknavClick">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Filme)">ActivateWindow(Videos,MovieTitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Serien)">ActivateWindow(Video,tvshowtitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Video)">ActivateWindow(Videos,Files,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Musik)">ActivateWindow(MusicFiles)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Einstellungen)">ActivateWindow(Settings)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Wetter)">ActivateWindow(weather)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Addons)">ActivateWindow(addonbrowser)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Bilder)">ActivateWindow(pictures)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItem),Favoriten)">ActivateWindow(Favourites)</value>
		<value condition="String.IsEmpty(skin.string(HomeSlideMenueStartItem))">ActivateWindow(Video,tvshowtitles,return)</value>
	</variable>
	<!-- rechts -->
	<variable name="CycleHomeQuicknavTitleR">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Filme)">E</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Serien)">D</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Video)">W</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Musik)">ñ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Einstellungen)">ė</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Wetter)">:</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Addons)">Ĝ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Bilder)">À</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Favoriten)">ę</value>
		<value>-</value>
	</variable>
	<variable name="CycleHomeQuicknavClickR">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Filme)">ActivateWindow(Videos,MovieTitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Serien)">ActivateWindow(Video,tvshowtitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Video)">ActivateWindow(Videos,Files,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Musik)">ActivateWindow(MusicFiles)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Einstellungen)">ActivateWindow(Settings)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Wetter)">ActivateWindow(weather)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Addons)">ActivateWindow(addonbrowser)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Bilder)">ActivateWindow(pictures)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemR),Favoriten)">ActivateWindow(Favourites)</value>
		<value>noop</value>
	</variable>
	<!-- links -->
	<variable name="CycleHomeQuicknavTitleL">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Filme)">E</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Serien)">D</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Video)">W</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Musik)">ñ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Einstellungen)">ė</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Wetter)">:</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Addons)">Ĝ</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Bilder)">À</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Favoriten)">ę</value>
		<value>-</value>
	</variable>
	<variable name="CycleHomeQuicknavClickL">
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Filme)">ActivateWindow(Videos,MovieTitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Serien)">ActivateWindow(Video,tvshowtitles,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Video)">ActivateWindow(Videos,Files,return)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Musik)">ActivateWindow(MusicFiles)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Einstellungen)">ActivateWindow(Settings)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Wetter)">ActivateWindow(weather)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Addons)">ActivateWindow(addonbrowser)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Bilder)">ActivateWindow(pictures)</value>
		<value condition="String.IsEqual(skin.string(HomeSlideMenueStartItemL),Favoriten)">ActivateWindow(Favourites)</value>
		<value>noop</value>
	</variable>
	
	<!-- ######################### video Logo als menue ############################## -->
	<!-- mitte -->
	<variable name="CycleMyNavVideoQuicknavTitle">
		<value>V</value>
	</variable>
	<include name="CycleMyNavVideoQuicknavClick">
		<onclick>ActivateWindow(1101)</onclick>
	</include>
	<!-- rechts -->
	<variable name="CycleMyNavVideoQuicknavTitleR">
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/TV_)">D</value>
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Episode_)">D</value>
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Film_)">E</value>
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Doku_Serie)">i</value><!-- pls switch zu film -->
		<value condition="String.StartsWith(Container.Folderpath,special://skin/playlists/Doku_Film)">i</value><!-- pls switch zu serie -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows)">&lt;</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies)">&lt;</onfocus>
		<value>&lt;</value>
	</variable>
	<include name="CycleMyNavVideoQuicknavClickR">
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Doku_Serie)">ActivateWindow(Videos,$INFO[Skin.String(FilmDokuContent)],return)</onfocus><!-- pls switch zu film -->
		<onfocus condition="String.StartsWith(Container.Folderpath,special://skin/playlists/Doku_Film)">ActivateWindow(Videos,$INFO[Skin.String(TVDokuContent)],return)</onfocus><!-- pls switch zu serie -->
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/TV_)">$INFO[Window(videos).Property(PreviouseWindowVideos)]</onfocus>
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Episode_)">$INFO[Window(videos).Property(PreviouseWindowVideos)]</onfocus>
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Film_)">$INFO[Window(videos).Property(PreviouseWindowVideos)]</onfocus>
		<onfocus condition="![String.StartsWith(Container.Folderpath,videodb://) | String.StartsWith(Container.Folderpath,library://video/tvshows) | String.StartsWith(Container.Folderpath,library://video/movies) | String.StartsWith(Container.FolderPath,special://skin/playlists)]">SetProperty(PreviouseWindowVideos,ActivateWindow(Videos,root),videos)</onfocus>
		<onfocus condition="!String.StartsWith(Container.Folderpath,library://video/tvshows) + !String.StartsWith(Container.Folderpath,library://video/movies) + !String.StartsWith(Container.Folderpath,videodb://) + !String.StartsWith(Container.Folderpath,special://skin/playlists)">ActivateWindow(home)</onfocus><!-- root -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshows,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/tvshows)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshows,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/titles/)">SetProperty(PreviouseWindowVideos,ActivateWindow(Videos,TvShowTitles,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/genres/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshowgenres,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/years/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshowyears,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/actors/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshowactors,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/studios/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshowstudios,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://recentlyaddedepisodes)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,recentlyaddedepisodes,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows/tags/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,tvshowtags,return),videos)</onfocus><!-- serie switch back prop -->
		<onfocus condition="Container.Content(episodes)">Action(back)</onfocus><!-- test episode -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + !Container.Content(episodes) + !Container.Content(seasons) + !String.Contains(Container.FolderPath,xsp)">ActivateWindow(Videos,$INFO[Skin.string(CycleMyNavVideoTVQuicklinkContent)],return)</onfocus><!-- test episode -->
		
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + String.Contains(Container.FolderPath,xsp)">Action(back)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows) + String.Contains(Container.FolderPath,xsp)">$INFO[Window(videos).Property(PreviouseWindowVideos)]</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/tvshows)">ActivateWindow(Videos,$INFO[Skin.string(CycleMyNavVideoTVQuicklinkContent)],return)</onfocus>
		
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/titles/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,movietitles,return),videos)</onfocus><!-- film aktiv switch root -->
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/movies)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,movies,return),videos)</onfocus><!-- film aktiv switch root -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/genres/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,moviegenres,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/years/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,movieyears,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/actors/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,movieactors,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/studios/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,moviestudios,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/tags/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,movietags,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/countries/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,moviecountries,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/directors/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,moviedirectors,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies/sets/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,moviesets,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://recentlyaddedmovies/)">SetProperty(PreviouseWindowVideos,ActivateWindow(videos,recentlyaddedmovies,return),videos)</onfocus><!-- film switch back prop -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies)">ActivateWindow(Videos,$INFO[Skin.string(CycleMyNavVideoMovieQuicklinkContent)],return)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/movies)">ActivateWindow(Videos,$INFO[Skin.string(CycleMyNavVideoMovieQuicklinkContent)],return)</onfocus>
		<onfocus condition="String.IsEqual(Container.FolderPath,special://skin/playlists/)">ActivateWindow(Videos,library://video/,return)</onfocus><!-- playlist root -->
	</include>
	<!-- links -->
	<variable name="CycleMyNavVideoQuicknavTitleL">
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/TV_)">W</value><!-- pls switch zu back -->
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Doku_Serie)">W</value><!-- pls switch zu back -->
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Episode_)">W</value><!-- pls switch zu back -->
		<value condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Film_)">W</value><!-- pls switch zu back -->
		<value condition="String.StartsWith(Container.Folderpath,videodb://tvshows)">W</value><!-- serie aktiv switch zu film -->
		<value condition="String.StartsWith(Container.Folderpath,videodb://movies)">W</value><!-- film aktiv switch zu serie -->
		<value condition="String.StartsWith(Container.Folderpath,special://skin/playlists/Doku_Film)">W</value><!-- film aktiv switch zu serie -->
		<value>W</value>
	</variable>
	<include name="CycleMyNavVideoQuicknavClickL">
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/TV_)">ActivateWindow(Videos,library://video/tvshows)</onfocus><!-- serie aktiv switch root -->
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Doku_)">$INFO[Window(videos).Property(PreviouseWindowVideos)]</onfocus><!-- switch back -->
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Episode_)">ActivateWindow(Videos,library://video/tvshows)</onfocus><!-- serie aktiv switch root -->
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/Film_)">ActivateWindow(Videos,library://video/movies)</onfocus><!-- film aktiv switch root -->
		<onfocus condition="String.StartsWith(Container.FolderPath,special://skin/playlists/)">ActivateWindow(Videos,library://video/,return)</onfocus><!-- playlist root -->
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://tvshows)">ActivateWindow(Videos,library://video/tvshows)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://recentlyaddedepisodes)">ActivateWindow(Videos,library://video/tvshows)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://movies)">ActivateWindow(Videos,library://video/movies)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,videodb://recentlyaddedmovies)">ActivateWindow(Videos,library://video/movies)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/tvshows)">Action(back)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/tvshows)">SetFocus(50)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/movies)">Action(back)</onfocus>
		<onfocus condition="String.StartsWith(Container.Folderpath,library://video/movies)">SetFocus(50)</onfocus>
	</include>
	
	<!-- ######################### wetter Logo als menue ############################## -->
	<!-- mitte -->
	<variable name="CycleMyWeatherQuicknavTitle">
		<value>i</value><!-- refresh -->
	</variable>
	<include name="CycleMyWeatherQuicknavClick">
		<onclick>Weather.Refresh</onclick><!-- refresh -->
	</include>
	<!-- rechts -->
	<variable name="CycleMyWeatherQuicknavTitleR">
		<value>ė</value><!-- setting -->
	</variable>
	<include name="CycleMyWeatherQuicknavClickR">
		<onfocus>ActivateWindow(ServiceSettings,weather)</onfocus>
	</include>
	<!-- links -->
	<variable name="CycleMyWeatherQuicknavTitleL">
		<value>#</value><!-- home -->
	</variable>
	<include name="CycleMyWeatherQuicknavClickL">
		<onfocus>ActivateWindow(1120)</onfocus>
	</include>
	
	<!-- Infostand - sortierung/auf- absteigend/watched- unwatched -->
	<variable name="CycleMyNavSidebarDirectionlabel">
		<value condition="Container.SortDirection(ascending)">Austeigend</value>
		<value>Absteigend</value>
	</variable>
	
	<variable name="CycleSidebarLevellabel">
		<value condition="String.Contains(Control.GetLabel(22),Höhere Level anzeigen)">Höhere Level</value>
		<value>$INFO[Control.GetLabel(22)]</value>
	</variable>
	
	<variable name="CycleMyNavSidebarSortlabel">
		<value condition="String.Contains(Control.GetLabel(3),Bewertung)">Bewertung</value>
		<value condition="String.Contains(Control.GetLabel(3),Datei)">Datei</value>
		<value condition="String.Contains(Control.GetLabel(3),Altersfreigabe)">Freigabe</value>
		<value condition="String.Contains(Control.GetLabel(3),Produktions-Code)">Prod. code</value>
		<value condition="String.Contains(Control.GetLabel(3),Datum)">Datum</value>
		<value condition="String.Contains(Control.GetLabel(3),Dauer)">Dauer</value>
		<value condition="String.Contains(Control.GetLabel(3),Größe)">Größe</value>
		<value condition="String.Contains(Control.GetLabel(3),Hinzugefügt)">Hinzugefügt</value>
		<value condition="String.Contains(Control.GetLabel(3),Abspielzähler)">Zähler</value>
		<value condition="String.Contains(Control.GetLabel(3),Titel)">Titel</value>
		<value condition="String.Contains(Control.GetLabel(3),Name)">Name</value>
		<value condition="String.Contains(Control.GetLabel(3),Episoden)">Episoden</value>
		<value condition="String.Contains(Control.GetLabel(3),Episode)">Episode</value>
		<value condition="String.Contains(Control.GetLabel(3),Zuletzt)">Abgespielt</value>
		<value condition="String.Contains(Control.GetLabel(3),Jahr)">Jahr</value>
		<value condition="String.Contains(Control.GetLabel(3),Album)">Album</value>
		<value condition="String.Contains(Control.GetLabel(3),Interpret)">Interpret</value>
		<value condition="String.Contains(Control.GetLabel(3),Nummer)">Track</value>
		<value condition="String.Contains(Control.GetLabel(3),Listeners)">Listeners</value>
		<value condition="String.Contains(Control.GetLabel(3),Stück)">Liedern</value>
		<value condition="String.Contains(Control.GetLabel(3),Bitrate)">Bitrate</value>
		<value condition="String.Contains(Control.GetLabel(3),TV-Serie)">TV-Serie</value>
		<value condition="String.Contains(Control.GetLabel(3),Benutzer-Rating)">Eigene Bewertung</value>
		<value>$INFO[Control.GetLabel(3)]</value>
	</variable>
	
	<variable name="CycleMyNavSidebarWatchedlabel">
		<value condition="!System.Setting(hidewatched) + Container.Content(movies)">Alle Filme</value>
		<value condition="!System.Setting(hidewatched) + [Container.Content(tvshows) | Container.Content(seasons)]">Alle Serien</value>
		<value condition="!System.Setting(hidewatched) + Container.Content(episodes)">Alle Episoden</value>
		<value condition="System.Setting(hidewatched) + Container.Content(movies)">Neue Filme</value>
		<value condition="System.Setting(hidewatched) + [Container.Content(tvshows) | Container.Content(seasons)]">Neue Serien</value>
		<value condition="System.Setting(hidewatched) + Container.Content(episodes)">Neue Episoden</value>
	</variable>
	
</includes>